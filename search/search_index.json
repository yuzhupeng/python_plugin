{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e3b\u9801 Author\uff1a Desire \u5b66\u4f1a\u81ea\u5df1\u6b23\u8d4f\u81ea\u5df1\uff0c\u82e5\u662f\u7f8e\u597d\uff0c\u53eb\u4f5c\u7cbe\u5f69\u3002\u82e5\u662f\u7cdf\u7cd5\uff0c\u53eb\u4f5c\u5386\u7ec3\u3002","title":"\u4e3b\u9801"},{"location":"#_1","text":"Author\uff1a Desire \u5b66\u4f1a\u81ea\u5df1\u6b23\u8d4f\u81ea\u5df1\uff0c\u82e5\u662f\u7f8e\u597d\uff0c\u53eb\u4f5c\u7cbe\u5f69\u3002\u82e5\u662f\u7cdf\u7cd5\uff0c\u53eb\u4f5c\u5386\u7ec3\u3002","title":"\u4e3b\u9801"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/","text":"Django - \u521d\u63a2 1\u3001\u521b\u5efadjango\u9879\u76ee django-admin startproject djangodemo . \".\"\u4ee3\u8868\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u9879\u76ee\uff0c\u4f1a\u628a\u5f53\u524d\u76ee\u5f55\u4f5c\u4e3a\u9879\u76ee\u7684\u6839\u76ee\u5f55 \u4e0d\u52a0\".\"\uff0c\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee 2\u3001\u521b\u5efa\u5b50\u5e94\u7528app python manage.py startapp hello 3\u3001\u4fee\u6539\u914d\u7f6e\u9879\uff08settings.py\uff09 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hello' # \u65b0\u521b\u5efa\u7684App\u9700\u8981\u8fdb\u884c\u6ce8\u518c ] # \u4fee\u6539\u8bed\u8a00 LANGUAGE_CODE = 'zh-hans' # \u4fee\u6539\u65f6\u533a TIME_ZONE = \"Asia/Shanghai\" 4\u3001\u8fd0\u884c python manage.py runserver 5\u3001django\u5de5\u7a0b\u76ee\u5f55\u7ed3\u6784 1\uff09 \u4e0e\u9879\u76ee\u540d\u79f0\u540c\u540d\u7684\u76ee\u5f55\uff08\u4fdd\u5b58django\u7684\u9879\u76ee\u914d\u7f6e\u4fe1\u606f\uff09 sagi.py \u7528\u4e8e\u542f\u52a8ASGI\u534f\u8bae\u7684\u542f\u52a8\u95ee\u9898 settings.py \u7528\u4e8e\u5b58\u653eDjango\u7684\u5168\u5c40\u914d\u7f6e\u4fe1\u606f urls.py \u7528\u4e8e\u521b\u5efa\u5168\u5c40\u8def\u7531\u4fe1\u606f wsgi.py \u517c\u5bb9WSGI\u534f\u8bae\u7684web\u670d\u52a1\u5668\u5165\u53e3\u6587\u4ef6 2\uff09\u5b50\u5e94\u7528\u7ed3\u6784 migtations \u7528\u4e8e\u5b58\u653e\u6570\u636e\u5e93\u8fc1\u79fb\u5386\u53f2\u8bb0\u5f55\u7684\u76ee\u5f55 admin.py \u8ddf\u7f51\u7ad9\u7684\u540e\u53f0\u7ba1\u7406\u7ad9\u70b9\u914d\u7f6e\u76f8\u5173\u7684\u6587\u4ef6 apps.py \u7528\u4e8e\u914d\u7f6e\u5f53\u524d\u5b50\u5e94\u7528\u76f8\u5173\u4fe1\u606f\u7684\u6587\u4ef6 models.py \u4fdd\u5b58\u6570\u636e\u5e93\u6a21\u578b\u7c7b tests.py \u7528\u4e8e\u7f16\u5199\u5355\u5143\u6d4b\u8bd5 views.py \u7528\u4e8e\u7f16\u5199web\u5e94\u7528\u89c6\u56fe 3\uff09manage.py \u7528\u4e8e\u591a\u79cd\u65b9\u5f0f\u4e0edjango\u9879\u76ee\u4ea4\u4e92\u7684\u547d\u4ee4\u884c\u5de5\u5177 6\u3001 path\u51fd\u6570 from django.urls import path \u7528\u4e8e\u5b9a\u4e49\u8def\u7531\u6761\u5f55 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aurl\u8def\u5f84\uff0c\u9ed8\u8ba4\u6700\u540e\u7684/\u9700\u8981\u6dfb\u52a0 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u9700\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u51fd\u6570\u540d\u5373\u53ef 7\u3001\u5f15\u5165\u5b50\u5e94\u7528\u4e2d\u7684\u8def\u7531urls.py from django.urls import path,include path('project/', include(\"projects.urls\")) 8\u3001\u53d1\u9001POST\u8bf7\u6c42\u9700\u6ce8\u610f MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', # \u9ed8\u8ba4\u53d1\u8d77GET\u3001OPTIONS\u4ee5\u5916\u7684\u8bf7\u6c42\uff0c\u9700\u8981\u643a\u5e26CSRF TOKEN\u624d\u884c # \u53ef\u4ee5\u5c06CsrfViewMiddleware\u4e2d\u95f4\u4ef6\u6ce8\u91ca\u6389 # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] 9\u3001\u89c6\u56fe\u51fd\u6570 \u597d\u7406\u89e3 \u4ee3\u7801\u53ef\u8bfb\u6027\u4e0e\u590d\u7528\u6027\u90fd\u4e0d\u4f73 def index(request): if request.method == 'GET': return HttpResponse(\"GET\u8bf7\u6c42\") return HttpResponse(\"hello world\") a. request: \u4e3aHttpRequest\u5bf9\u8c61\uff0c\u5b58\u653e\u4e86\u7528\u6237\u6240\u6709\u7684\u8bf7\u6c42\u4fe1\u606f b. \u53ef\u4ee5\u4f7f\u7528HTTPRequest\u5bf9\u8c61\u4e2dmethod\u5c5e\u6027\u83b7\u53d6\u8bf7\u6c42\u65b9\u6cd5 c. \u901a\u8fc7\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u6267\u884c\u4e0d\u540c\u7684\u903b\u8f91 10\u3001\u7c7b\u89c6\u56fe 1\uff09\u4f18\u70b9 \u53ef\u8bfb\u6027\u548c\u590d\u7528\u6027\u66f4\u597d \u4e0d\u540c\u7684\u8bf7\u6c42\u65b9\u5f0f\u4ee5\u4e0d\u540c\u7684\u65b9\u6cd5\u5448\u73b0 2\uff09\u5b9a\u4e49\u7c7b\u89c6\u56fe\uff1a a. \u5fc5\u987b\u7ee7\u627fView\u7236\u7c7b\u6216\u8005\u5b50\u7c7b b. \u4e0d\u540c\u7684\u8bf7\u6c42\u65b9\u5f0f\uff0c\u662f\u4ee5\u4e0d\u540c\u8bf7\u6c42\u65b9\u6cd5\u4e00\u4e00\u5bf9\u5e94\u7684 c. GET ->get POST->post PUT->put DELETE->delete ## \u521b\u5efa\u7c7b\u89c6\u56fe from django.views import View class ProjectViews(View): def get(self, request): \"\"\" self\uff1aProjectViews\u5bf9\u8c61 request\uff1aHttpRequest\u5bf9\u8c61 \"\"\" return HttpResponse(\"GET \u8bf7\u6c42\") def post(self, request): return HttpResponse(\"POST \u8bf7\u6c42\") def put(self, request): return HttpResponse(\"PUT \u8bf7\u6c42\") def delete(self, request): return HttpResponse(\"DELETE \u8bf7\u6c42\") ## \u6dfb\u52a0\u8def\u7531 # \u7c7b\u89c6\u56fe.as_view() path('project/', ProjectViews.as_view()) 11\u3001templates\u6a21\u677f\u914d\u7f6e\uff08\u521b\u5efatemplates\u6a21\u677f\u6587\u4ef6\u5939\uff09 import os TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', # \u6307\u5b9a\u6a21\u677f\u5b58\u653e\u7684\u7edd\u5bf9\u8def\u5f84 'DIRS': [os.path.json(BASE_DIR,'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] 12\u3001\u8bf7\u6c42\u53c2\u6570 query string \u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\uff1a?name=dd&age=18 \u53ef\u4ee5\u4f7f\u7528request.GET\u83b7\u53d6 request.GET\u662fQueryDict\u7c7b\u578b\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e3apython\u4e2d\u7684dict\u7c7b\u578b \u53ef\u4ee5\u4f7f\u7528request.GET[\"\u53c2\u6570\u540d\"]\u6216\u8005\u4f7f\u7528request.GET.get(\"\u53c2\u6570\u540d\") \u53ef\u4ee5\u83b7\u53d6\u591a\u4e2a\u76f8\u540ckey\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570 \u4f7f\u7528request.GET[\"\u53c2\u6570\u540d\"]\u6216\u8005\u4f7f\u7528request.GET.get(\"\u53c2\u6570\u540d\")\uff0c\u83b7\u53d6\u7684\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570 request.GET.getlist(\"\u53c2\u6570\u540d\")\uff0c\u83b7\u53d6\u6240\u6709\u7684\u53c2\u6570\uff0c\u4e14\u4e3a\u5217\u8868\u7c7b\u578b \u5728POST\u8bf7\u6c42\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f20\u9012\u8bf7\u6c42\u4f53\u53c2\u6570\uff08x-www-form-urlencoded\uff09 \u53ef\u4ee5\u4f7f\u7528request.POST\u83b7\u53d6 \u5728POST\u8bf7\u6c42\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f20\u9012\u8bf7\u6c42\u4f53\u53c2\u6570\uff08application/json\uff09 \u53ef\u4ee5\u4f7f\u7528request.body\u6765\u83b7\u53d6\u6240\u6709\u8bf7\u6c42\u4f53\u53c2\u6570\uff08request.body.decode('utf-8')\uff09 \u9700\u8981\u4f7f\u7528json\u6a21\u5757\u8f6c\u6362\u6210\u5b57\u5178\u4e4b\u540e\u518d\u63d0\u53d6\u503c \u5728\u8bf7\u6c42\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f20\u9012\u8bf7\u6c42\u4f53\u53c2\u6570\uff08multipart/form-data\uff09 \u4f20\u9012\u7684\u6587\u672c\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528request.POST\u53bb\u83b7\u53d6 \u4f20\u9012\u5230\u975e\u6587\u672c\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528request.body\u53bb\u83b7\u53d6 \u8bf7\u6c42\u5934\u53c2\u6570 \u53ef\u4ee5\u4f7f\u7528request.META\u83b7\u53d6\u8bf7\u6c42\u5934\u53c2\u6570\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b \u8bf7\u6c42\u5934\u4e2d\u7684key\u503c\u4f1a\u88ab\u8f6c\u5316\u4e3aHTTP_\u53c2\u6570\u540d\u5927\u5199 13\u3001\u54cd\u5e94 \u89c6\u56fe\u4e2d\u5fc5\u987b\u8fd4\u56deHTTPResponse\u5bf9\u8c61\u6216\u5b50\u5bf9\u8c61 HTTPResponse(content = \u54cd\u5e94\u4f53, content_type = \u54cd\u5e94\u6570\u636e\u7c7b\u578b, status = \u72b6\u6001\u7801) JsonResponse(data = jsondata, safe=True\uff0cstatus = \u72b6\u6001\u7801) \u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5b57\u5178\u65e0\u9700safe\u5173\u952e\u5b57\u53c2\u6570\u53c2\u6570 \u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868\uff0c\u90a3\u4e48\u5fc5\u987b\u6267\u884csafe=False\u5173\u952e\u5b57\u53c2\u6570 14\u3001MVT\u6a21\u5f0f - M mdoel\uff0c\u4e0eMVC\u4e2dM\u7684\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u548c\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u8fdb\u884c\u6570\u636e\u5904\u7406 - V View\uff0c\u4e0eMVC\u4e2dC\u529f\u80fd\u76f8\u540c\uff0c\u63a5\u6536\u8bf7\u6c42\uff0c\u8fdb\u884c\u4e1a\u52a1\u5904\u7406\uff0c\u8fd4\u56de\u54cd\u5e94 - T Template\uff0c\u4e0eMVC\u4e2dV\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u6784\u9020\u8981\u8fd4\u56de\u7684HTML\u9875\u9762 - \u5728\u524d\u540e\u7aef\u5206\u79bb\u7684\u9879\u76ee\u4e2d\u6ca1\u6709T\uff0c\u53ea\u6709MV","title":"Django - \u521d\u63a2"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#django-","text":"","title":"Django - \u521d\u63a2"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#1django","text":"django-admin startproject djangodemo . \".\"\u4ee3\u8868\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u9879\u76ee\uff0c\u4f1a\u628a\u5f53\u524d\u76ee\u5f55\u4f5c\u4e3a\u9879\u76ee\u7684\u6839\u76ee\u5f55 \u4e0d\u52a0\".\"\uff0c\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee","title":"1\u3001\u521b\u5efadjango\u9879\u76ee"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#2app","text":"python manage.py startapp hello","title":"2\u3001\u521b\u5efa\u5b50\u5e94\u7528app"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#3settingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hello' # \u65b0\u521b\u5efa\u7684App\u9700\u8981\u8fdb\u884c\u6ce8\u518c ] # \u4fee\u6539\u8bed\u8a00 LANGUAGE_CODE = 'zh-hans' # \u4fee\u6539\u65f6\u533a TIME_ZONE = \"Asia/Shanghai\"","title":"3\u3001\u4fee\u6539\u914d\u7f6e\u9879\uff08settings.py\uff09"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#4","text":"python manage.py runserver","title":"4\u3001\u8fd0\u884c"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#5django","text":"","title":"5\u3001django\u5de5\u7a0b\u76ee\u5f55\u7ed3\u6784"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#1-django","text":"sagi.py \u7528\u4e8e\u542f\u52a8ASGI\u534f\u8bae\u7684\u542f\u52a8\u95ee\u9898 settings.py \u7528\u4e8e\u5b58\u653eDjango\u7684\u5168\u5c40\u914d\u7f6e\u4fe1\u606f urls.py \u7528\u4e8e\u521b\u5efa\u5168\u5c40\u8def\u7531\u4fe1\u606f wsgi.py \u517c\u5bb9WSGI\u534f\u8bae\u7684web\u670d\u52a1\u5668\u5165\u53e3\u6587\u4ef6","title":"1\uff09 \u4e0e\u9879\u76ee\u540d\u79f0\u540c\u540d\u7684\u76ee\u5f55\uff08\u4fdd\u5b58django\u7684\u9879\u76ee\u914d\u7f6e\u4fe1\u606f\uff09"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#2","text":"migtations \u7528\u4e8e\u5b58\u653e\u6570\u636e\u5e93\u8fc1\u79fb\u5386\u53f2\u8bb0\u5f55\u7684\u76ee\u5f55 admin.py \u8ddf\u7f51\u7ad9\u7684\u540e\u53f0\u7ba1\u7406\u7ad9\u70b9\u914d\u7f6e\u76f8\u5173\u7684\u6587\u4ef6 apps.py \u7528\u4e8e\u914d\u7f6e\u5f53\u524d\u5b50\u5e94\u7528\u76f8\u5173\u4fe1\u606f\u7684\u6587\u4ef6 models.py \u4fdd\u5b58\u6570\u636e\u5e93\u6a21\u578b\u7c7b tests.py \u7528\u4e8e\u7f16\u5199\u5355\u5143\u6d4b\u8bd5 views.py \u7528\u4e8e\u7f16\u5199web\u5e94\u7528\u89c6\u56fe","title":"2\uff09\u5b50\u5e94\u7528\u7ed3\u6784"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#3managepy-django","text":"","title":"3\uff09manage.py \u7528\u4e8e\u591a\u79cd\u65b9\u5f0f\u4e0edjango\u9879\u76ee\u4ea4\u4e92\u7684\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#6-path","text":"from django.urls import path \u7528\u4e8e\u5b9a\u4e49\u8def\u7531\u6761\u5f55 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aurl\u8def\u5f84\uff0c\u9ed8\u8ba4\u6700\u540e\u7684/\u9700\u8981\u6dfb\u52a0 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u9700\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u51fd\u6570\u540d\u5373\u53ef","title":"6\u3001 path\u51fd\u6570"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#7urlspy","text":"from django.urls import path,include path('project/', include(\"projects.urls\"))","title":"7\u3001\u5f15\u5165\u5b50\u5e94\u7528\u4e2d\u7684\u8def\u7531urls.py"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#8post","text":"MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', # \u9ed8\u8ba4\u53d1\u8d77GET\u3001OPTIONS\u4ee5\u5916\u7684\u8bf7\u6c42\uff0c\u9700\u8981\u643a\u5e26CSRF TOKEN\u624d\u884c # \u53ef\u4ee5\u5c06CsrfViewMiddleware\u4e2d\u95f4\u4ef6\u6ce8\u91ca\u6389 # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ]","title":"8\u3001\u53d1\u9001POST\u8bf7\u6c42\u9700\u6ce8\u610f"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#9","text":"\u597d\u7406\u89e3 \u4ee3\u7801\u53ef\u8bfb\u6027\u4e0e\u590d\u7528\u6027\u90fd\u4e0d\u4f73 def index(request): if request.method == 'GET': return HttpResponse(\"GET\u8bf7\u6c42\") return HttpResponse(\"hello world\") a. request: \u4e3aHttpRequest\u5bf9\u8c61\uff0c\u5b58\u653e\u4e86\u7528\u6237\u6240\u6709\u7684\u8bf7\u6c42\u4fe1\u606f b. \u53ef\u4ee5\u4f7f\u7528HTTPRequest\u5bf9\u8c61\u4e2dmethod\u5c5e\u6027\u83b7\u53d6\u8bf7\u6c42\u65b9\u6cd5 c. \u901a\u8fc7\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u6267\u884c\u4e0d\u540c\u7684\u903b\u8f91","title":"9\u3001\u89c6\u56fe\u51fd\u6570"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#10","text":"","title":"10\u3001\u7c7b\u89c6\u56fe"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#1","text":"\u53ef\u8bfb\u6027\u548c\u590d\u7528\u6027\u66f4\u597d \u4e0d\u540c\u7684\u8bf7\u6c42\u65b9\u5f0f\u4ee5\u4e0d\u540c\u7684\u65b9\u6cd5\u5448\u73b0","title":"1\uff09\u4f18\u70b9"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#2_1","text":"a. \u5fc5\u987b\u7ee7\u627fView\u7236\u7c7b\u6216\u8005\u5b50\u7c7b b. \u4e0d\u540c\u7684\u8bf7\u6c42\u65b9\u5f0f\uff0c\u662f\u4ee5\u4e0d\u540c\u8bf7\u6c42\u65b9\u6cd5\u4e00\u4e00\u5bf9\u5e94\u7684 c. GET ->get POST->post PUT->put DELETE->delete ## \u521b\u5efa\u7c7b\u89c6\u56fe from django.views import View class ProjectViews(View): def get(self, request): \"\"\" self\uff1aProjectViews\u5bf9\u8c61 request\uff1aHttpRequest\u5bf9\u8c61 \"\"\" return HttpResponse(\"GET \u8bf7\u6c42\") def post(self, request): return HttpResponse(\"POST \u8bf7\u6c42\") def put(self, request): return HttpResponse(\"PUT \u8bf7\u6c42\") def delete(self, request): return HttpResponse(\"DELETE \u8bf7\u6c42\") ## \u6dfb\u52a0\u8def\u7531 # \u7c7b\u89c6\u56fe.as_view() path('project/', ProjectViews.as_view())","title":"2\uff09\u5b9a\u4e49\u7c7b\u89c6\u56fe\uff1a"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#11templatestemplates","text":"import os TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', # \u6307\u5b9a\u6a21\u677f\u5b58\u653e\u7684\u7edd\u5bf9\u8def\u5f84 'DIRS': [os.path.json(BASE_DIR,'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ]","title":"11\u3001templates\u6a21\u677f\u914d\u7f6e\uff08\u521b\u5efatemplates\u6a21\u677f\u6587\u4ef6\u5939\uff09"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#12","text":"","title":"12\u3001\u8bf7\u6c42\u53c2\u6570"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#query-string-nameddage18","text":"\u53ef\u4ee5\u4f7f\u7528request.GET\u83b7\u53d6 request.GET\u662fQueryDict\u7c7b\u578b\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e3apython\u4e2d\u7684dict\u7c7b\u578b \u53ef\u4ee5\u4f7f\u7528request.GET[\"\u53c2\u6570\u540d\"]\u6216\u8005\u4f7f\u7528request.GET.get(\"\u53c2\u6570\u540d\") \u53ef\u4ee5\u83b7\u53d6\u591a\u4e2a\u76f8\u540ckey\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570 \u4f7f\u7528request.GET[\"\u53c2\u6570\u540d\"]\u6216\u8005\u4f7f\u7528request.GET.get(\"\u53c2\u6570\u540d\")\uff0c\u83b7\u53d6\u7684\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570 request.GET.getlist(\"\u53c2\u6570\u540d\")\uff0c\u83b7\u53d6\u6240\u6709\u7684\u53c2\u6570\uff0c\u4e14\u4e3a\u5217\u8868\u7c7b\u578b","title":"query string \u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\uff1a?name=dd&amp;age=18"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#postx-www-form-urlencoded","text":"\u53ef\u4ee5\u4f7f\u7528request.POST\u83b7\u53d6","title":"\u5728POST\u8bf7\u6c42\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f20\u9012\u8bf7\u6c42\u4f53\u53c2\u6570\uff08x-www-form-urlencoded\uff09"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#postapplicationjson","text":"\u53ef\u4ee5\u4f7f\u7528request.body\u6765\u83b7\u53d6\u6240\u6709\u8bf7\u6c42\u4f53\u53c2\u6570\uff08request.body.decode('utf-8')\uff09 \u9700\u8981\u4f7f\u7528json\u6a21\u5757\u8f6c\u6362\u6210\u5b57\u5178\u4e4b\u540e\u518d\u63d0\u53d6\u503c","title":"\u5728POST\u8bf7\u6c42\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f20\u9012\u8bf7\u6c42\u4f53\u53c2\u6570\uff08application/json\uff09"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#multipartform-data","text":"\u4f20\u9012\u7684\u6587\u672c\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528request.POST\u53bb\u83b7\u53d6 \u4f20\u9012\u5230\u975e\u6587\u672c\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528request.body\u53bb\u83b7\u53d6","title":"\u5728\u8bf7\u6c42\u4f53\u4e2d\uff0c\u53ef\u4ee5\u4f20\u9012\u8bf7\u6c42\u4f53\u53c2\u6570\uff08multipart/form-data\uff09"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#_1","text":"\u53ef\u4ee5\u4f7f\u7528request.META\u83b7\u53d6\u8bf7\u6c42\u5934\u53c2\u6570\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b \u8bf7\u6c42\u5934\u4e2d\u7684key\u503c\u4f1a\u88ab\u8f6c\u5316\u4e3aHTTP_\u53c2\u6570\u540d\u5927\u5199","title":"\u8bf7\u6c42\u5934\u53c2\u6570"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#13","text":"\u89c6\u56fe\u4e2d\u5fc5\u987b\u8fd4\u56deHTTPResponse\u5bf9\u8c61\u6216\u5b50\u5bf9\u8c61 HTTPResponse(content = \u54cd\u5e94\u4f53, content_type = \u54cd\u5e94\u6570\u636e\u7c7b\u578b, status = \u72b6\u6001\u7801) JsonResponse(data = jsondata, safe=True\uff0cstatus = \u72b6\u6001\u7801) \u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5b57\u5178\u65e0\u9700safe\u5173\u952e\u5b57\u53c2\u6570\u53c2\u6570 \u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868\uff0c\u90a3\u4e48\u5fc5\u987b\u6267\u884csafe=False\u5173\u952e\u5b57\u53c2\u6570","title":"13\u3001\u54cd\u5e94"},{"location":"Django/001%20Django%E5%88%9D%E6%8E%A2/#14mvt","text":"- M mdoel\uff0c\u4e0eMVC\u4e2dM\u7684\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u548c\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u8fdb\u884c\u6570\u636e\u5904\u7406 - V View\uff0c\u4e0eMVC\u4e2dC\u529f\u80fd\u76f8\u540c\uff0c\u63a5\u6536\u8bf7\u6c42\uff0c\u8fdb\u884c\u4e1a\u52a1\u5904\u7406\uff0c\u8fd4\u56de\u54cd\u5e94 - T Template\uff0c\u4e0eMVC\u4e2dV\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u6784\u9020\u8981\u8fd4\u56de\u7684HTML\u9875\u9762 - \u5728\u524d\u540e\u7aef\u5206\u79bb\u7684\u9879\u76ee\u4e2d\u6ca1\u6709T\uff0c\u53ea\u6709MV","title":"14\u3001MVT\u6a21\u5f0f"},{"location":"Django/002%20Django-ORM/","text":"Django-ORM \u4e00\u3001\u4f7f\u7528pymysql\u6267\u884c\u539f\u751fSQL\u8bed\u53e5\u6765\u64cd\u4f5c\u6570\u636e\uff0c\u75db\u70b9 SQL\u8bed\u53e5\u6bd4\u8f83\u590d\u6742 SQL\u8bed\u53e5\u5b89\u5168\u6027\u65e0\u6cd5\u4fdd\u8bc1 \u6570\u636e\u5e93\u521b\u5efa\u3001\u6570\u636e\u8868\u751f\u6210\u3001\u6570\u636e\u6dfb\u52a0\u4ee5\u53ca\u6570\u636e\u8fc1\u79fb\u7b49\u975e\u5e38\u9ebb\u70e6 SQL\u8bed\u53e5\u6027\u80fd\u4e0d\u591f\u597d\uff0c\u540c\u65f6SQL\u8bed\u53e5\u4e0d\u597d\u7ba1\u7406 \u4e8c\u3001ORM\u6846\u67b6 - \u628a\u7c7b\u548c\u6570\u636e\u5e93\u8868\u8fdb\u884c\u6620\u5c04 - \u901a\u8fc7\u7c7b\u548c\u5bf9\u8c61\u5c31\u80fd\u64cd\u4f5c\u5b83\u6240\u5bf9\u5e94\u8868\u683c\u4e2d\u7684\u6570\u636e\uff08CRUD\uff09 # \u4f7f\u7528MySQL\u6570\u636e\u5e93\u9700\u8981\u5b89\u88c5\u4f9d\u8d56 pip install pymysql pip install mysqlclient 1. \u914d\u7f6e DATABASES = { 'default': { # \u6570\u636e\u5e93\u5f15\u64ce 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', }, 'mysql': { # \u6267\u884c\u4f7f\u7528\u7684\u6570\u636e\u5e93\u5f15\u64ce\uff08\u4f7f\u7528\u54ea\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff09 'ENGINE': 'django.db.backends.mysql', # \u6307\u5b9a\u6570\u636e\u5e93\u540d\u79f0 'NAME': 'django_db', 'USER': 'root', 'PASSWORD': '123456', 'HOST': 'localhost', 'PORT': '3306' } } 2. \u521b\u5efa\u6a21\u578b\u7c7b\uff08models.py\uff09 \u5b9a\u4e49\u6a21\u578b\u7c7b\u5fc5\u987b\u7ee7\u627fModel\u6216\u8005Model\u5b50\u7c7b\uff0c\u4e00\u4e2a\u6a21\u578b\u7c7b\u76f8\u5f53\u4e8e\u4e00\u4e2atable \u5b9a\u4e49\u7684\u7c7b\u5c5e\u6027\uff08Field\u5bf9\u8c61\uff09\u4e3a\u8868\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f \u9ed8\u8ba4\u8868\u540d\u4e3a\u5b50\u5e94\u7528\u540d_\u6a21\u578b\u7c7b\u540d\u5c0f\u5199 \u9ed8\u8ba4\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2aid\u4e3b\u952e\uff08\u81ea\u589e\u975e\u7a7a\uff09 from django.db import models class People(models.Model): name = models.CharField(max_length=20) age = models.IntegerField() 3. \u751f\u6210\u8fc1\u79fb\u811a\u672c\uff08\u4f1a\u81ea\u52a8\u653e\u7f6e\u5230\u5b50\u5e94\u7528\u7684migrations\u76ee\u5f55\u4e2d\uff09 python manage.py makemigrations projects python manage.py makemigrations \u5b50\u5e94\u7528\u540d # \u4e0d\u6307\u5b9a\u7684\u8bdd\u5c31\u662f\u6240\u6709\u7684\u6ce8\u518c\u7684\u6a21\u578b python manage.py makemigrations 4. \u67e5\u770b\u521b\u5efa\u8868sql\u8bed\u53e5\uff08\u53ea\u662f\u67e5\u770bsql\uff0c\u4e0d\u4f1a\u771f\u6b63\u7684\u521b\u5efa\u8868\uff09 python manage.py sqlmigrate projects 0001_initial python manage.py sqlmigrate \u5b50\u5e94\u7528\u540d \u8fc1\u79fb\u811a\u672c 5. \u6267\u884c\u8fc1\u79fb\u811a\u672c\uff0c\u751f\u6210\u8868 python manage.py migrate projects python manage.py migrate \u5b50\u5e94\u7528\u540d # \u4e0d\u6307\u5b9a\u5c31\u662f\u6240\u6709\u7684 python manage.py migrate \u4e09\u3001\u6a21\u578b\u5b57\u6bb5 1. \u5b57\u6bb5\u7c7b\u578b CharField\u6307\u5b9avarchar\u7c7b\u578b \u5fc5\u987b\u5f97\u8bbe\u7f6emax_length\u53c2\u6570\uff0c\u6307\u5b9a\u6700\u5927\u957f\u5ea6 BooleanField\u6307\u5b9a\u5e03\u5c14\u7c7b\u578b TextField\u6307\u5b9a\u957f\u6587\u672c\u7c7b\u578b DateTimeField\u6307\u5b9a\u65e5\u671f\u7c7b\u578b a.auto_now_add=True\u521b\u5efa\u4e00\u6761\u6570\u636e\u65f6\uff0c\u4f1a\u81ea\u52a8\u5c06\u5f53\u524d\u65f6\u95f4\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u6bb5(\u53ea\u4f1a\u5728\u521b\u5efa\u7684\u65f6\u5019\u4fee\u6539\u4e00\u6b21) b.auto_now=True\u6bcf\u6b21\u5728\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u4f1a\u81ea\u52a8\u5c06\u5f53\u524d\u65f6\u95f4\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u6bb5\uff08\u53ea\u8981\u4fee\u6539\u5c31\u4f1a\u81ea\u52a8\u66f4\u65b0\uff09\u5c5e\u6027 verbose_name\u4e0ehelp_text\u6307\u5b9a\u4e2d\u6587\u7684\u63cf\u8ff0\uff0c\u5728admin\u540e\u53f0\u7ad9\u70b9\u4ee5\u53ca\u5728\u63a5\u53e3\u6587\u6863\u5e73\u53f0\u4e2d\u4f1a\u4f7f\u7528\u5230 unique =True \u8bbe\u7f6e\u552f\u4e00\u7ea6\u675f\uff0c\u9ed8\u8ba4unique=False default \u8bbe\u7f6e\u5f53\u524d\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c null \u6307\u5b9a\u5f53\u524d\u5b57\u6bb5\u662f\u5426\u5141\u8bb8\u4fdd\u5b58null\u7a7a\u503c blank \u6307\u5b9a\u524d\u7aef\u5728\u521b\u5efa\u6570\u636e\u65f6\u662f\u5426\u5141\u8bb8\u4e0d\u8f93\u5165 primary_key \u6307\u5b9a\u5f53\u524d\u5b57\u6bb5\u662f\u5426\u4e3a\u4e3b\u952e\uff08\u4e00\u4e2a\u6570\u636e\u5e93\u6a21\u578b\u7c7b\u4e2d\u53ea\u5141\u8bb8\u5b9a\u4e49\u4e00\u4e2a\u8bbe\u7f6e\u4e86\u53c2\u6570primary_key = True\u7684\u5b57\u6bb5\uff09 \u4e00\u65e6\u67d0\u4e2a\u5b57\u6bb5\u8bbe\u7f6e\u4e86primary_key = True\uff0c\u90a3\u4e48orm\u6846\u67b6\u5c31\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efaid\u4e3b\u952e 2. \u4fee\u6539\u5f53\u524d\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f\uff08\u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u4fee\u6539\u5f53\u524d\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f\uff09 class Meta: # \u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u4fee\u6539\u5f53\u524d\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f # db_table\u6267\u884c\u521b\u5efa\u7684\u6570\u636e\u8868\u540d\u79f0 db_table = 'tb_projects' # \u6307\u5b9a\u521b\u5efa\u7684\u6570\u636e\u8868\u7684\u4e2d\u6587\u63cf\u8ff0\u4fe1\u606f verbose_name = '\u9879\u76ee\u8868' verbose_name_plural = '\u9879\u76ee\u8868' 3. \u6574\u4f53demo class Projects(models.Model): id = models.AutoField( primary_key=True, verbose_name=\"id\u4e3b\u952e\", help_text=\"id\u4e3b\u952e\") name = models.CharField(verbose_name=\"\u9879\u76ee\u540d\u79f0\", help_text=\"\u9879\u76ee\u540d\u79f0\", max_length=20, unique=True) leader = models.CharField(verbose_name=\"\u9879\u76ee\u8d1f\u8d23\u4eba\", help_text=\"\u9879\u76ee\u8d1f\u8d23\u4eba\", max_length=10) is_execute = models.BooleanField( verbose_name=\"\u662f\u5426\u5f00\u5c55\", help_text=\"\u662f\u5426\u5f00\u5c55\", default=True) desc = models.TextField(verbose_name=\"\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\", help_text=\"\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\", null=True, blank=True, default=\"\") create_time = models.DateTimeField( auto_now_add=True, verbose_name=\"\u521b\u5efa\u65f6\u95f4\", help_text=\"\u521b\u5efa\u65f6\u95f4\") update_time = models.DateTimeField( auto_now=True, verbose_name=\"\u66f4\u65b0\u65f6\u95f4\", help_text=\"\u66f4\u65b0\u65f6\u95f4\") class Meta: db_table = 'tb_projects' verbose_name = '\u9879\u76ee\u8868' verbose_name_plural = '\u9879\u76ee\u8868' \u56db\u3001\u65b0\u589e\u5b57\u6bb5\uff08\u5728\u5df2\u6709\u6570\u636e\u8868\u4e2d\u65b0\u589e\u5b57\u6bb5\uff09 1. \u65b0\u589e\u5b57\u6bb5 tester = models.CharField(max_length=10) 2.\u6267\u884c python manage.py makemigrations - \u6709\u4e24\u4e2a\u9009\u9879\uff1a - \u73b0\u5728\u63d0\u4f9b\u4e00\u4e2a\u4e00\u6b21\u6027\u9ed8\u8ba4\u503c\uff08\u5c06\u5728\u6240\u6709\u73b0\u6709\u884c\u4e0a\u5bf9\u6b64\u5217\u8bbe\u7f6e\u7a7a\u503c\uff09 - \u9000\u51fa\uff0c\u5728\u65b0\u6dfb\u52a0\u7684\u5b57\u6bb5\u4e0a\u589e\u52a0\u9ed8\u8ba4\u503c \u4e94\u3001\u5173\u8054\u5173\u7cfb 1\uff09\u4e00\u5bf9\u591a\u5173\u7cfb\uff08ForeignKey\uff09 \u53ef\u4ee5\u4f7f\u7528ForeignKey\u5728\u4ece\u8868\uff08\u4e00\u5bf9\u591a\u7684\u2018\u591a\u2019\u7684\u4e00\u65b9\uff09\u4e2d\u6307\u5b9a\u5916\u952e\u5b57\u6bb5 a.\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u9700\u8981\u6307\u5b9a\u5173\u8054\u7684\u7236\u8868\uff0c\u5f80\u5f80\u4f7f\u7528 '\u5b50\u5e94\u7528\u540d.\u7236\u8868\u6a21\u578b\u7c7b\u540d' b.\u5fc5\u987b\u6267\u884con_delete\u7ea7\u8054\u5220\u9664\u7b56\u7565 c.\u7ea7\u8054\u5220\u9664\u7b56\u7565\u6709\u5982\u4e0b\u79cd\u7c7b 1.CASCADE\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u540e\uff0c\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\u4f1a\u88ab\u81ea\u52a8\u5220\u9664 2.SET_NULL\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u540e\uff0c\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\u7684\u5916\u952e\u5b57\u6bb5\u4f1a\u88ab\u81ea\u52a8\u8bbe\u7f6e\u4e3anull 3.PROTECT\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u65f6\uff0c\u5982\u679c\u5b58\u5728\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u629b\u51fa\u5f02\u5e38 4.SET_DEFAULT\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u540e\uff0c\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\u7684\u5916\u952e\u5b57\u6bb5\u4f1a\u88ab\u81ea\u52a8\u8bbe\u7f6e\u4e3adefault\u53c2\u6570\u6307\u5b9a\u7684\u503c \u6574\u4f53demo class Interfaces(models.Model): id = models.AutoField( primary_key=True, verbose_name=\"id\u4e3b\u952e\", help_text=\"id\u4e3b\u952e\") name = models.CharField(verbose_name=\"\u63a5\u53e3\u540d\u79f0\", help_text=\"\u63a5\u53e3\u540d\u79f0\", max_length=20, unique=True) tester = models.CharField(verbose_name=\"\u6d4b\u8bd5\u4eba\u5458\", help_text=\"\u6d4b\u8bd5\u4eba\u5458\", max_length=10) # \u521b\u5efa\u6570\u636e\u8868\u65f6\uff0c\u4f1a\u81ea\u52a8\u521b\u5efaprojets_id\u4f5c\u4e3a\u5b57\u6bb5\u540d\uff0c\u7528\u4e8e\u5b58\u653e\u7236\u8868\u5916\u952e\u503c projects = models.ForeignKey( 'projects.Projects', on_delete=models.CASCADE) create_time = models.DateTimeField( auto_now_add=True, verbose_name=\"\u521b\u5efa\u65f6\u95f4\", help_text=\"\u521b\u5efa\u65f6\u95f4\") update_time = models.DateTimeField( auto_now=True, verbose_name=\"\u66f4\u65b0\u65f6\u95f4\", help_text=\"\u66f4\u65b0\u65f6\u95f4\") class Meta: db_table = 'tb_interfaces' verbose_name = '\u63a5\u53e3\u8868' verbose_name_plural = '\u63a5\u53e3\u8868' 2\uff09\u591a\u5bf9\u591a\u5173\u7cfb\uff08ManyToManyField\uff09 3\uff09\u4e00\u5bf9\u4e00\u5173\u7cfb\uff08OneToOneField\uff09 \u516d\u3001\u62bd\u8c61\u57fa\u7c7b \u56e0\u4e3a\u67d0\u4e9b\u6a21\u578b\u7c7b\uff0c\u4ec5\u4ec5\u662f\u5c06\u591a\u4e2a\u6a21\u578b\u7c7b\u4e2d\u516c\u5171\u7684\u5b57\u6bb5\u62bd\u53d6\u51fa\u6765\uff0c\u800c\u4e0d\u9700\u8981\u751f\u6210\u6570\u636e\u8868 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Meta\u5185\u90e8\u7c7b\u901a\u8fc7abstract\u6307\u5b9a\u5f53\u524d\u6a21\u578b\u7c7b\u4e3a\u62bd\u8c61\u6a21\u578b\u7c7b \u522b\u7684\u6a21\u578b\u7c7b\u7ee7\u627fBaseModel\u5373\u53ef class BaseModel(models.Model): id = models.AutoField( primary_key=True, verbose_name=\"id\u4e3b\u952e\", help_text=\"id\u4e3b\u952e\") create_time = models.DateTimeField( auto_now_add=True, verbose_name=\"\u521b\u5efa\u65f6\u95f4\", help_text=\"\u521b\u5efa\u65f6\u95f4\") update_time = models.DateTimeField( auto_now=True, verbose_name=\"\u66f4\u65b0\u65f6\u95f4\", help_text=\"\u66f4\u65b0\u65f6\u95f4\") class Meta: abstract = True \u4e03\u3001\u589e\u5220\u6539\u67e5\uff08CRUD\uff09 1\uff09\u589e\u52a0\u6570\u636e\uff08C\uff09 1. \u65b9\u5f0f\u4e00\uff1a \u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u7c7b\u6765\u521b\u5efa\u6a21\u578b\u5bf9\u8c61 \u5fc5\u987b\u8c03\u7528save()\u65b9\u6cd5\u624d\u4f1a\u6267\u884cSQL\u8bed\u53e5\uff08\u63d0\u4ea4\uff09 one_project = Projects(name=\"XXX\u91d1\u878d\u9879\u76ee11\", leader=\"admin\", desc=\"\u8fd9\u662f\u4e00\u4e2a\u63cf\u8ff0\") one_project.save() 2.\u65b9\u5f0f\u4e8c\uff1a a.\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7c7b.object\u4e3amanager\u5bf9\u8c61 b.\u53ef\u4ee5\u4f7f\u7528manager\u5bf9\u8c61.create\u65b9\u6cd5(\u5173\u952e\u5b57\u53c2\u6570) c.\u65e0\u9700\u8c03\u7528save\u65b9\u6cd5\uff0c\u4f1a\u81ea\u52a8\u63d0\u4ea4 one_project = Projects.objects.create(name=\"\u6296\u97f3App10\", leader=\"Tommy\", desc=\"\u8fd9\u662f\u4e00\u4e2a\u63cf\u8ff0\") 3.\u6dfb\u52a0\u5b50\u8868\u6570\u636e \u6dfb\u52a0\u5916\u952e\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u4f7f\u7528projects\u7684\u65f6\u5019projects=one_project \u5982\u679c\u4f7f\u7528projects_id\u7684\u65f6\u5019projects_id=one_project.id # Interfaces(name=\"\u767b\u5f55\u63a5\u53e3\", tester=\"Any\", projects_id=one_project.id) # Interfaces(name=\"\u767b\u5f55\u63a5\u53e3\", tester=\"Any\", projects=one_project) one_interfaces = Interfaces.objects.create(name=\"\u6ce8\u518c\u63a5\u53e3\", tester=\"Any\", projects_id=one_project.id) 2\uff09\u66f4\u65b0\u6570\u636e\uff08U\uff09 1. \u65b9\u5f0f\u4e00\uff1a a.\u6240\u6709\u7684\u6a21\u578b\u7c7b\uff0c\u4f1a\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684manager\u5c5e\u6027,\u662f\u4e00\u4e2amanager\u5bf9\u8c61 b.\u83b7\u53d6\u9700\u8981\u4fee\u6539\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u4e4b\u540e\uff0c\u91cd\u5199\u76f8\u5e94\u7684\u5b57\u6bb5 c.\u5fc5\u987b\u8981\u8c03\u7528save()\u65b9\u6cd5\uff0c\u624d\u4f1a\u63d0\u4ea4 pro = Projects.objects.get(id=1) pro.leader = \"desire\" pro.save() 2.\u65b9\u5f0f\u4e8c\uff1a a.\u73b0\u5c06\u5f85\u4fee\u6539\u7684\u6570\u636e\u53d6\u51fa\uff08\u67e5\u8be2\u96c6\u5bf9\u8c61\uff09 b.\u7136\u540e\u8c03\u7528update()\u65b9\u6cd5 c.\u65e0\u9700\u8c03\u7528save()\u65b9\u6cd5\uff0c\u4f1a\u81ea\u52a8\u63d0\u4ea4 qs = Projects.objects.filter(id=1).update(leader=\"\u552f\u4e00\") 3\uff09\u67e5\u8be2\u6570\u636e\uff08R\uff09 1. \u67e5\u8be2\u591a\u6761\u6570\u636e a.\u4f7f\u7528\u6a21\u578b\u7c7b.object.all() b.\u8fd4\u56deQuerySet\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8e\u5217\u8868\uff0c\u4f46\u4e0d\u662f\u5217\u8868 c.QuerySet\u5bf9\u8c61\uff0c\u60f0\u6027\u67e5\u627e\uff0c\u53ea\u6709\u9700\u8981\u7528\u5230\u6570\u636e(len/\u53d6\u503c/for)\u65f6\uff0c\u624d\u4f1a\u6267\u884cSQL\u8bed\u53e5 qs = Projects.objects.all() 2. \u8bfb\u53d6\u4e00\u6761\u6570\u636e \u2460\u65b9\u5f0f\u4e00\uff1a a.\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7c7b.objects.get() b.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u4e0d\u5b58\u5728\u65f6\u5019\u4f1a\u62a5\u9519 Projects matching query does not exist. c.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u5927\u4e8e1\u6761\u7684\u65f6\u5019\u4f1a\u62a5\u9519 get() returned more than one Projects -- it returned 2! d.get\u65b9\u6cd5\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u4e3b\u952e\u6216\u8005\u552f\u4e00\u952e\u4f5c\u4e3a\u67e5\u8be2\u6761\u4ef6 e.\u8fd4\u56de\u6a21\u578b\u7c7b\u5bf9\u8c61(\u6570\u636e) pro = Projects.objects.get(id=1) # pk\u4e3aDjango\u6a21\u578b\u7c7b\u5185\u7f6e\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u662f\u4e3b\u952e\u7684\u522b\u540d pro = Projects.objects.get(pk=1) \u2461\u65b9\u5f0f\u4e8c\uff1a a.\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7c7b.objects.filter() b.\u8fd4\u56deQuerySet\u5bf9\u8c61 c.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u4e3a\u7a7a\uff0c\u90a3\u4e48\u4e5f\u4f1a\u8fd4\u56de\u7a7a\u7684QuerySet\u5bf9\u8c61 d.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u8d85\u8fc7\u4e00\u6761\uff0c\u4e5f\u4f1a\u8fd4\u56de\u591a\u6761\u7ed3\u679c\u6240\u5728\u7684QuerySet\u5bf9\u8c61 e.filter\u67e5\u8be2 \uff1a\u6bb5\u540d__\u67e5\u8be2\u7c7b\u578b=\u5177\u4f53\u503c \u67e5\u8be2\u7c7b\u578b\u79cd\u7c7b gt > gte >= lt < lte<= in \u5bf9\u5904\u4e8e\u5217\u8868\u4e2d\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4 contains \u5305\u542b icontains \u5305\u542b\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 startswith \u4ee5XXX\u5f00\u5934 istartswith \u4ee5XXX\u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 endswith \u4ee5XXX\u7ed3\u5c3e iendswith \u4ee5XXX\u7ed3\u5c3e\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 isnull \u662f\u5426\u4e3a\u7a7a \u5173\u8054\u67e5\u8be2\uff1a\u5173\u8054\u6a21\u578b\u7c7b\u540d\u5c0f\u5199__\u5173\u8054\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d__\u67e5\u8be2\u7c7b\u578b=\u5177\u4f53\u503c pro1 = Projects.objects.filter(id=1) pro2 = Projects.objects.filter(id__gt=4) pro3 = Projects.objects.filter(in=[1,4,8,25]) pro4 = Projects.objects.filter(update_time__gt=\"2021-01-18\") # \u5173\u8054\u67e5\u8be2 pro4 = Projects.objects.filter(interfaces__name__contains='\u767b\u5f55') 4\uff09\u5220\u9664\u6570\u636e\uff08D\uff09 1. \u65b9\u5f0f\u4e00\uff1a \u8c03\u7528\u6a21\u578b\u7c7b\u5bf9\u8c61\u4e2d\u7684delete() \u65b9\u6cd5 pro = Projects.objects.get(pk = 1) pro.delete() 2. \u65b9\u5f0f\u4e8c\uff1a \u4f7f\u7528\u67e5\u8be2\u96c6\u5bf9\u8c61.delete()\uff0c\u53ef\u4ee5\u5c06\u67e5\u8be2\u96c6\u4e2d\u7684\u6240\u6709\u6570\u636e\u5220\u9664 qs = Projects.objects.filter(id=1).delete() QuerySet\u67e5\u8be2\u96c6\u7684\u7279\u6027 \u60f0\u6027\u67e5\u8be2 \u94fe\u5f0f\u8c03\u7528 \u67e5\u8be2\u96c6\u5bf9\u8c61\u53ef\u4ee5\u591a\u6b21\u8c03\u7528filter\u65b9\u6cd5\u8fdb\u884c\u8fc7\u6ee4 \u591a\u4e2afilter\u4e2d\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e3a\"\u4e0e\"\u7684\u5173\u7cfb \u5728\u4e00\u4e2afilter\u65b9\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u5199\u591a\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u4e4b\u95f4\u4ee5\"\u9017\u53f7\"\u5206\u5272\uff0c\u6bcf\u4e2a\u6761\u4ef6\u4e3a\"\u4e0e\"\u7684\u5173\u7cfb \u54ea\u4e9b\u64cd\u4f5c\u4f1a\u8ba9\u67e5\u8be2\u96c6\u6267\u884cSQL\u8bed\u53e5\uff1f\u67e5\u8be2\u96c6\u652f\u6301\u54ea\u4e9b\u64cd\u4f5c \u901a\u8fc7\u6570\u5b57\u7d22\u5f15\u53d6\u503c\uff0c\u4f46\u4e0d\u652f\u6301\u8d1f\u503c\u7d22\u5f15 \u652f\u6301\u5207\u7247\u64cd\u4f5c \u652f\u6301 .first()\uff0c\u53ef\u4ee5\u53d6\u51fa\u67e5\u8be2\u96c6\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e3a\u6a21\u578b\u7c7b\u5bf9\u8c61 \u652f\u6301 .last()\uff0c\u53ef\u4ee5\u53d6\u51fa\u67e5\u8be2\u96c6\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e3a\u6a21\u578b\u7c7b\u5bf9\u8c61 \u652f\u6301 len(\u67e5\u8be2\u96c6\u5bf9\u8c61)\uff0c\u83b7\u53d6\u67e5\u8be2\u96c6\u7684\u957f\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 .count() \u65b9\u6cd5 \u652f\u6301 .exists()\uff0c\u6765\u5224\u65ad\u67e5\u8be2\u96c6\u4e2d\u662f\u5426\u6709\u5143\u7d20\uff0c\u5982\u679c\u6709\u5143\u7d20\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse \u652f\u6301 for \u5faa\u73af\u8fed\u4ee3 pro = Projects.objects.filter(name__contains='\u5546\u57ce').filter(leader='\u552f\u4e00') pro = Projects.objects.filter(name__contains='\u5546\u57ce', leader='\u552f\u4e00') \u903b\u8f91\u5173\u7cfb \u4e0e\u7684\u5173\u7cfb \u6216\u7684\u5173\u7cfb \u53ef\u4ee5\u4f7f\u7528Q\u5bf9\u8c61\u6765\u5b9e\u73b0\u903b\u8f91\u5173\u7cfb\u67e5\u8be2 \u591a\u4e2aQ\u5bf9\u8c61\u4e4b\u95f4\u4f7f\u7528 | \uff0c\u4e3a\u6216\u7684\u5173\u7cfb \u591a\u4e2aQ\u5bf9\u8c61\u4e4b\u95f4\u4f7f\u7528 &\uff0c\u4e3a\u4e0e\u7684\u5173\u7cfb from django.db.models import Q qs = Projects.objects.filter(Q(name__contains='\u5546\u57ce') | Q(leader='\u552f\u4e00')) \u6392\u5e8f\u64cd\u4f5c \u9ed8\u8ba4\u662f\u4ee5id\u4e3b\u952e\u5347\u5e8f(ASC)\u6765\u6392\u5e8f\u7684 \u67e5\u8be2\u96c6\u5bf9\u8c61.order_by('\u5b57\u6bb5\u540d1', '\u5b57\u6bb5\u540d2') \u9ed8\u8ba4\u6307\u5b9a\u7684\u5b57\u6bb5\u540d\u4e3a\u5347\u5e8f(ASC) \u53ef\u4ee5\u5728\u5b57\u6bb5\u540d\u7684\u524d\u9762\u6dfb\u52a0 - \uff0c\u4ee3\u8868\u4ee5\u964d\u5e8f\uff08DESC\uff09\u6765\u6392\u5e8f Projects.objects.all().order_by('-name','leader') \u805a\u5408\u8fd0\u7b97 values\u548cannotate\u4e3a\u56fa\u5b9a\u5199\u6cd5 \u805a\u5408\u8fd0\u7b97\u9700\u8981\u8bbe\u7f6e\u4e3a\u4ece\u8868\u540d\u5c0f\u5199 \u4f7f\u7528\u5916\u952eid\u4f5c\u4e3a\u5173\u8054\u6761\u4ef6\uff0c\u540c\u65f6\u4f1a\u628a\u5916\u952eid\u4f5c\u4e3a\u5206\u7ec4\u6761\u4ef6 \u9ed8\u8ba4\u67e5\u8be2id\u548c\u805a\u5408\u8fd0\u7684\u503c \u805a\u5408\u8fd0\u7b97\u7684\u522b\u540d\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u4ece\u8868\u540d\u5c0f\u5199__\u805a\u5408\u51fd\u6570\u540d\u5c0f\u5199 \u53ef\u4ee5\u7ed9\u805a\u5408\u8fd0\u7b97\u8bbe\u7f6e\u5173\u952e\u5b57\u53c2\u6570\uff0c\u4f1a\u4f5c\u4e3a\u805a\u5408\u8fd0\u7b97\u7684\u522b\u540d form django.db.models import Count, Min, Max, Avg Projects.objects.values('id').annotate(Count('interfaces')) # \u81ea\u5b9a\u4e49\u805a\u5408\u8fd0\u7b97\u7684\u522b\u540d Projects.objects.values('id').annotate(interfaces = Count('interfaces')) \u6267\u884c\u539f\u751fSQL\u8bed\u53e5 \u67e5\u8be2\u96c6.raw(\"\u539f\u751fSQL\u8bed\u53e5\") \u516b\u3001\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 \u5e8f\u5217\u5316\u64cd\u4f5c \u5c06\u6a21\u578b\u7c7b\u5bf9\u8c61(Python\u4e2d\u7684\u7c7b)\u8f6c\u5316\u4e3aPython\u4e2d\u7684\u57fa\u672c\u7c7b\u578b \u7c7b\uff1a\u6a21\u578b\u7c7b\u3001\u5e38\u7528\u7c7b \u57fa\u672c\u7c7b\u578b\uff1a\u5b57\u5178\u3001\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868 \u53cd\u5e8f\u5217\u5316\u64cd\u4f5c \u5c06json\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3aPython\u4e2d\u7684\u57fa\u672c\u7c7b\u578b -> python\u4e2d\u7c7b","title":"Django-ORM"},{"location":"Django/002%20Django-ORM/#django-orm","text":"","title":"Django-ORM"},{"location":"Django/002%20Django-ORM/#pymysqlsql","text":"SQL\u8bed\u53e5\u6bd4\u8f83\u590d\u6742 SQL\u8bed\u53e5\u5b89\u5168\u6027\u65e0\u6cd5\u4fdd\u8bc1 \u6570\u636e\u5e93\u521b\u5efa\u3001\u6570\u636e\u8868\u751f\u6210\u3001\u6570\u636e\u6dfb\u52a0\u4ee5\u53ca\u6570\u636e\u8fc1\u79fb\u7b49\u975e\u5e38\u9ebb\u70e6 SQL\u8bed\u53e5\u6027\u80fd\u4e0d\u591f\u597d\uff0c\u540c\u65f6SQL\u8bed\u53e5\u4e0d\u597d\u7ba1\u7406","title":"\u4e00\u3001\u4f7f\u7528pymysql\u6267\u884c\u539f\u751fSQL\u8bed\u53e5\u6765\u64cd\u4f5c\u6570\u636e\uff0c\u75db\u70b9"},{"location":"Django/002%20Django-ORM/#orm","text":"- \u628a\u7c7b\u548c\u6570\u636e\u5e93\u8868\u8fdb\u884c\u6620\u5c04 - \u901a\u8fc7\u7c7b\u548c\u5bf9\u8c61\u5c31\u80fd\u64cd\u4f5c\u5b83\u6240\u5bf9\u5e94\u8868\u683c\u4e2d\u7684\u6570\u636e\uff08CRUD\uff09 # \u4f7f\u7528MySQL\u6570\u636e\u5e93\u9700\u8981\u5b89\u88c5\u4f9d\u8d56 pip install pymysql pip install mysqlclient","title":"\u4e8c\u3001ORM\u6846\u67b6"},{"location":"Django/002%20Django-ORM/#1","text":"DATABASES = { 'default': { # \u6570\u636e\u5e93\u5f15\u64ce 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', }, 'mysql': { # \u6267\u884c\u4f7f\u7528\u7684\u6570\u636e\u5e93\u5f15\u64ce\uff08\u4f7f\u7528\u54ea\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff09 'ENGINE': 'django.db.backends.mysql', # \u6307\u5b9a\u6570\u636e\u5e93\u540d\u79f0 'NAME': 'django_db', 'USER': 'root', 'PASSWORD': '123456', 'HOST': 'localhost', 'PORT': '3306' } }","title":"1. \u914d\u7f6e"},{"location":"Django/002%20Django-ORM/#2-modelspy","text":"\u5b9a\u4e49\u6a21\u578b\u7c7b\u5fc5\u987b\u7ee7\u627fModel\u6216\u8005Model\u5b50\u7c7b\uff0c\u4e00\u4e2a\u6a21\u578b\u7c7b\u76f8\u5f53\u4e8e\u4e00\u4e2atable \u5b9a\u4e49\u7684\u7c7b\u5c5e\u6027\uff08Field\u5bf9\u8c61\uff09\u4e3a\u8868\u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f \u9ed8\u8ba4\u8868\u540d\u4e3a\u5b50\u5e94\u7528\u540d_\u6a21\u578b\u7c7b\u540d\u5c0f\u5199 \u9ed8\u8ba4\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2aid\u4e3b\u952e\uff08\u81ea\u589e\u975e\u7a7a\uff09 from django.db import models class People(models.Model): name = models.CharField(max_length=20) age = models.IntegerField()","title":"2. \u521b\u5efa\u6a21\u578b\u7c7b\uff08models.py\uff09"},{"location":"Django/002%20Django-ORM/#3-migrations","text":"python manage.py makemigrations projects python manage.py makemigrations \u5b50\u5e94\u7528\u540d # \u4e0d\u6307\u5b9a\u7684\u8bdd\u5c31\u662f\u6240\u6709\u7684\u6ce8\u518c\u7684\u6a21\u578b python manage.py makemigrations","title":"3. \u751f\u6210\u8fc1\u79fb\u811a\u672c\uff08\u4f1a\u81ea\u52a8\u653e\u7f6e\u5230\u5b50\u5e94\u7528\u7684migrations\u76ee\u5f55\u4e2d\uff09"},{"location":"Django/002%20Django-ORM/#4-sqlsql","text":"python manage.py sqlmigrate projects 0001_initial python manage.py sqlmigrate \u5b50\u5e94\u7528\u540d \u8fc1\u79fb\u811a\u672c","title":"4. \u67e5\u770b\u521b\u5efa\u8868sql\u8bed\u53e5\uff08\u53ea\u662f\u67e5\u770bsql\uff0c\u4e0d\u4f1a\u771f\u6b63\u7684\u521b\u5efa\u8868\uff09"},{"location":"Django/002%20Django-ORM/#5","text":"python manage.py migrate projects python manage.py migrate \u5b50\u5e94\u7528\u540d # \u4e0d\u6307\u5b9a\u5c31\u662f\u6240\u6709\u7684 python manage.py migrate","title":"5. \u6267\u884c\u8fc1\u79fb\u811a\u672c\uff0c\u751f\u6210\u8868"},{"location":"Django/002%20Django-ORM/#_1","text":"","title":"\u4e09\u3001\u6a21\u578b\u5b57\u6bb5"},{"location":"Django/002%20Django-ORM/#1_1","text":"CharField\u6307\u5b9avarchar\u7c7b\u578b \u5fc5\u987b\u5f97\u8bbe\u7f6emax_length\u53c2\u6570\uff0c\u6307\u5b9a\u6700\u5927\u957f\u5ea6 BooleanField\u6307\u5b9a\u5e03\u5c14\u7c7b\u578b TextField\u6307\u5b9a\u957f\u6587\u672c\u7c7b\u578b DateTimeField\u6307\u5b9a\u65e5\u671f\u7c7b\u578b a.auto_now_add=True\u521b\u5efa\u4e00\u6761\u6570\u636e\u65f6\uff0c\u4f1a\u81ea\u52a8\u5c06\u5f53\u524d\u65f6\u95f4\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u6bb5(\u53ea\u4f1a\u5728\u521b\u5efa\u7684\u65f6\u5019\u4fee\u6539\u4e00\u6b21) b.auto_now=True\u6bcf\u6b21\u5728\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u4f1a\u81ea\u52a8\u5c06\u5f53\u524d\u65f6\u95f4\u8d4b\u503c\u7ed9\u5f53\u524d\u5b57\u6bb5\uff08\u53ea\u8981\u4fee\u6539\u5c31\u4f1a\u81ea\u52a8\u66f4\u65b0\uff09\u5c5e\u6027 verbose_name\u4e0ehelp_text\u6307\u5b9a\u4e2d\u6587\u7684\u63cf\u8ff0\uff0c\u5728admin\u540e\u53f0\u7ad9\u70b9\u4ee5\u53ca\u5728\u63a5\u53e3\u6587\u6863\u5e73\u53f0\u4e2d\u4f1a\u4f7f\u7528\u5230 unique =True \u8bbe\u7f6e\u552f\u4e00\u7ea6\u675f\uff0c\u9ed8\u8ba4unique=False default \u8bbe\u7f6e\u5f53\u524d\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c null \u6307\u5b9a\u5f53\u524d\u5b57\u6bb5\u662f\u5426\u5141\u8bb8\u4fdd\u5b58null\u7a7a\u503c blank \u6307\u5b9a\u524d\u7aef\u5728\u521b\u5efa\u6570\u636e\u65f6\u662f\u5426\u5141\u8bb8\u4e0d\u8f93\u5165 primary_key \u6307\u5b9a\u5f53\u524d\u5b57\u6bb5\u662f\u5426\u4e3a\u4e3b\u952e\uff08\u4e00\u4e2a\u6570\u636e\u5e93\u6a21\u578b\u7c7b\u4e2d\u53ea\u5141\u8bb8\u5b9a\u4e49\u4e00\u4e2a\u8bbe\u7f6e\u4e86\u53c2\u6570primary_key = True\u7684\u5b57\u6bb5\uff09 \u4e00\u65e6\u67d0\u4e2a\u5b57\u6bb5\u8bbe\u7f6e\u4e86primary_key = True\uff0c\u90a3\u4e48orm\u6846\u67b6\u5c31\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efaid\u4e3b\u952e","title":"1. \u5b57\u6bb5\u7c7b\u578b"},{"location":"Django/002%20Django-ORM/#2-meta","text":"class Meta: # \u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u4fee\u6539\u5f53\u524d\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f # db_table\u6267\u884c\u521b\u5efa\u7684\u6570\u636e\u8868\u540d\u79f0 db_table = 'tb_projects' # \u6307\u5b9a\u521b\u5efa\u7684\u6570\u636e\u8868\u7684\u4e2d\u6587\u63cf\u8ff0\u4fe1\u606f verbose_name = '\u9879\u76ee\u8868' verbose_name_plural = '\u9879\u76ee\u8868'","title":"2. \u4fee\u6539\u5f53\u524d\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f\uff08\u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u4fee\u6539\u5f53\u524d\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f\uff09"},{"location":"Django/002%20Django-ORM/#3-demo","text":"class Projects(models.Model): id = models.AutoField( primary_key=True, verbose_name=\"id\u4e3b\u952e\", help_text=\"id\u4e3b\u952e\") name = models.CharField(verbose_name=\"\u9879\u76ee\u540d\u79f0\", help_text=\"\u9879\u76ee\u540d\u79f0\", max_length=20, unique=True) leader = models.CharField(verbose_name=\"\u9879\u76ee\u8d1f\u8d23\u4eba\", help_text=\"\u9879\u76ee\u8d1f\u8d23\u4eba\", max_length=10) is_execute = models.BooleanField( verbose_name=\"\u662f\u5426\u5f00\u5c55\", help_text=\"\u662f\u5426\u5f00\u5c55\", default=True) desc = models.TextField(verbose_name=\"\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\", help_text=\"\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\", null=True, blank=True, default=\"\") create_time = models.DateTimeField( auto_now_add=True, verbose_name=\"\u521b\u5efa\u65f6\u95f4\", help_text=\"\u521b\u5efa\u65f6\u95f4\") update_time = models.DateTimeField( auto_now=True, verbose_name=\"\u66f4\u65b0\u65f6\u95f4\", help_text=\"\u66f4\u65b0\u65f6\u95f4\") class Meta: db_table = 'tb_projects' verbose_name = '\u9879\u76ee\u8868' verbose_name_plural = '\u9879\u76ee\u8868'","title":"3. \u6574\u4f53demo"},{"location":"Django/002%20Django-ORM/#_2","text":"","title":"\u56db\u3001\u65b0\u589e\u5b57\u6bb5\uff08\u5728\u5df2\u6709\u6570\u636e\u8868\u4e2d\u65b0\u589e\u5b57\u6bb5\uff09"},{"location":"Django/002%20Django-ORM/#1_2","text":"tester = models.CharField(max_length=10)","title":"1. \u65b0\u589e\u5b57\u6bb5"},{"location":"Django/002%20Django-ORM/#2","text":"python manage.py makemigrations - \u6709\u4e24\u4e2a\u9009\u9879\uff1a - \u73b0\u5728\u63d0\u4f9b\u4e00\u4e2a\u4e00\u6b21\u6027\u9ed8\u8ba4\u503c\uff08\u5c06\u5728\u6240\u6709\u73b0\u6709\u884c\u4e0a\u5bf9\u6b64\u5217\u8bbe\u7f6e\u7a7a\u503c\uff09 - \u9000\u51fa\uff0c\u5728\u65b0\u6dfb\u52a0\u7684\u5b57\u6bb5\u4e0a\u589e\u52a0\u9ed8\u8ba4\u503c","title":"2.\u6267\u884c"},{"location":"Django/002%20Django-ORM/#_3","text":"","title":"\u4e94\u3001\u5173\u8054\u5173\u7cfb"},{"location":"Django/002%20Django-ORM/#1foreignkey","text":"","title":"1\uff09\u4e00\u5bf9\u591a\u5173\u7cfb\uff08ForeignKey\uff09"},{"location":"Django/002%20Django-ORM/#foreignkey","text":"a.\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u9700\u8981\u6307\u5b9a\u5173\u8054\u7684\u7236\u8868\uff0c\u5f80\u5f80\u4f7f\u7528 '\u5b50\u5e94\u7528\u540d.\u7236\u8868\u6a21\u578b\u7c7b\u540d' b.\u5fc5\u987b\u6267\u884con_delete\u7ea7\u8054\u5220\u9664\u7b56\u7565 c.\u7ea7\u8054\u5220\u9664\u7b56\u7565\u6709\u5982\u4e0b\u79cd\u7c7b 1.CASCADE\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u540e\uff0c\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\u4f1a\u88ab\u81ea\u52a8\u5220\u9664 2.SET_NULL\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u540e\uff0c\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\u7684\u5916\u952e\u5b57\u6bb5\u4f1a\u88ab\u81ea\u52a8\u8bbe\u7f6e\u4e3anull 3.PROTECT\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u65f6\uff0c\u5982\u679c\u5b58\u5728\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u629b\u51fa\u5f02\u5e38 4.SET_DEFAULT\uff1a\u5f53\u7236\u8868\u6570\u636e\u5220\u9664\u540e\uff0c\u5bf9\u5e94\u7684\u4ece\u8868\u6570\u636e\u7684\u5916\u952e\u5b57\u6bb5\u4f1a\u88ab\u81ea\u52a8\u8bbe\u7f6e\u4e3adefault\u53c2\u6570\u6307\u5b9a\u7684\u503c","title":"\u53ef\u4ee5\u4f7f\u7528ForeignKey\u5728\u4ece\u8868\uff08\u4e00\u5bf9\u591a\u7684\u2018\u591a\u2019\u7684\u4e00\u65b9\uff09\u4e2d\u6307\u5b9a\u5916\u952e\u5b57\u6bb5"},{"location":"Django/002%20Django-ORM/#demo","text":"class Interfaces(models.Model): id = models.AutoField( primary_key=True, verbose_name=\"id\u4e3b\u952e\", help_text=\"id\u4e3b\u952e\") name = models.CharField(verbose_name=\"\u63a5\u53e3\u540d\u79f0\", help_text=\"\u63a5\u53e3\u540d\u79f0\", max_length=20, unique=True) tester = models.CharField(verbose_name=\"\u6d4b\u8bd5\u4eba\u5458\", help_text=\"\u6d4b\u8bd5\u4eba\u5458\", max_length=10) # \u521b\u5efa\u6570\u636e\u8868\u65f6\uff0c\u4f1a\u81ea\u52a8\u521b\u5efaprojets_id\u4f5c\u4e3a\u5b57\u6bb5\u540d\uff0c\u7528\u4e8e\u5b58\u653e\u7236\u8868\u5916\u952e\u503c projects = models.ForeignKey( 'projects.Projects', on_delete=models.CASCADE) create_time = models.DateTimeField( auto_now_add=True, verbose_name=\"\u521b\u5efa\u65f6\u95f4\", help_text=\"\u521b\u5efa\u65f6\u95f4\") update_time = models.DateTimeField( auto_now=True, verbose_name=\"\u66f4\u65b0\u65f6\u95f4\", help_text=\"\u66f4\u65b0\u65f6\u95f4\") class Meta: db_table = 'tb_interfaces' verbose_name = '\u63a5\u53e3\u8868' verbose_name_plural = '\u63a5\u53e3\u8868'","title":"\u6574\u4f53demo"},{"location":"Django/002%20Django-ORM/#2manytomanyfield","text":"","title":"2\uff09\u591a\u5bf9\u591a\u5173\u7cfb\uff08ManyToManyField\uff09"},{"location":"Django/002%20Django-ORM/#3onetoonefield","text":"","title":"3\uff09\u4e00\u5bf9\u4e00\u5173\u7cfb\uff08OneToOneField\uff09"},{"location":"Django/002%20Django-ORM/#_4","text":"\u56e0\u4e3a\u67d0\u4e9b\u6a21\u578b\u7c7b\uff0c\u4ec5\u4ec5\u662f\u5c06\u591a\u4e2a\u6a21\u578b\u7c7b\u4e2d\u516c\u5171\u7684\u5b57\u6bb5\u62bd\u53d6\u51fa\u6765\uff0c\u800c\u4e0d\u9700\u8981\u751f\u6210\u6570\u636e\u8868 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Meta\u5185\u90e8\u7c7b\u901a\u8fc7abstract\u6307\u5b9a\u5f53\u524d\u6a21\u578b\u7c7b\u4e3a\u62bd\u8c61\u6a21\u578b\u7c7b \u522b\u7684\u6a21\u578b\u7c7b\u7ee7\u627fBaseModel\u5373\u53ef class BaseModel(models.Model): id = models.AutoField( primary_key=True, verbose_name=\"id\u4e3b\u952e\", help_text=\"id\u4e3b\u952e\") create_time = models.DateTimeField( auto_now_add=True, verbose_name=\"\u521b\u5efa\u65f6\u95f4\", help_text=\"\u521b\u5efa\u65f6\u95f4\") update_time = models.DateTimeField( auto_now=True, verbose_name=\"\u66f4\u65b0\u65f6\u95f4\", help_text=\"\u66f4\u65b0\u65f6\u95f4\") class Meta: abstract = True","title":"\u516d\u3001\u62bd\u8c61\u57fa\u7c7b"},{"location":"Django/002%20Django-ORM/#crud","text":"","title":"\u4e03\u3001\u589e\u5220\u6539\u67e5\uff08CRUD\uff09"},{"location":"Django/002%20Django-ORM/#1c","text":"","title":"1\uff09\u589e\u52a0\u6570\u636e\uff08C\uff09"},{"location":"Django/002%20Django-ORM/#1_3","text":"\u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u7c7b\u6765\u521b\u5efa\u6a21\u578b\u5bf9\u8c61 \u5fc5\u987b\u8c03\u7528save()\u65b9\u6cd5\u624d\u4f1a\u6267\u884cSQL\u8bed\u53e5\uff08\u63d0\u4ea4\uff09 one_project = Projects(name=\"XXX\u91d1\u878d\u9879\u76ee11\", leader=\"admin\", desc=\"\u8fd9\u662f\u4e00\u4e2a\u63cf\u8ff0\") one_project.save()","title":"1. \u65b9\u5f0f\u4e00\uff1a"},{"location":"Django/002%20Django-ORM/#2_1","text":"a.\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7c7b.object\u4e3amanager\u5bf9\u8c61 b.\u53ef\u4ee5\u4f7f\u7528manager\u5bf9\u8c61.create\u65b9\u6cd5(\u5173\u952e\u5b57\u53c2\u6570) c.\u65e0\u9700\u8c03\u7528save\u65b9\u6cd5\uff0c\u4f1a\u81ea\u52a8\u63d0\u4ea4 one_project = Projects.objects.create(name=\"\u6296\u97f3App10\", leader=\"Tommy\", desc=\"\u8fd9\u662f\u4e00\u4e2a\u63cf\u8ff0\")","title":"2.\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Django/002%20Django-ORM/#3","text":"\u6dfb\u52a0\u5916\u952e\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u4f7f\u7528projects\u7684\u65f6\u5019projects=one_project \u5982\u679c\u4f7f\u7528projects_id\u7684\u65f6\u5019projects_id=one_project.id # Interfaces(name=\"\u767b\u5f55\u63a5\u53e3\", tester=\"Any\", projects_id=one_project.id) # Interfaces(name=\"\u767b\u5f55\u63a5\u53e3\", tester=\"Any\", projects=one_project) one_interfaces = Interfaces.objects.create(name=\"\u6ce8\u518c\u63a5\u53e3\", tester=\"Any\", projects_id=one_project.id)","title":"3.\u6dfb\u52a0\u5b50\u8868\u6570\u636e"},{"location":"Django/002%20Django-ORM/#2u","text":"","title":"2\uff09\u66f4\u65b0\u6570\u636e\uff08U\uff09"},{"location":"Django/002%20Django-ORM/#1_4","text":"a.\u6240\u6709\u7684\u6a21\u578b\u7c7b\uff0c\u4f1a\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684manager\u5c5e\u6027,\u662f\u4e00\u4e2amanager\u5bf9\u8c61 b.\u83b7\u53d6\u9700\u8981\u4fee\u6539\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u4e4b\u540e\uff0c\u91cd\u5199\u76f8\u5e94\u7684\u5b57\u6bb5 c.\u5fc5\u987b\u8981\u8c03\u7528save()\u65b9\u6cd5\uff0c\u624d\u4f1a\u63d0\u4ea4 pro = Projects.objects.get(id=1) pro.leader = \"desire\" pro.save()","title":"1. \u65b9\u5f0f\u4e00\uff1a"},{"location":"Django/002%20Django-ORM/#2_2","text":"a.\u73b0\u5c06\u5f85\u4fee\u6539\u7684\u6570\u636e\u53d6\u51fa\uff08\u67e5\u8be2\u96c6\u5bf9\u8c61\uff09 b.\u7136\u540e\u8c03\u7528update()\u65b9\u6cd5 c.\u65e0\u9700\u8c03\u7528save()\u65b9\u6cd5\uff0c\u4f1a\u81ea\u52a8\u63d0\u4ea4 qs = Projects.objects.filter(id=1).update(leader=\"\u552f\u4e00\")","title":"2.\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Django/002%20Django-ORM/#3r","text":"","title":"3\uff09\u67e5\u8be2\u6570\u636e\uff08R\uff09"},{"location":"Django/002%20Django-ORM/#1_5","text":"a.\u4f7f\u7528\u6a21\u578b\u7c7b.object.all() b.\u8fd4\u56deQuerySet\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8e\u5217\u8868\uff0c\u4f46\u4e0d\u662f\u5217\u8868 c.QuerySet\u5bf9\u8c61\uff0c\u60f0\u6027\u67e5\u627e\uff0c\u53ea\u6709\u9700\u8981\u7528\u5230\u6570\u636e(len/\u53d6\u503c/for)\u65f6\uff0c\u624d\u4f1a\u6267\u884cSQL\u8bed\u53e5 qs = Projects.objects.all()","title":"1. \u67e5\u8be2\u591a\u6761\u6570\u636e"},{"location":"Django/002%20Django-ORM/#2_3","text":"","title":"2. \u8bfb\u53d6\u4e00\u6761\u6570\u636e"},{"location":"Django/002%20Django-ORM/#1_6","text":"a.\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7c7b.objects.get() b.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u4e0d\u5b58\u5728\u65f6\u5019\u4f1a\u62a5\u9519 Projects matching query does not exist. c.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u5927\u4e8e1\u6761\u7684\u65f6\u5019\u4f1a\u62a5\u9519 get() returned more than one Projects -- it returned 2! d.get\u65b9\u6cd5\uff0c\u5f80\u5f80\u4f1a\u4f7f\u7528\u4e3b\u952e\u6216\u8005\u552f\u4e00\u952e\u4f5c\u4e3a\u67e5\u8be2\u6761\u4ef6 e.\u8fd4\u56de\u6a21\u578b\u7c7b\u5bf9\u8c61(\u6570\u636e) pro = Projects.objects.get(id=1) # pk\u4e3aDjango\u6a21\u578b\u7c7b\u5185\u7f6e\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u662f\u4e3b\u952e\u7684\u522b\u540d pro = Projects.objects.get(pk=1)","title":"\u2460\u65b9\u5f0f\u4e00\uff1a"},{"location":"Django/002%20Django-ORM/#2_4","text":"a.\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u7c7b.objects.filter() b.\u8fd4\u56deQuerySet\u5bf9\u8c61 c.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u4e3a\u7a7a\uff0c\u90a3\u4e48\u4e5f\u4f1a\u8fd4\u56de\u7a7a\u7684QuerySet\u5bf9\u8c61 d.\u5982\u679c\u67e5\u8be2\u7684\u7ed3\u679c\u8d85\u8fc7\u4e00\u6761\uff0c\u4e5f\u4f1a\u8fd4\u56de\u591a\u6761\u7ed3\u679c\u6240\u5728\u7684QuerySet\u5bf9\u8c61 e.filter\u67e5\u8be2 \uff1a\u6bb5\u540d__\u67e5\u8be2\u7c7b\u578b=\u5177\u4f53\u503c \u67e5\u8be2\u7c7b\u578b\u79cd\u7c7b gt > gte >= lt < lte<= in \u5bf9\u5904\u4e8e\u5217\u8868\u4e2d\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4 contains \u5305\u542b icontains \u5305\u542b\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 startswith \u4ee5XXX\u5f00\u5934 istartswith \u4ee5XXX\u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 endswith \u4ee5XXX\u7ed3\u5c3e iendswith \u4ee5XXX\u7ed3\u5c3e\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 isnull \u662f\u5426\u4e3a\u7a7a \u5173\u8054\u67e5\u8be2\uff1a\u5173\u8054\u6a21\u578b\u7c7b\u540d\u5c0f\u5199__\u5173\u8054\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d__\u67e5\u8be2\u7c7b\u578b=\u5177\u4f53\u503c pro1 = Projects.objects.filter(id=1) pro2 = Projects.objects.filter(id__gt=4) pro3 = Projects.objects.filter(in=[1,4,8,25]) pro4 = Projects.objects.filter(update_time__gt=\"2021-01-18\") # \u5173\u8054\u67e5\u8be2 pro4 = Projects.objects.filter(interfaces__name__contains='\u767b\u5f55')","title":"\u2461\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Django/002%20Django-ORM/#4d","text":"","title":"4\uff09\u5220\u9664\u6570\u636e\uff08D\uff09"},{"location":"Django/002%20Django-ORM/#1_7","text":"\u8c03\u7528\u6a21\u578b\u7c7b\u5bf9\u8c61\u4e2d\u7684delete() \u65b9\u6cd5 pro = Projects.objects.get(pk = 1) pro.delete()","title":"1. \u65b9\u5f0f\u4e00\uff1a"},{"location":"Django/002%20Django-ORM/#2_5","text":"\u4f7f\u7528\u67e5\u8be2\u96c6\u5bf9\u8c61.delete()\uff0c\u53ef\u4ee5\u5c06\u67e5\u8be2\u96c6\u4e2d\u7684\u6240\u6709\u6570\u636e\u5220\u9664 qs = Projects.objects.filter(id=1).delete()","title":"2. \u65b9\u5f0f\u4e8c\uff1a"},{"location":"Django/002%20Django-ORM/#queryset","text":"\u60f0\u6027\u67e5\u8be2 \u94fe\u5f0f\u8c03\u7528 \u67e5\u8be2\u96c6\u5bf9\u8c61\u53ef\u4ee5\u591a\u6b21\u8c03\u7528filter\u65b9\u6cd5\u8fdb\u884c\u8fc7\u6ee4 \u591a\u4e2afilter\u4e2d\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e3a\"\u4e0e\"\u7684\u5173\u7cfb \u5728\u4e00\u4e2afilter\u65b9\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u5199\u591a\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u4e4b\u95f4\u4ee5\"\u9017\u53f7\"\u5206\u5272\uff0c\u6bcf\u4e2a\u6761\u4ef6\u4e3a\"\u4e0e\"\u7684\u5173\u7cfb \u54ea\u4e9b\u64cd\u4f5c\u4f1a\u8ba9\u67e5\u8be2\u96c6\u6267\u884cSQL\u8bed\u53e5\uff1f\u67e5\u8be2\u96c6\u652f\u6301\u54ea\u4e9b\u64cd\u4f5c \u901a\u8fc7\u6570\u5b57\u7d22\u5f15\u53d6\u503c\uff0c\u4f46\u4e0d\u652f\u6301\u8d1f\u503c\u7d22\u5f15 \u652f\u6301\u5207\u7247\u64cd\u4f5c \u652f\u6301 .first()\uff0c\u53ef\u4ee5\u53d6\u51fa\u67e5\u8be2\u96c6\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e3a\u6a21\u578b\u7c7b\u5bf9\u8c61 \u652f\u6301 .last()\uff0c\u53ef\u4ee5\u53d6\u51fa\u67e5\u8be2\u96c6\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e3a\u6a21\u578b\u7c7b\u5bf9\u8c61 \u652f\u6301 len(\u67e5\u8be2\u96c6\u5bf9\u8c61)\uff0c\u83b7\u53d6\u67e5\u8be2\u96c6\u7684\u957f\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 .count() \u65b9\u6cd5 \u652f\u6301 .exists()\uff0c\u6765\u5224\u65ad\u67e5\u8be2\u96c6\u4e2d\u662f\u5426\u6709\u5143\u7d20\uff0c\u5982\u679c\u6709\u5143\u7d20\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse \u652f\u6301 for \u5faa\u73af\u8fed\u4ee3 pro = Projects.objects.filter(name__contains='\u5546\u57ce').filter(leader='\u552f\u4e00') pro = Projects.objects.filter(name__contains='\u5546\u57ce', leader='\u552f\u4e00')","title":"QuerySet\u67e5\u8be2\u96c6\u7684\u7279\u6027"},{"location":"Django/002%20Django-ORM/#_5","text":"\u4e0e\u7684\u5173\u7cfb \u6216\u7684\u5173\u7cfb \u53ef\u4ee5\u4f7f\u7528Q\u5bf9\u8c61\u6765\u5b9e\u73b0\u903b\u8f91\u5173\u7cfb\u67e5\u8be2 \u591a\u4e2aQ\u5bf9\u8c61\u4e4b\u95f4\u4f7f\u7528 | \uff0c\u4e3a\u6216\u7684\u5173\u7cfb \u591a\u4e2aQ\u5bf9\u8c61\u4e4b\u95f4\u4f7f\u7528 &\uff0c\u4e3a\u4e0e\u7684\u5173\u7cfb from django.db.models import Q qs = Projects.objects.filter(Q(name__contains='\u5546\u57ce') | Q(leader='\u552f\u4e00'))","title":"\u903b\u8f91\u5173\u7cfb"},{"location":"Django/002%20Django-ORM/#_6","text":"\u9ed8\u8ba4\u662f\u4ee5id\u4e3b\u952e\u5347\u5e8f(ASC)\u6765\u6392\u5e8f\u7684 \u67e5\u8be2\u96c6\u5bf9\u8c61.order_by('\u5b57\u6bb5\u540d1', '\u5b57\u6bb5\u540d2') \u9ed8\u8ba4\u6307\u5b9a\u7684\u5b57\u6bb5\u540d\u4e3a\u5347\u5e8f(ASC) \u53ef\u4ee5\u5728\u5b57\u6bb5\u540d\u7684\u524d\u9762\u6dfb\u52a0 - \uff0c\u4ee3\u8868\u4ee5\u964d\u5e8f\uff08DESC\uff09\u6765\u6392\u5e8f Projects.objects.all().order_by('-name','leader')","title":"\u6392\u5e8f\u64cd\u4f5c"},{"location":"Django/002%20Django-ORM/#_7","text":"values\u548cannotate\u4e3a\u56fa\u5b9a\u5199\u6cd5 \u805a\u5408\u8fd0\u7b97\u9700\u8981\u8bbe\u7f6e\u4e3a\u4ece\u8868\u540d\u5c0f\u5199 \u4f7f\u7528\u5916\u952eid\u4f5c\u4e3a\u5173\u8054\u6761\u4ef6\uff0c\u540c\u65f6\u4f1a\u628a\u5916\u952eid\u4f5c\u4e3a\u5206\u7ec4\u6761\u4ef6 \u9ed8\u8ba4\u67e5\u8be2id\u548c\u805a\u5408\u8fd0\u7684\u503c \u805a\u5408\u8fd0\u7b97\u7684\u522b\u540d\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u4ece\u8868\u540d\u5c0f\u5199__\u805a\u5408\u51fd\u6570\u540d\u5c0f\u5199 \u53ef\u4ee5\u7ed9\u805a\u5408\u8fd0\u7b97\u8bbe\u7f6e\u5173\u952e\u5b57\u53c2\u6570\uff0c\u4f1a\u4f5c\u4e3a\u805a\u5408\u8fd0\u7b97\u7684\u522b\u540d form django.db.models import Count, Min, Max, Avg Projects.objects.values('id').annotate(Count('interfaces')) # \u81ea\u5b9a\u4e49\u805a\u5408\u8fd0\u7b97\u7684\u522b\u540d Projects.objects.values('id').annotate(interfaces = Count('interfaces'))","title":"\u805a\u5408\u8fd0\u7b97"},{"location":"Django/002%20Django-ORM/#sql","text":"\u67e5\u8be2\u96c6.raw(\"\u539f\u751fSQL\u8bed\u53e5\")","title":"\u6267\u884c\u539f\u751fSQL\u8bed\u53e5"},{"location":"Django/002%20Django-ORM/#_8","text":"\u5e8f\u5217\u5316\u64cd\u4f5c \u5c06\u6a21\u578b\u7c7b\u5bf9\u8c61(Python\u4e2d\u7684\u7c7b)\u8f6c\u5316\u4e3aPython\u4e2d\u7684\u57fa\u672c\u7c7b\u578b \u7c7b\uff1a\u6a21\u578b\u7c7b\u3001\u5e38\u7528\u7c7b \u57fa\u672c\u7c7b\u578b\uff1a\u5b57\u5178\u3001\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868 \u53cd\u5e8f\u5217\u5316\u64cd\u4f5c \u5c06json\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3aPython\u4e2d\u7684\u57fa\u672c\u7c7b\u578b -> python\u4e2d\u7c7b","title":"\u516b\u3001\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316"},{"location":"Django/003%20Django-DRF/","text":"Django REST framework \u4e00\u3001\u7b80\u4ecb \u5728Django\u6846\u67b6\u57fa\u7840\u4e4b\u4e0a\uff0c\u8fdb\u884c\u4e8c\u6b21\u5f00\u53d1 \u7528\u4e8e\u6784\u5efaRestful API \u7b80\u79f0DRF\u6846\u67b6\u6216REST framework\u6846\u67b6 \u4e8c\u3001\u7279\u6027 \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684Serializer\u5e8f\u5217\u5316\u5668\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u8fdb\u884c\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c \u63d0\u4f9b\u4e86\u6781\u4e3a\u4e30\u5bcc\u7684\u7c7b\u89c6\u56fe\u3001Mixin\u6269\u5c55\u7c7b\u3001ViewSet\u89c6\u56fe\u96c6 \u63d0\u4f9b\u4e86\u76f4\u89c2\u7684Web API\u754c\u9762 \u591a\u79cd\u8eab\u4efd\u8ba4\u8bc1\u548c\u6743\u9650\u8ba4\u8bc1 \u5f3a\u5927\u7684\u6392\u5e8f\u3001\u8fc7\u6ee4\u3001\u5206\u9875\u3001\u641c\u7d22\u3001\u9650\u6d41\u7b49\u529f\u80fd \u53ef\u6269\u5c55\u6027\uff0c\u63d2\u4ef6\u4e30\u5bcc \u4e09\u3001\u5b89\u88c5&\u914d\u7f6e 1.\u5b89\u88c5 pip install djangorestframework pip install markdown # Markdown support for the browsable API 2.\u914d\u7f6e INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', # \u653e\u5728\u7cfb\u7edf\u5e94\u7528\u540e # \u6ce8\u518c\u5b50\u5e94\u7528 'projects', 'interfaces', ] \u56db\u3001\u5e8f\u5217\u5316\u5668 1. \u5b9a\u4e49\u5e8f\u5217\u5316\u5668\u7c7b \u5fc5\u987b\u5f97\u7ee7\u627f Serializer \u7c7b\u6216\u5176\u5b50\u7c7b \u5b9a\u4e49\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d\u79f0\u2018\u5fc5\u987b\u2019\u4e0e\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d\u4fdd\u6301\u4e00\u81f4 \u9ed8\u8ba4\u5b9a\u4e49\u54ea\u4e9b\u5b57\u6bb5\uff0c\u90a3\u4e48\u54ea\u4e9b\u5b57\u6bb5\u5c31\u4f1a\u5e8f\u5217\u5316\u8f93\u51fa\uff0c\u540c\u65f6\u8fd9\u4e9b\u5b57\u6bb5\u4e5f\u5fc5\u987b\u8f93\u5165\uff08\u4f20\u9012\uff09 \u5e8f\u5217\u5316\u5668\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\u5fc5\u987b\u4e3aField\u5b50\u7c7b CharField \u5b57\u7b26\u4e32\u7c7b\u578b IntegerField int\u7c7b\u578b BooleanField \u5e03\u5c14\u7c7b\u578b DateTimeField \u65e5\u671f\u7c7b\u578b from rest_framework import serializers class ProjectSerializer(serializers.Serializer): id = serializers.IntegerField() name = serializers.CharField() leader = serializers.CharField() 2. \u4f7f\u7528\u5e8f\u5217\u5316\u5668 a. \u5982\u679c\u9700\u8981\u5c06\u4e00\u4e2a\u67e5\u8be2\u96c6\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5fc5\u987b\u5f97\u6307\u5b9amany=True b. \u9700\u8981\u7ed9instance\u4f20\u53c2 c. \u5982\u679c\u5c06\u4e00\u4e2a\u6a21\u578b\u5bf9\u8c61\u5e8f\u5217\u5316\uff0c\u90a3\u4e48\u65e0\u9700\u6307\u5b9amany=True d. \u4f7f\u7528serializer\u4e2d\u7684data\u5c5e\u6027\uff0c\u53ef\u4ee5\u83b7\u53d6\u5e8f\u5217\u5316\u8f93\u51fa\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 pro = Projects.objects.all() serializer = serializers.ProjectSerializer(instance=pro, many=True) data = serializer.data pro = Projects.objects.filter(pk=pk).first() serializer = serializers.ProjectSerializer(instance=pro) data = serializer.data 3.\u5e8f\u5217\u5316\u5668\u6570\u636e\u6821\u9a8c\u53c2\u6570 label\u548chelp_text\uff0c\u4e0e\u6a21\u578b\u7c7b\u4e2d\u5b57\u6bb5\u7684verbose_name\u548chelp_text\u4e00\u81f4 CharField\u53ef\u4ee5\u6307\u5b9a min_length\u53c2\u6570\uff0c\u4e3a\u6700\u5c0f\u957f\u5ea6 max_length\u53c2\u6570\uff0c\u4e3a\u6700\u5927\u957f\u5ea6 trim_whitespace\u53c2\u6570\uff0c\u662f\u5426\u622a\u65ad\u7a7a\u767d\u5b57\u7b26 IntegerField\u53ef\u4ee5\u6307\u5b9a min_value\u53c2\u6570\uff0c\u4e3a\u6700\u5c0f\u503c max_value\u53c2\u6570\uff0c\u4e3a\u6700\u5927\u503c \u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u8bbe\u7f6ewrite_only=True\uff0c\u8be5\u5b57\u6bb5\u5fc5\u987b\u5f97\u8f93\u5165\uff08\u53cd\u5e8f\u5217\u5316\u8f93\u5165\uff09\uff0c\u4f46\u65e0\u9700\u8f93\u51fa\uff08\u5e8f\u5217\u5316\u8f93\u51fa\uff09 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eread_only=True\uff0c\u8be5\u5b57\u6bb5\u65e0\u9700\u8f93\u5165\uff08\u53cd\u5e8f\u5217\u5316\u8f93\u5165\uff09\uff0c\u4f46\u5fc5\u987b\u5f97\u8f93\u51fa\uff08\u5e8f\u5217\u5316\u8f93\u51fa\uff09\uff0c\u4e0d\u80fd\u4e0ewrite_only=True\u4e00\u8d77\u7528 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eallow_null=True\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u4f20null\u503c \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eallow_blank=True\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5 \u4f20\u7a7a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4e0eallow_null=True\u4e00\u8d77\u7528 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6erequired=False\uff0c\u8be5\u5b57\u6bb5\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u65f6\uff0c\u53ef\u4ee5\u4e0d\u4f20\u9012 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6edefault\uff0c\u4e3a\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u4f1a\u5c06\u9ed8\u8ba4\u503c\u4f5c\u4e3a\u53cd\u5e8f\u5217\u5316\u7684\u8f93\u5165\u503c \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eerror_messages\uff0c\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u9519\u8bef\u4fe1\u606f \u7c7b\u578b\u4e3a\u5b57\u5178 key\u4e3a\u6821\u9a8c\u53c2\u6570 value\u4e3a\u9519\u8bef\u4fe1\u606f DateTimeField\u53ef\u4ee5\u6307\u5b9a format=\"%Y-%m-%d %H:%M:%S\" \u683c\u5f0f\u5316\u8f93\u51fa\u65e5\u671f format=\"%Y\u5e74%m\u6708%d\u65e5 %H:%M:%S\" 4.\u5e8f\u5217\u5316\u5668\u6570\u636e\u6821\u9a8c \u5728\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u7ed9data\u4f20\u53c2\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u6821\u9a8c data\u5fc5\u987b\u5f97\u4f20\u9012Python\u4e2d\u7684\u57fa\u672c\u7c7b\u578b\uff08\u5b57\u5178\u6216\u8005\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868\uff09 \u5fc5\u987b\u5f97\u8c03\u7528 is_valid() \u65b9\u6cd5\uff0c\u624d\u4f1a\u5f00\u59cb\u8fdb\u884c\u6821\u9a8c\uff08\u6821\u9a8c\u7684\u5f00\u5173\uff09 \u5982\u679c\u6821\u9a8c\u901a\u8fc7\uff0c\u4f1a\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse .errors \u5c5e\u6027\u7528\u4e8e\u83b7\u53d6\u9519\u8bef\u63d0\u793a\u4fe1\u606f\uff0c\u5f80\u5f80\u4e3a\u5b57\u5178\u7c7b\u578b\uff0c\u5fc5\u987b\u5f97\u5148\u8c03\u7528is_valid\u65b9\u6cd5\u624d\u884c is_valid(raise_exception=True) \uff0c\u5f53\u68c0\u9a8c\u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u629b\u51fa\u5f02\u5e38\u4fe1\u606f \u4f7f\u7528\u5e8f\u5217\u5316\u5668\u5bf9\u8c61 .validated_data \u5c5e\u6027\uff0c\u83b7\u53d6\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e .validated_data \u5c5e\u6027\uff0c\u5fc5\u987b\u6821\u9a8c\uff08\u8c03\u7528is_valid\u65b9\u6cd5\uff09\u4e4b\u540e\uff0c\u624d\u80fd\u83b7\u53d6 serializer = serializers.ProjectSerializer(data=data) if not serializer.is_valid(): err = serializer.errors return JsonResponse(data=err, json_dumps_params={\"ensure_ascii\": False}, status=400) 5.\u5e8f\u5217\u5316\u5668\u6709\u54ea\u4e9b\u4f5c\u7528\uff1f \u53ef\u4ee5\u5b9e\u73b0\u5e8f\u5217\u5316\u8f93\u51fa \u53ef\u4ee5\u5b9e\u73b0\u53cd\u5e8f\u5217\u5316\u8f93\u5165 \u6570\u636e\u6821\u9a8c \u64cd\u4f5c\u6570\u636e 6.\u5173\u8054\u5b57\u6bb5\u5e8f\u5217\u5316\u5668 1\uff09\u7236\u8868\u83b7\u53d6\u4ece\u8868\u7684\u6570\u636e\uff08\u5fc5\u987b\u5f97\u6307\u5b9amany=True\uff0c\u4e3a\u5217\u8868\u7684\u65f6\u5019\u5fc5\u987b\u6307\u5b9a\uff09 \u2460 \u9ed8\u8ba4\u4f7f\u7528\u4ece\u8868\u6a21\u578b\u7c7b\u540d\u5c0f\u5199_set interfaces_set = serializers.PrimaryKeyRelatedField(label='\u6240\u5c5e\u63a5\u53e3\u7684id', help_text='\u6240\u5c5e\u63a5\u53e3\u7684id', read_only=True, many=True) \u2461 \u81ea\u5b9a\u4e49\u540d\u79f0\uff08\u5728\u4ece\u8868\u6a21\u578b\u7c7b\u4e2d\u5b9a\u4e49\u5916\u952e\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9aelated_name\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u7236\u8868\u6a21\u578b\u5bf9\u8c61\u83b7\u53d6\u4ece\u8868\u6570\u636e\u65f6\uff0c\u4f7f\u7528\u7684\u5c5e\u6027\u540d\u79f0\uff09 projects = models.ForeignKey('projects.Projects', on_delete=models.CASCADE,related_name=\"interfaces\") \u5728\u83b7\u53d6\u4ece\u8868\u6570\u636e\u65f6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201cinterfaces\u201d interfaces = serializers.PrimaryKeyRelatedField(label='\u6240\u5c5e\u63a5\u53e3\u7684id', help_text='\u6240\u5c5e\u63a5\u53e3\u7684id', read_only=True, many=True) 2\uff09\u5728\u7236\u8868\u5e8f\u5217\u5316\u5668\u4e2d\uff0c\u53ef\u4ee5\u624b\u52a8\u7f6e\u9876\u5173\u8054\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u7c7b\u578b PrimaryKeyRelatedField\uff0c\u6307\u5b9a\u4ece\u8868\u7684\u4e3b\u952eid\u503c PrimaryKeyRelatedField\u6307\u5b9aread_only=True\uff0c\u90a3\u4e48\u53ea\u8f93\u51fa\u4ece\u8868\u5916\u952eid \u5982\u679c\u672a\u6307\u5b9aread_only=True\u6216\u8005required=False\uff0c\u90a3\u4e48\u5fc5\u987b\u5f97\u6307\u5b9aqueryset\uff08\u6307\u5b9a\u68c0\u9a8c\u65f6\u4f7f\u7528\u7684\u67e5\u8be2\u96c6\u5bf9\u8c61\uff09 interfaces = serializers.PrimaryKeyRelatedField(label='\u6240\u5c5e\u63a5\u53e3\u7684id', help_text='\u6240\u5c5e\u63a5\u53e3\u7684id', many=True, queryset=Interfaces.objects.all()) StringRelatedField\uff0c\u7528\u4e8e\u5728\u5e8f\u5217\u5316\u8f93\u51fa\u65f6\uff0c\u8c03\u7528\u5173\u8054\u6a21\u578b\u7c7b\u4e2d\u7684__str__\u65b9\u6cd5 StringRelatedField \u9ed8\u8ba4\u6dfb\u52a0\u4e86\u8ba9read_only=True\uff0c\u53ea\u7528\u4e8e\u5e8f\u5217\u5316\u8f93\u51fa\uff0c\u800c\u4e0d\u4f1a\u53cd\u5e8f\u5217\u5316\u8f93\u5165 interfaces =serializers.StringRelatedField(many=True) SlugRelatedField\uff0c\u7528\u4e8e\u5728\u5e8f\u5217\u5316\u8f93\u51fa\u6216\u8005\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u662f\uff0c\u6307\u5b9a\u4f7f\u7528\u7684\u5173\u8054\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d \u5982\u679c\u672a\u6307\u5b9aread_only=True\u6216\u8005required=False\uff0c\u90a3\u4e48\u5fc5\u987b\u5f97\u6307\u5b9aqueryset\uff08\u6307\u5b9a\u68c0\u9a8c\u65f6\u4f7f\u7528\u7684\u67e5\u8be2\u96c6\u5bf9\u8c61\uff09 \u5982\u679c\u9700\u8981\u53cd\u5e8f\u5217\u5316\u8f93\u5165\uff0c\u90a3\u4e48slug_field\u5fc5\u987b\u5f97\u6307\u5b9a\u62e5\u6709\u552f\u4e00\u7ea6\u675f\u7684\u5b57\u6bb5\u540d interfaces =serializers.SlugRelatedField(many=True,read_only=True,slug_field=\"tester\") 7. \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668 1\uff09\u53ef\u4ee5\u5728\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u4e0a\u4f7f\u7528validators\u6307\u5b9a\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668 validators\u5fc5\u987b\u5f97\u6307\u5b9a\u4e3a\u5e8f\u5217\u7c7b\u578b\uff08\u5f80\u5f80\u4e3a\u5217\u8868\uff09\uff0c\u5728\u5217\u8868\u4e2d\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u68c0\u9a8c\u5668 UniqueValidator\u6821\u9a8c\u5668\u8fdb\u884c\u552f\u4e00\u7ea6\u675f\u7684\u6821\u9a8c\uff0c\u5fc5\u987b\u5f97\u6307\u5b9aqueryset\u53c2\u6570\uff0c\u4f7f\u7528message\u6307\u5b9a\u5177\u4f53\u62a5\u9519\u4fe1\u606f from rest_framework.validators import UniqueValidator name = serializers.CharField( label='\u9879\u76ee\u540d\u79f0', help_text='\u9879\u76ee\u540d\u79f0', write_only=True, max_length=10, min_length=3, error_messages={\"min_length\": \"\u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d\"}, validators=[UniqueValidator(queryset=Projects.objects.all(),message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\")]) 2\uff09\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6821\u9a8c\u51fd\u6570\uff0c\u5bf9\u67d0\u4e2a\u5b57\u6bb5\u8fdb\u884c\u8fdb\u4e00\u6b65\u590d\u6742\u7684\u6821\u9a8c \u2460 \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u51fd\u6570 value\uff1a\u524d\u7aef\u4f20\u9012\u7684\u9879\u76ee\u540d\u79f0 \u5982\u679c\u6821\u9a8c\u5931\u8d25\uff0c\u5fc5\u987b\u5f97\u8fd4\u56deValidationError\u5f02\u5e38\u5bf9\u8c61 \u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f def is_contain_keyword(value): if '\u9879\u76ee' not in value: raise serializers.ValidationError(\"\u9879\u76ee\u4e2d\u5fc5\u987b\u5305\u542b\u2018\u9879\u76ee\u2019\u5173\u952e\u5b57\") \u2461 \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u51fd\u6570\u4f7f\u7528\uff0c\u76f4\u63a5\u5c06\u51fd\u6570\u540d\u653e\u7f6e\u5230 validators \u5217\u8868\u4e2d name = serializers.CharField( label='\u9879\u76ee\u540d\u79f0', help_text='\u9879\u76ee\u540d\u79f0', write_only=True, max_length=10, min_length=3, error_messages={\"min_length\": \"\u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d\"}, validators=[UniqueValidator(queryset=Projects.objects.all(),message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\"),is_contain_keyword]) 3\uff09\u53ef\u4ee5\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u5b9a\u4e49\u5bf9\u5355\u5b57\u6bb5\u8fdb\u884c\u68c0\u9a8c\u7684\u65b9\u6cd5 \u5355\u5b57\u6bb5\u68c0\u9a8c\u65b9\u6cd5\u7684\u540d\u79f0\uff0c\u5fc5\u987b\u4ee5 validate_ \u4f5c\u4e3a\u524d\u7f00 \u63a5\u6536\u7684\u53c2\u6570\u4e3a\u524d\u7aef\u4f20\u9012\u7684\u503c \u5982\u679c\u5728\u5b57\u6bb5\u5b9a\u4e49\u65f6\uff0c\u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8c03\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u5355\u5b57\u6bb5\u7684\u68c0\u9a8c\u65b9\u6cd5 \u5982\u679c\u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u5fc5\u987b\u5f97\u8fd4\u56deValidationError\u5f02\u5e38\u5bf9\u8c61 \u5982\u679c\u6821\u9a8c\u901a\u8fc7\u3002\u90a3\u4e48\u4e00\u822c\u9700\u8981\u5c06\u6821\u9a8c\u4e4b\u540e\u7684\u503c\u8fd4\u56de def validate_name(self, value): if not value.endswith('\u9879\u76ee'): raise ValidationError(\"\u9879\u76ee\u540d\u79f0\u4e2d\u5fc5\u987b\u4ee5'\u9879\u76ee'\u7ed3\u5c3e\") return value 4\uff09validate\u7528\u4e8e\u591a\u4e2a\u5b57\u6bb5\u7684\u8054\u5408\u6821\u9a8c \u63a5\u6536\u7684\u53c2\u6570\u4e3a\u524d\u7aef\u4f20\u9012\u7684\u6240\u6709\u53c2\u6570\uff08\u4f46\u5b57\u6bb5\u5747\u6821\u9a8c\u901a\u8fc7\uff09 \u5982\u679c\u5728\u5355\u5b57\u6bb5\u7684\u68c0\u9a8c\u65b9\u6cd5\u4e2d\u68c0\u9a8c\u4e0d\u901a\u8fc7\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8c03\u7528 validate \u5982\u679c\u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u5fc5\u987b\u5f97\u8fd4\u56de ValidationError \u5f02\u5e38\u5bf9\u8c61 \u5982\u679c\u6821\u9a8c\u901a\u8fc7\u3002\u90a3\u4e48\u4e00\u822c\u9700\u8981\u5c06\u6821\u9a8c\u4e4b\u540e\u7684\u6570\u636e\u8fd4\u56de def validate(self, attrs): name = attrs.get(\"name\") leader = attrs.get(\"leader\") if len(name+leader)>10: raise serializers.ValidationError(\"\u9879\u76ee\u540d\u79f0\u548c\u8d1f\u8d23\u4eba\u76f8\u52a0\u4e0d\u80fd\u5927\u4e8e10\") return attrs 5\uff09to_internal_value \u7528\u4e8e\u5e8f\u5217\u5316\u5668\u7c7b\u8fdb\u884c\u6821\u9a8c\u65f6\uff0c\u9996\u5148\u4f1a\u8c03\u7528\uff0c\u5f00\u59cb\u8fdb\u884c\u6821\u9a8c def to_internal_value(self, data): return super().to_internal_value(data) 6\uff09to_representation \u7528\u4e8e\u53cd\u5e8f\u5217\u5316\u8f93\u51fa\u65f6\u8c03\u7528 def to_representation(self, instance): return super().to_representation(instance) 7\uff09\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684\u5b57\u6bb5 class OneInterfaceSerializer(serializers.Serializer): id = serializers.IntegerField() name = serializers.CharField() tester = serializers.CharField() -------------------------------------------------------------- interfaces = OneInterfaceSerializer(many=True, read_only=True) 8.\u67d0\u4e2a\u5b57\u6bb5\u7684\u68c0\u9a8c\u987a\u5e8f \u8c03\u7528\u7236\u7c7b\u7684to_internal_value\u65b9\u6cd5 \u68c0\u9a8c\u5b57\u6bb5\u7c7b\u578b \u901a\u7528\u7684\u7ea6\u675f\u53c2\u6570\uff08min_length\u3001max_length\uff09 \u4f9d\u6b21\u6821\u9a8cvalidators\u4e2d\u6307\u5b9a\u7684\u6821\u9a8c\u89c4\u5219 \u8fdb\u5165\u5230\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u8c03\u7528\u5355\u5b57\u6bb5\u7684\u6821\u9a8c\u65b9\u6cd5\uff08\u524d\u63d0\u4e3a\u4e0a\u9762\u4e09\u4e2a\u6821\u9a8c\u5668\u90fd\u901a\u8fc7\uff0c\u624d\u4f1a\u6267\u884c\u8fd9\u4e00\u4e2a\u6821\u9a8c\u5668\uff09 \u7236\u7c7b\u7684to_internal_value\u65b9\u6cd5\u8c03\u7528\u7ed3\u675f \u8fdb\u5165\u5230\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u8c03\u7528\u591a\u5b57\u6bb5\u7684\u8054\u5408\u6821\u9a8c\u65b9\u6cd5\uff08validate\uff09 \u4e94\u3001\u5e8f\u5217\u5316\u5668\u6570\u636e\u5e93\u64cd\u4f5c create\u548cupdate \u5e8f\u5217\u5316\u5668\u5bf9\u8c61save\u65b9\u6cd5 1\uff09\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u4ec5\u4ec5\u53ea\u4f20data\u53c2\u6570 \u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u4f1a\u8c03\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684create\u65b9\u6cd5\u8fdb\u884c\u6570\u636e\u521b\u5efa\u64cd\u4f5c 2\uff09\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u540c\u65f6\u7ed9data\u548cinstance\u4f20\u53c2\u6570 \u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u4f1a\u8c03\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684update\u65b9\u6cd5\u8fdb\u884c\u6570\u636e\u66f4\u65b0\u64cd\u4f5c create\u65b9\u6cd5 validated_data\u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 \u5fc5\u987b\u5f97\u5c06\u521b\u5efa\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de \u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88abvalidated_data\u63a5\u6536 \u53ef\u4ee5\u7ed9\u521b\u5efa\u7684\u6a21\u578b\u5bf9\u8c61\u6dfb\u52a0\u52a8\u6001\u5b57\u6bb5\uff0c\u5982\u679c\u8be5\u5b57\u6bb5\u6709\u5b9a\u4e49\u76f8\u5e94\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u5e76\u4e14\u5236\u5b9a\u8f93\u51fa\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5c31\u4f1a\u8f93\u51fa\u8be5\u503c def create(self, validated_data): \"\"\" 1.validated_data\u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 2.\u5fc5\u987b\u5f97\u5c06\u521b\u5efa\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de 3.\u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88abvalidated_data\u63a5\u6536 4.\u53ef\u4ee5\u7ed9\u521b\u5efa\u7684\u6a21\u578b\u5bf9\u8c61\u6dfb\u52a0\u52a8\u6001\u5b57\u6bb5\uff0c\u5982\u679c\u8be5\u5b57\u6bb5\u6709\u5b9a\u4e49\u76f8\u5e94\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u5e76\u4e14\u5236\u5b9a\u8f93\u51fa\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5c31\u4f1a\u8f93\u51fa\u8be5\u503c \"\"\" pro = Projects.objects.create(**validated_data) return pro --------------------------------------------------------- serializer = serializers.ProjectSerializer(data=data) serializer.save() \u4ec0\u4e48\u65f6\u5019\u8c03\u7528create\u65b9\u6cd5? \u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u53ea\u4f20data\u53c2\u6570 \u5e8f\u5217\u5316\u5bf9\u8c61\u8c03\u7528is_valid()\u65b9\u6cd5 \u5e8f\u5217\u5316\u5bf9\u8c61.save() update\u65b9\u6cd5 validated_data \u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 instance \u4e3a\u5f85\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61 \u5fc5\u987b\u5f97\u5c06\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de \u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88ab validated_data \u63a5\u6536 def update(self, instance, validated_data): \"\"\" 1.validated_data\u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 2.instance\u4e3a\u5f85\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61 3.\u5fc5\u987b\u5f97\u5c06\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de 4.\u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88abvalidated_data\u63a5\u6536 \"\"\" instance.name = validated_data.get(\"name\", instance.name) instance.leader = validated_data.get(\"leader\", instance.leader) instance.desc = validated_data.get(\"desc\", instance.desc) instance.save() return instance ------------------------------------------------------ qs = Project.objects.get(id=2) data = {\"leader\": \"eww\"} # \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u586b\u5b57\u6bb5\u7684\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 partial\u53c2\u6570\u6765\u5141\u8bb8\u90e8\u5206\u66f4\u65b0\u3002 serializer = ProjectSerializer( data=data, instance=qs, partial=True) if not serializer.is_valid(): err = serializer.errors return JsonResponse(data=err, json_dumps_params={\"ensure_ascii\": False}, status=400) serializer.save() return JsonResponse(data=serializer.data, safe=False) \u4ec0\u4e48\u65f6\u5019\u8c03\u7528create\u65b9\u6cd5? \u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u540c\u65f6\u4f20data\u4e0einstance\u53c2\u6570 \u5e8f\u5217\u5316\u5bf9\u8c61\u8c03\u7528is_valid()\u65b9\u6cd5 \u5e8f\u5217\u5316\u5bf9\u8c61.save() \u516d\u3001ModelSerializer \u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7c7b \u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7c7b \u53ef\u4ee5\u7ee7\u627fModelSerializer\uff0c\u6839\u636e\u6a21\u578b\u7c7b\u6765\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684\u5b57\u6bb5 \u5fc5\u987b\u5f97\u6307\u5b9amodel\u53c2\u6570\uff08\u6a21\u578b\u7c7b\uff09\uff0c\u7528\u4e8e\u6307\u5b9a\u4f7f\u7528\u7684\u6a21\u578b \u4f1a\u5b9e\u73b0create\u3001update\u65b9\u6cd5 \u4f1a\u7ed9\u4e3b\u952e\u5b57\u6bb5\u3001DataTimeField\u4e2d\u6307\u5b9aauto_now_add\u548cauto_now\u53c2\u6570\uff0c\u4f1a\u6dfb\u52a0read_only=True \u4f1a\u7ed9\u6709\u6307\u5b9adefault\u53c2\u6570\u7684\u5b57\u6bb5\uff0c\u6dfb\u52a0required=False \u4f1a\u7ed9\u6709\u6307\u5b9anull\u53c2\u6570\u7684\u5b57\u6bb5\uff0c\u6dfb\u52a0allow_null=True \u4f1a\u7ed9\u6709\u6307\u5b9ablank\u53c2\u6570\u7684\u5b57\u6bb5\uff0c\u6dfb\u52a0allow_blank=True fields\u6307\u5b9a\u6a21\u578b\u7c7b\u4e2d\u9700\u8981\u8fdb\u884c\u5e8f\u5217\u5316\u7684\u5b57\u6bb5 \" all \"\u4e3a\uff0c\u6a21\u578b\u7c7b\u4e2d\u6240\u6709\u7684\u5b57\u6bb5\u90fd\u5e8f\u5217\u5316\u64cd\u4f5c\u7684\u5b57\u6bb5 \u53ef\u4ee5\u6307\u5b9a\u6a21\u578b\u7c7b\u4e2d\u5e8f\u5217\u5316\u64cd\u4f5c\u7684\u5b57\u6bb5\uff0c\u9700\u8981\u5728\u5143\u7ec4\u4e2d\u6307\u5b9a exclude\u6307\u5b9a\u4e0d\u9700\u8981\u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c\u7684\u5b57\u6bb5 \u5982\u679c\u6307\u5b9a\u4e86\u6a21\u578b\u7c7b\u4e2d\u6ca1\u6709\u5b9a\u4e49\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u5fc5\u987b\u5728fields\u5143\u7ec4\u4e2d\u6307\u5b9a\uff0c\u5982\u679cfields\u4e3a\u201c all \u201d\u6216\u8005\u6709exclude\u7684\u9664\u5916 class ProjectModelSerializer(serializers.ModelSerializer): interfaces = OneInterfaceSerializer(many=True, read_only=True) token = serializers.CharField(read_only=True) class Meta: model = Projects # fields = '__all__' fields = ('id', 'name', 'leader', 'is_excute', 'interfaces', 'token') # exclude = ('create_time', 'update_time') \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u5e8f\u5217\u5316\u5b57\u6bb5\u6821\u9a8c\uff1f \u65b9\u5f0f\u4e00\uff1a a.\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5 b.\u91cd\u65b0\u5b9a\u4e49\u7684\u5b57\u6bb5\u4f1a\u8986\u76d6\u81ea\u52a8\u751f\u6210\u7684\u540c\u540d\u5b57\u6bb5 name = serializers.CharField( label='\u9879\u76ee\u540d\u79f0', help_text='\u9879\u76ee\u540d\u79f0', max_length=10, min_length=3, error_messages={\"min_length\": \"\u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d\"}, validators=[UniqueValidator(queryset=Projects.objects.all(), message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\"), is_contain_keyword]) \u65b9\u5f0f\u4e8c\uff1a a.\u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u7684extra_kwargs\u4e2d\u5bf9\u81ea\u52a8\u751f\u6210\u7684\u5e8f\u5217\u5316\u5b57\u6bb5\u8fdb\u884c\u4fee\u6539 b.\u5c06\u9700\u8981\u4fee\u6539\u7684\u5b57\u6bb5\u540d\u4f5c\u4e3akey\uff0c\u5177\u4f53\u4fee\u6539\u7684\u5185\u5bb9\u4f5c\u4e3avalue class Meta: model = Projects # fields = '__all__' fields = ('id', 'name', 'leader', 'is_excute') # exclude = ('create_time', 'update_time') extra_kwargs = { \"name\": { \"label\": \"\u9879\u76ee\u540d\u79f0\", \"max_length\": 10, \"error_messages\": { \"min_length\": '\u9879\u76ee\u540d\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d' }, \"validators\": [ UniqueValidator(queryset=Projects.objects.all(), message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\"), is_contain_keyword ] } } \u7edf\u4e00\u6307\u5b9a\u9700\u8981\u6dfb\u52a0 read_only=True \u7684\u5b57\u6bb5 \u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u7684read_only_fields,\u7edf\u4e00\u6307\u5b9a\u9700\u8981\u6dfb\u52a0read_only=True\u7684\u5b57\u6bb5 class Meta: model = Projects # fields = '__all__' fields = ('id', 'name', 'leader', 'is_excute') # exclude = ('create_time', 'update_time') # \u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u7684read_only_fields,\u7edf\u4e00\u6307\u5b9a\u9700\u8981\u6dfb\u52a0read_only=True\u7684\u5b57\u6bb5 read_only_fields = ('is_excute','desc','id') \u4e03\u3001APIView \u7279\u5f81\uff1a \u7ee7\u627fAPIView\u4e4b\u540e\uff0crequest\u4e3aRequest\u5bf9\u8c61 \u53ef\u4ee5\u6839\u636e\u524d\u7aef\u8bf7\u6c42\u5934\u4e2d\u4f20\u9012\u7684Content-Type\uff0c\u81ea\u52a8\u89e3\u6790\u53c2\u6570 \u7edf\u4e00\u4e86\u4e0d\u540c\u6570\u636e\u4e4b\u95f4\u6570\u636e\u89e3\u6790\u65b9\u5f0f \u524d\u7aef\u4f20\u9012\u7684www-form-urlencoded\u3001application/json\u3001form-data\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528request.data\u5c5e\u6027\u83b7\u53d6 \u524d\u7aef\u4f20\u9012\u7684\u67e5\u8be2\u5b57\u7b26\u521b\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7GET\u3001query_params\u83b7\u53d6 Request\u662f\u5bf9Django\u4e2dHTTPRequest\u7c7b\u8fdb\u884c\u4e86\u62d3\u5c55\uff0c\u517c\u5bb9HTTPRequest\u7c7b\u7684\u64cd\u4f5c\u65b9\u5f0f from rest_framework.response import Response from rest_framework.request import Request from rest_framework import status class ProjectView(APIView): def get(self, request: Request, id: int): pro = Project.objects.filter(id=id) serializer = ProjectModelSerializer(instance=pro, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) def post(self, request: Request): # \u76f4\u63a5\u4f7f\u7528request.data\u83b7\u53d6\u4f20\u9012\u7684\u53c2\u6570 serializer = ProjectModelSerializer(data=request.data) # \u76f4\u63a5\u5728is_valid\u65b9\u6cd5\u4e2d\u6dfb\u52a0\u53c2\u6570raise_exception=True\uff0c\u81ea\u52a8\u629b\u51fa\u68c0\u9a8c\u5f02\u5e38 serializer.is_valid(raise_exception=True) serializer.save() # \u4f7f\u7528 Rest Framwork\u4e2d\u7684Response\u8fdb\u884c\u8fd4\u56de return Response(data=serializer.data) \u516b\u3001GenericAPIView \u7279\u5f81\uff1a GenericAPIView\u7c7b\u662fAPIView\u5b50\u7c7b \u652f\u6301APIView\u7684\u6240\u6709\u529f\u80fd \u652f\u6301\u8fc7\u6ee4\u3001\u6392\u5e8f\u3001\u5206\u9875\u529f\u80fd \u7ee7\u627fGenericAPIView\u4e4b\u540e\uff0c\u9700\u8981\u5236\u5b9aqueryset\u548cserializer_class\u7c7b\u578b queryset\u6307\u5b9a\u5f53\u524d\u7c7b\u89c6\u56fe\u9700\u8981\u4f7f\u7528\u7684\u67e5\u8be2\u96c6\u5bf9\u8c61 serializer_class\u6307\u5b9a\u5f53\u524d\u7c7b\u89c6\u56fe\u9700\u8981\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u5668\u7c7b self.get_queryset()\u83b7\u53d6\u67e5\u8be2\u96c6\u5bf9\u8c61 self.get_serializer()\u83b7\u53d6\u5e8f\u5217\u5316\u5668\u7c7b lookup_field\u7c7b\u5c5e\u6027\u7528\u4e8e\u6307\u5b9a\u4f20\u9012\u4e3b\u952e\u53c2\u6570\u65f6\uff0c\u63a5\u6536\u7684url\u8def\u5f84\u53c2\u6570\u540d\uff0c\u9ed8\u8ba4\u4e3apk self.get_object()\u83b7\u53d6\u6a21\u578b\u5bf9\u8c61 from rest_framework.generics import GenericAPIView class ProjectView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer lookup_field = \"id\" def get(self, request: Request, id: int): serializer = self.get_serializer(instance=self.get_object()) return Response(data=serializer.data, status=status.HTTP_200_OK) def post(self, request: Request): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) serializer.save() return Response(data=serializer.data) def put(self, request: Request, id: int): serializer = self.get_serializer( data=request.data, instance=self.get_object(), partial=True) serializer.is_valid(raise_exception=True) serializer.save() return Response(data=serializer.data, status=status.HTTP_201_CREATED) def delete(self, request, id: int): qs = self.get_queryset().filter(id=id).delete() return HttpResponse(qs) class ProjectsView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer def get(self, request: Request): # \u591a\u6761\u6570\u636e\u7684\u65f6\u5019\u9700\u8981\u52a0\u4e0amany=True serializer = self.get_serializer( instance=self.get_queryset(), many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) GenericAPIView\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5c5e\u6027\u548c\u65b9\u6cd5\uff1f 1.\u5c5e\u6027 queryset\u3001serializer_class 2.\u65b9\u6cd5 get_queryset()\u3001 get_serializer()\u3001 get_serializer_class()\u3001 filter_queryset()\u3001 paginate_queryset()\u3001 get_paginated_response()\u3001 get_object() \u8fc7\u6ee4\u529f\u80fd \u5168\u5c40\u914d\u7f6e\u8fc7\u6ee4\u5f15\u64ce \u5728settings.py\u4e2d\u6307\u5b9a\u4f7f\u7528\u7684\u5168\u5c40\u8fc7\u6ee4\u5f15\u64ce \u6240\u6709\u7ee7\u627fGenericAPIView\u7684\u7c7b\u89c6\u56fe\u4e2d\u83b7\u53d6\u5217\u8868\u6570\u636e\u7684\u63a5\u53e3\uff0c\u652f\u6301\u8fc7\u6ee4\u529f\u80fd \u524d\u7aef\u5728\u8fc7\u6ee4\u65f6\uff0c\u9ed8\u8ba4\u9700\u8981\u4f7f\u7528search\u4f5c\u4e3a\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u4f7f\u7528SEARCH_PARAM\u8fdb\u884c\u4fee\u6539 REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS':['rest_framework.filters.SearchFilter'], 'SEARCH_PARAM':'ss' } \u7c7b\u89c6\u56fe\u4e2d\u4f7f\u7528\u8fc7\u6ee4 search_fields:\u6307\u5b9a\u5bf9\u6a21\u578b\u7c7b\u4e2d\u56fd\u54ea\u4e9b\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4 \u4f7f\u7528\u8fc7\u6ee4\u5fc5\u987b\u8c03\u7528self.filter_queryset\u65b9\u6cd5 \u9700\u8981\u4f20\u9012\u67e5\u8be2\u96c6\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570 \u53ef\u4ee5\u5728\u5b57\u7b26\u524d\u9762\u6dfb\u52a0\u524d\u7f00 '^': 'istartswith' '=': 'iexact', '@': 'search', '$': 'iregex', class ProjectsView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer lookup_field = \"id\" # \u5728\u7c7b\u89c6\u56fe\u4e2d\u6307\u5b9a\u8fc7\u6ee4\u5f15\u64ce\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5168\u5c40 filter_backends= [SearchFilter] search_fields = [\"name\", \"leader\"] def get(self, request: Request): queryset = self.filter_queryset(self.get_queryset()) serializer = self.get_serializer( instance=queryset, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) \u54ea\u4e9b\u60c5\u51b5\u4e0d\u4f1a\u8fdb\u884c\u8fc7\u6ee4\uff1f \u5982\u679c\u5168\u5c40\u672a\u6307\u5b9a\u8fc7\u6ee4\u5f15\u64ce \u5982\u679csearch_fields \u7c7b\u5c5e\u6027\u4e3a\u7a7a \u5982\u679c\u524d\u7aef\u641c\u7d22\u65f6\uff0c\u672a\u6307\u5b9asearch\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570 \u6392\u5e8f\u529f\u80fd \u5168\u5c40\u914d\u7f6e\u6392\u5e8f\u5f15\u64ce 'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter','rest_framework.filters.OrderingFilter'], \u7c7b\u89c6\u56fe\u4e2d\u4f7f\u7528\u6392\u5e8f \u5728\u7c7b\u89c6\u56fe\u4e2d\u6307\u5b9a\u6a21\u578b\u7c7b\u4e2d\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\u540d\u79f0 \u524d\u7aef\u9700\u8981\u4f7f\u7528ordering\u4f5c\u4e3a\u6392\u5e8f\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u540d\u79f0 \u524d\u7aef\u53ef\u4ee5\u5728\u5b57\u6bb5\u524d\u6dfb\u52a0'-'\uff0c\u8fdb\u884c\u9006\u5e8f\u6392\u5e8f\uff0c\u9ed8\u8ba4\u5347\u5e8f ordering\uff1a\u6307\u5b9a\u4f7f\u7528\u9ed8\u8ba4\u6392\u5e8f\u5b57\u6bb5 \u524d\u7aef\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u6392\u5e8f\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u6392\u5e8f\u5b57\u6bb5\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\uff1a?ordering=-id,name class ProjectsView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer lookup_field = \"id\" # \u5728\u7c7b\u89c6\u56fe\u4e2d\u6307\u5b9a\u6392\u5e8f\u5f15\u64ce\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5168\u5c40 filter_backends = [SearchFilter, OrderingFilter] search_fields = [\"name\", \"leader\"] # \u6307\u5b9a\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\u540d\u79f0 ordering_fields = [\"id\", 'name', 'leader'] # \u9ed8\u8ba4\u4f7f\u7528\u7684\u6392\u5e8f\u5b57\u6bb5\uff0c\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u4e3aid\u6392\u5e8f ordering = [\"name\"] def get(self, request: Request): queryset = self.filter_queryset(self.get_queryset()) serializer = self.get_serializer( instance=queryset, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) \u5206\u9875\u529f\u80fd \u5168\u5c40\u914d\u7f6e\u5206\u9875\u5f15\u64ce # \u6307\u5b9a\u5206\u9875\u5f15\u64ce\u7c7b 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', # \u5fc5\u987b\u6307\u5b9a\u6bcf\u9875\u663e\u793a\u7684\u6700\u5927\u6570\u636e\u6761\u6570 'PAGE_SIZE': 4, \u7c7b\u89c6\u56fe\u4e2d\u4f7f\u7528\u5206\u9875 \u4f7f\u7528self.paginate_queryset\u65b9\u6cd5\uff0c\u8fdb\u884c\u5206\u9875\u64cd\u4f5c \u9700\u8981\u63a5\u6536\u67e5\u8be2\u96c6\u53c2\u6570 \u5982\u679c\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u8fdb\u884c\u5206\u9875\u64cd\u4f5c\uff0c\u5426\u5219\u9700\u8981\u8fdb\u884c\u5206\u9875\u64cd\u4f5c def get(self, request: Request): queryset = self.filter_queryset(self.get_queryset()) page = self.paginate_queryset(queryset) if page is not None: serializer = self.get_serializer(instance=page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer( instance=queryset, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) \u91cd\u5199\u5206\u9875\u5f15\u64ce\u7c7bPageNumberPagination from rest_framework.pagination import PageNumberPagination as _PageNumberPagination class PageNumberPagination(_PageNumberPagination): # \u6307\u5b9a\u9ed8\u8ba4\u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u6761\u6570 page_size = 3 # \u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u9875\u7801\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u540d\u79f0 page_query_param = 'p' # \u6307\u5b9a\u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u9875\u7801\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u63cf\u8ff0 page_query_description = \"\u83b7\u53d6\u7684\u9875\u7801\" # \u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u6bcf\u4e00\u9875\u7684\u6570\u636e\u6761\u6570\uff0c\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u540d\u79f0 # \u53ea\u8981\u8bbe\u7f6e\u4e86page_size_query_param\uff0c\u90a3\u4e48\u524d\u7aef\u5c31\u652f\u6301\u6307\u5b9a\u83b7\u53d6\u6bcf\u4e00\u9875\u7684\u6570\u636e\u6761\u6570 page_size_query_param = \"s\" # \u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u6bcf\u4e00\u9875\u7684\u6570\u636e\u6761\u6570\uff0c\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u7684\u63cf\u8ff0 page_size_query_description = \"\u6bcf\u4e00\u9875\u6570\u636e\u6761\u6570\" max_page_size = 100 def get_paginated_response(self, data): response = super().get_paginated_response(data) # \u4e3a\u5206\u9875\u540e\u7684\u6570\u636e\uff0c\u6dfb\u52a0\u9875\u7801 response.data['current_num'] = self.page.number return response \u91cd\u5199\u540e\u9700\u8981\u66f4\u6539\u5f15\u64ce\u7c7b 'DEFAULT_PAGINATION_CLASS': 'utils.pagination.PageNumberPagination' \u4e5d\u3001Mixins \u5341\u3001ViewSet ViewSet\u7ee7\u627f\u4e86ViewSetMixin\u3001views.APIView\uff0c\u6240\u4ee5\u672a\u63d0\u4f9b\u5bf9\u4e8e\u5206\u9875\u3001\u8fc7\u6ee4\u529f\u80fd\u7684\u652f\u6301 \u672a\u63d0\u4f9bget_object()\u3001get_serializer()\u3001queryset\u3001serializer_class\u7b49 \u5341\u4e00\u3001GenericViewSet GenericViewSet\u7ee7\u627f\u4e86ViewSetMixin\u3001generics.GenericAPIView\uff0c\u6240\u4ee5\u652f\u6301\u5206\u9875\u3001\u8fc7\u6ee4\u529f\u80fd \u53ea\u8981\u7ee7\u627f\u4e86ViewSet\u7684\u7c7b\u89c6\u56fe\uff0c\u90a3\u4e48\u5c31\u652f\u6301\u8bf7\u6c42\u65b9\u6cd5\u4e0eaction\u540d\u79f0\u8fdb\u884c\u4e00\u4e00\u5bf9\u5e94\u7684\u529f\u80fd \u5728as_view\u65b9\u6cd5\u4e2d\u6dfb\u52a0\u5b57\u5178\uff0ckey\u4e3a\u8bf7\u6c42\u65b9\u6cd5\u540d\u79f0\uff08get/post/put/delete/patch/option/head\uff09 value\u4e3a\u9700\u8981\u8c03\u52a8\u7684action\u65b9\u6cd5\u540d\u79f0 from rest_framework import generics, mixins, status,viewsets class ProjectViewSet(mixins.ListModelMixin,viewsets.GenericViewSet): queryset = Project.objects.all() serializer_class = ProjectModelSerializer def names(self, request): queryset = self.get_queryset() names = [{'id': pro.id, 'name': pro.name} for pro in queryset] return Response(names, status=status.HTTP_200_OK) -------------------------------------------------------- \u65b9\u5f0f\u4e00\uff1a\u624b\u52a8\u5199\u8def\u7531 path('p/', views.ProjectViewSet.as_view( {'get': 'list', } )) \u65b9\u5f0f\u4e8c\uff1a\u81ea\u52a8\u751f\u6210\u8def\u7531 from rest_framework import routers # 1\u3001\u521b\u5efa\u8def\u7531\u5bf9\u8c61 DefaultRouter\u4e0eSimpleRouter\u529f\u80fd\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u8ddf\u8def\u7531\uff08\u4f5c\u4e3a\u83b7\u53d6\u5f53\u524d\u6570\u636e\u7684\u5165\u53e3\uff09 router = routers.SimpleRouter() # 2\u3001\u6ce8\u518c\u8def\u7531 \u7b2c\u4e00\u4e2a\u53c2\u6570\uff1a\u8def\u7531\u524d\u7f00 \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u89c6\u56fe\u96c6 \u4f7f\u7528\u89c6\u56fe\u96c6\u4e2d\u7684\u8def\u7531\u673a\u5236\uff0c\u53ea\u4f1a\u4e3a\u7279\u5b9a\u7684action\u81ea\u52a8\u751f\u6210\u8def\u7531\u6761\u4ef6 \u7279\u5b9a\u7684action:retrieve/update/list/created\u7b49 \u9ed8\u8ba4\u81ea\u5b9a\u4e49\u7684action\uff0c\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u8def\u7531\u6761\u76ee\uff0c\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u8def\u7531\u6620\u5c04 router.register(r'p', views.ProjectViewSet) urlpatterns = [ ... path('p/names/',views.ProjectViewSet.as_view({ 'get':'names' })) ] # 3\u3001\u5408\u5e76\u8def\u7531\u6761\u76ee urlpatterns += router.urls \u5341\u4e8c\u3001\u4f7f\u7528action\u88c5\u9970\u5668\uff0c\u81ea\u52a8\u751f\u6210\u8def\u7531 a.\u5982\u679c\u9700\u8981\u4f7f\u7528\u89c6\u56fe\u96c6\u4e2d\u7684\u8def\u7531\u673a\u5236\u6765\u4e3a\u81ea\u5b9a\u4e49\u7684action\uff0c\u81ea\u52a8\u751f\u6210\u8def\u7531\u6761\u76ee\uff0c\u90a3\u4e48\u9700\u8981\u4f7f\u7528action b.methods\u53c2\u6570\u9ed8\u8ba4\u4e3aget\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u5217\u8868\u4e2d\u6307\u5b9a\u591a\u4e2a\u8bf7\u6c42\u65b9\u6cd5 c.detail\u6307\u5b9a\u662f\u5426\u9700\u8981\u63a5\u6536\u6a21\u578b\u4e3b\u952e\u503c\uff0c\u5982\u679c\u65e0\u9700\u63a5\u6536\u4e3b\u952e\u503c\uff0c\u90a3\u4e48\u9700\u8981\u8bbe\u7f6edetail=False\uff0c\u5426\u5219\u9700\u8981\u8bbe\u7f6edetail=True d.url_path\u6307\u5b9a\u751f\u6210\u7684\u8def\u7531\u6761\u76ee\u8def\u5f84\u540d\uff0c\u9ed8\u8ba4\u4e3a\u81ea\u5b9a\u4e49action\u65b9\u6cd5\u540d\u79f0 e.url_name\u6307\u5b9a\u751f\u6210\u7684\u8def\u7531\u540d\u79f0\u540e\u7f00\uff0c\u9ed8\u8ba4\u4e3a\u81ea\u5b9a\u4e49action\u65b9\u6cd5\u540d\u79f0 @action(methods=['get'], detail=False, url_path='names', url_name='mm') def names(self, request): queryset = self.get_queryset() names = [{'id': pro.id, 'name': pro.name} for pro in queryset] return Response(names, status=status.HTTP_200_OK) \u5341\u4e09\u3001\u4fee\u6539DRF\u914d\u7f6e\u4fe1\u606f \u53ef\u4ee5\u5728Django settings.py\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539DRF\u7684\u914d\u7f6e\u4fe1\u606f \u5728REST_FRAMEWORK\u5b57\u5178\u4e2d\u4fee\u6539 \u5728DEFAULT_PARSER_CLASSES\u4e2d\u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u7684\u89e3\u6790\u5668 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ # \u89e3\u6790json\u53c2\u6570 'rest_framework.parsers.JSONParser', # \u89e3\u6790www-form-urlencoded\u53c2\u6570 'rest_framework.parsers.FormParser', # \u89e3\u6790multipart/form-data\u53c2\u6570 'rest_framework.parsers.MultiPartParser' ] } \u6307\u5b9a\u540e\u7aef\u4f7f\u7528\u7684\u6e32\u67d3\u5668 \u4f1a\u81ea\u52a8\u6839\u636e\u8bf7\u6c42\u5934\u4e2d\u7684Accept\u5b57\u6bb5\uff0c\u8fd4\u56de\u524d\u7aef\u9700\u8981\u7684\u6570\u636e\u683c\u5f0f \u9ed8\u8ba4\u5982\u679c\u672a\u6dfb\u52a0Accept\u5b57\u6bb5\u53c2\u6570\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56deapplication/json \u9ed8\u8ba4\u5982\u679c\u6307\u5b9a\u4e86Accept\u5b57\u6bb5\u4e3atext/html\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u53ef\u6d4f\u89c8\u7684API\u9875\u9762 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ # \u4f1a\u8fd4\u56dejson 'rest_framework.renderers.JSONRenderer', # \u4f1a\u8fd4\u56de\u53ef\u6d4f\u89c8API\u9875\u9762 'rest_framework.renderers.BrowsableAPIRenderer', ], } \u5341\u56db\u3001\u65e5\u5fd7\u914d\u7f6e\uff08settings.py\uff09 LOGGING = { # \u6307\u5b9a\u65e5\u5fd7\u7248\u672c 'version': 1, # \u6307\u5b9a\u662f\u5426\u7981\u7528\u5176\u4ed6\u65e5\u5fd7\u5668 'disable_existing_loggers': False, # \u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u7684\u683c\u5f0f 'formatters': { # \u7b80\u5355\u683c\u5f0f 'simple': { 'format': '%(asctime)s - [%(levelname)s] - [msg]%(message)s' }, # \u590d\u6742\u683c\u5f0f 'verbose': { 'format': '%(asctime)s - [%(levelname)s] - %(name)s - [msg]%(message)s - [%(filename)s:%(lineno)d ]' }, }, # \u6307\u5b9a\u65e5\u5fd7\u8fc7\u6ee4\u89c4\u5219 'filters': { 'require_debug_true': { '()': 'django.utils.log.RequireDebugTrue', }, }, # \u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u6e20\u9053 'handlers': { # \u6307\u5b9a\u5728console\u7ec8\u7aef\u7684\u65e5\u5fd7\u914d\u7f6e\u4fe1\u606f 'console': { # \u8bb0\u5f55\u65e5\u5fd7\u7684\u7b49\u7ea7 'level': 'DEBUG', 'filters': ['require_debug_true'], 'class': 'logging.StreamHandler', 'formatter': 'simple' }, # \u6307\u5b9a\u5728\u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e\u4fe1\u606f 'file': { 'level': 'INFO', 'class': 'logging.handlers.RotatingFileHandler', 'filename': os.path.join(BASE_DIR, \"logs/log.log\"), # \u65e5\u5fd7\u6587\u4ef6\u7684\u4f4d\u7f6e 'maxBytes': 100 * 1024 * 1024, 'backupCount': 10, 'formatter': 'verbose', 'encoding': 'utf-8', }, }, # \u5b9a\u4e49\u65e5\u5fd7\u5668 'loggers': { 'web': { # \u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3adev06\u7684\u65e5\u5fd7\u5668 # \u6307\u5b9a\u5f53\u524d\u65e5\u5fd7\u5668\u5173\u8054\u7684\u6e20\u9053 'handlers': ['console', 'file'], 'propagate': True, 'level': 'DEBUG', # \u65e5\u5fd7\u5668\u63a5\u6536\u7684\u6700\u4f4e\u65e5\u5fd7\u7ea7\u522b }, } } \u5341\u4e94\u3001\u63a5\u53e3\u6587\u6863 coreapi pip install coreapi \u4f7f\u7528 1. \u5728 settings.py \u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e REST_FRAMEWORK = { 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema' } 2. \u6dfb\u52a0\u63a5\u53e3\u6587\u6863\u8def\u7531 from rest_framework.documentation import include_docs_urls urlpatterns = [ path('docs/', include_docs_urls(title=\"\u8bf4\u660e\u6587\u6863\")), ] drf-yasg pip install drf-yasg \u4f7f\u7528 1. \u6dfb\u52a0\u5230INSTALLED_APPS\u4e2d INSTALLED_APPS = [ ... 'drf_yasg' ... ] 2.\u5728\u5168\u5c40\u8def\u7531\u6dfb\u52a0\u914d\u7f6e from django.urls import path, re_path from drf_yasg.views import get_schema_view from drf_yasg import openapi # from rest_framework import permissions schema_view = get_schema_view( openapi.Info( title=\"Snippets API\", default_version='v1', description=\"Test description\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"contact@snippets.local\"), license=openapi.License(name=\"BSD License\"), ), public=True, # permission_classes=(permissions.AllowAny,), ) urlpatterns = [ ... re_path(r\"swagger(?P<format>\\.json|\\.yaml)$\", schema_view.without_ui( cache_timeout=0), name=\"schema-json\"), path(\"swagger/\", schema_view.with_ui(\"swagger\", cache_timeout=0), name=\"schema-swagger-ui\"), path(\"redoc/\", schema_view.with_ui(\"redoc\", cache_timeout=0), name=\"schema-redoc\"), ] \u5341\u516d\u3001\u521b\u5efa\u5e8f\u5217\u5316\u5668\u7c7b 1\u3001\u4ec0\u4e48\u60c5\u51b5\u4f7f\u7528ModelSerializer\uff1f \u5982\u679c\u6d89\u53ca\u5230ORM\u4e2d\u6a21\u578b\u7c7b\uff08\u64cd\u4f5c\u7684\u662f\u6a21\u578b\u7c7b\u4e2d\u7684\u6570\u636e\uff09 2\u3001\u4ec0\u4e48\u60c5\u51b5\u4f7f\u7528Serializer\uff1f \u5982\u679c\u672a\u6d89\u53ca\u5230ORM\u4e2d\u6a21\u578b\u7c7b \u7edd\u5927\u591a\u6570\u6d89\u53ca\u7684\u5b57\u6bb5\u90fd\u4e0d\u662f\u6a21\u578b\u7c7b\u4e2d\u5b57\u6bb5 \u5341\u4e03\u3001\u540c\u4e00\u4e2a\u7c7b\u89c6\u56fe\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u7c7b \u91cd\u5199GenericAPIView\u4e2d\u7684get_serializer_class\u65b9\u6cd5 \u901a\u8fc7action\u5224\u65ad\u8bbf\u95ee\u7684\u8def\u5f84\uff0c\u7136\u540e\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u7c7b @action(methods=['get'], detail=False, url_path='names', url_name='mm') def names(self, request, *args, **kwargs): # queryset = self.get_queryset() # # names = [{'id': pro.id, 'name': pro.name} for pro in queryset] # serializer = ProjectNamesModelSerializer(instance=queryset, many=True) # return Response(data=serializer.data, status=status.HTTP_200_OK) return self.list(request, *args, **kwargs) def get_serializer_class(self): return ProjectNamesModelSerializer if self.action == \"names\" else self.serializer_class \u95ee\u9898\uff1a\u5982\u679c\u4e3b\u5e8f\u5217\u5316\u914d\u7f6e\u4e86\u5206\u9875\u3001\u8fc7\u6ee4\u529f\u80fd\uff0c\u90a3\u4e48\u5728names\u4e2d\u4e0d\u60f3\u4f7f\u7528\uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u91cd\u5199GenericAPIView\u4e2d\u7684filter_queryset\u65b9\u6cd5\u548cpaginate_queryset\u65b9\u6cd5 \u901a\u8fc7action\u5224\u65ad\u8bbf\u95ee\u7684\u8def\u5f84\uff0c\u7136\u540e\u4f7f\u7528\u4e0d\u540c\u7684queryset def filter_queryset(self, queryset): return self.queryset if self.action == \"names\" else super().filter_queryset(queryset) def paginate_queryset(self, queryset): return None if self.action == \"names\" else super().paginate_queryset(queryset) \u5341\u516b\u3001\u7c7b\u89c6\u56fe\u7684\u8bbe\u8ba1\u539f\u5219 \u7c7b\u89c6\u56fe\u5c3d\u91cf\u7b80\u5316 \u6839\u636e\u9700\u6c42\u9009\u62e9\u76f8\u5e94\u7684\u7236\u7c7b\u89c6\u56fe \u5982\u679cDRF\u4e2d\u7684\u7c7b\u89c6\u56fe\u6709\u63d0\u4f9b\u76f8\u5e94\u7684\u903b\u8f91\uff0c\u90a3\u4e48\u76f4\u63a5\u4f7f\u7528\u7236\u7c7b\u4f7f\u7528\u7684 \u5982\u679cDRF\u4e2d\u7684\u7c7b\u89c6\u56fe\uff0c\u7edd\u5927\u591a\u6570\u9700\u6c42\u90fd\u80fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u76f4\u63a5\u91cd\u5199\u7236\u7c7b\u7684\u5b9e\u73b0 \u5982\u679cDRF\u4e2d\u7684\u7c7b\u89c6\u56fe\u5b8c\u5168\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u4e48\u76f4\u63a5\u81ea\u5b9a\u4e49 \u5341\u4e5d\u3001\u3001\u8ba4\u8bc1\u548c\u6388\u6743 \u4ec0\u4e48\u662f\u8ba4\u8bc1\uff1f \u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u80fd\u83b7\u5f97\u6743\u9650 \u4ec0\u4e48\u662f\u6388\u6743\uff1f \u901a\u8fc7\u8ba4\u8bc1\u540e\uff0c\u80fd\u5177\u5907\u54ea\u4e9b\u6743\u9650 \u4f7f\u7528Session\u4f1a\u8bdd 1\u3001\u6307\u5b9a\u4f7f\u7528\u8ba4\u8bc1\u7c7b\uff08setting.py\uff09 # \u6307\u5b9a\u4f7f\u7528\u8ba4\u8bc1\u7c7b # \u9ed8\u8ba4DRF\u6846\u67b6\u4f7f\u7528\u7684\u8ba4\u8bc1\u7c7b\u4e3asession\u4f1a\u8bdd\u8ba4\u8bc1 'DEFAULT_AUTHENTICATION_CLASSES': [ # \u6307\u5b9asession\u4f1a\u8bdd\u8ba4\u8bc1\u7c7b 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication' ], 2\u3001\u6307\u5b9a\u4f7f\u7528\u6743\u9650\u7c7b # \u6307\u5b9a\u4f7f\u7528\u6743\u9650\u7c7b # \u9ed8\u8ba4DRF\u6846\u67b6\u4f7f\u7528\u7684\u6743\u9650\u7c7b\u4e3aAllowAny\uff0c\u5177\u5907\u6240\u6709\u6743\u9650 'DEFAULT_PERMISSION_CLASSES': [ # 'rest_framework.permissions.AllowAny', # \u6307\u5b9aDRF\u4e2d\u63d0\u4f9b\u7684IsAuthenticated\u6743\u9650\u7c7b\uff0c\u53ea\u8981\u767b\u5f55\u5c31\u5177\u5907\u6240\u6709\u6743\u9650\uff0c\u5982\u679c\u4e0d\u767b\u5f55\u4e0d\u5177\u5907\u6743\u9650 # \u53ef\u4ee5\u4f7f\u7528 python manage.py createsuperuser \u521b\u5efa\u8d85\u7ea7\u7ba1\u7406\u5458 'rest_framework.permissions.IsAuthenticated' ], 3\u3001\u6dfb\u52a0\u5168\u5c40\u8def\u7531 urlpatterns = [ ... path(\"api/\",include(\"rest_framework.urls\")) ] 4\u3001\u90e8\u5206\u89c6\u56fe\u624d\u9700\u8981\u6dfb\u52a0\u6743\u9650\uff0c\u53ef\u4ee5\u5728\u7c7b\u89c6\u56fe\u6307\u5b9a\u4f7f\u7528\u7684\u6743\u9650\u7c7b\uff0c\u4f18\u5148\u7ea7\u5927\u4e8e\u5168\u5c40\u914d\u7f6e from rest_framework import permissions class ProjectViewSet(viewsets.ModelViewSet): queryset = Project.objects.all() serializer_class = ProjectModelSerializer # \u6307\u5b9a\u4f7f\u7528\u7684\u6743\u9650\u7c7b permission_classes = [permissions.IsAuthenticated] 5\u3001DRF\u81ea\u5e26\u7684\u6743\u9650 AllowAny IsAuthenticated IsAdminUser IsAuthenticatedOrReadOnly \u4f7f\u7528JWT(Json Web Token)\u8ba4\u8bc1 \u6700\u5e38\u7528\u7684\u8ba4\u8bc1\u673a\u5236 Session\u8ba4\u8bc1 Token\u8ba4\u8bc1 Session\u8ba4\u8bc1 \u4fdd\u6301\u5728\u670d\u52a1\u7aef\uff0c\u589e\u52a0\u670d\u52a1\u5668\u5f00\u9500 \u5206\u5e03\u5f0f\u67b6\u6784\u4e2d\uff0c\u96be\u4ee5\u7ef4\u6301Session\u4f1a\u8bdd\u540c\u6b65 CSRF\u653b\u51fb\u98ce\u9669 Token\u8ba4\u8bc1 \u4fdd\u5b58\u5728\u5ba2\u6237\u7aef \u8de8\u8bed\u8a00\u3001\u8de8\u5e73\u53f0 \u62d3\u5c55\u6027\u5f3a \u9274\u6743\u6027\u80fd\u9ad8 JWT \u7531\u4e09\u90e8\u5206\u7ec4\u6210 header\u3001playload\u3001signature header \u58f0\u660e\u7c7b\u578b \u58f0\u660e\u52a0\u5bc6\u7b97\u6cd5\uff0c\u9ed8\u8ba4\u4e3aHs256 base64\u52a0\u5bc6\uff0c\u53ef\u4ee5\u89e3\u5bc6 playload \u5b58\u653e\u8fc7\u671f\u65f6\u95f4\u3001\u7b7e\u53d1\u7528\u6237\u7b49 \u53ef\u4ee5\u6dfb\u52a0\u7528\u6237\u7684\u975e\u654f\u611f\u4fe1\u606f base64\u52a0\u5bc6\uff0c\u53ef\u4ee5\u89e3\u5bc6 signature \u7531\u4e09\u90e8\u5206\u7ec4\u6210 \u4f7f\u7528base64\u52a0\u5bc6\u4e4b\u540e\u7684header + . + \u4f7f\u7528base64\u52a0\u5bc6\u4e4b\u540e\u7684playload + \u4f7f\u7528HS256\u7b97\u6cd5\u52a0\u5bc6\uff0c\u540c\u65f6secret\u52a0\u76d0\u5904\u7406 \u5b89\u88c5djangorestframework-jwt pip install djangorestframework-jwt \u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u6dfb\u52a0jwt\u8ba4\u8bc1\u7c7b ```python 'DEFAULT_AUTHENTICATION_CLASSES': [ # \u6307\u5b9a\u4f7f\u7528JWT Token\u8ba4\u8bc1 'rest_framework_jwt.authentication.JSONWebTokenAuthentication' # \u6307\u5b9asession\u4f1a\u8bdd\u8ba4\u8bc1\u7c7b 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication' ], #### \u6dfb\u52a0users\u6a21\u5757\uff0c\u6307\u5b9a\u8def\u7531 ```python from rest_framework_jwt.views import obtain_jwt_token urlpatterns = [ path(r\"login/\",obtain_jwt_token) ] \u66f4\u6539\u767b\u5f55\u540e\u8fd4\u56de\u7684\u6570\u636e 1.\u91cd\u5199jwt_response_payload_handler def jwt_response_payload_handler(token, user=None, request=None): return { 'token': token, 'id': user.id, 'username': user.username } 2.\u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u66f4\u6539JWT_AUTH\u914d\u7f6e \u53ef\u4ee5\u5728\u5168\u5c40\u914d\u7f6esettings.py\u4e2d\u6dfb\u52a0JWT_AUTH\uff0c\u91cd\u5199JWT\u76f8\u5173\u53c2\u6570 JWT_AUTH_HEADER_PREFIX \u6307\u5b9aTOKEN\u8ba4\u8bc1\u65f6\uff0c\u524d\u7aef\u8bf7\u6c42\u5934\u627e\u90a3\u4e2aTOKEN\u8ba4\u8bc1\u503c\u5f97\u524d\u7f00 \u524d\u7aef\u9700\u8981\u5728\u8bf7\u6c42\u5934\u4e2d\u4f20\u9012key\u4e3aAuthorization\uff0cvalue\u4e3a\u524d\u7f00 token\u503c\uff0c\u9ed8\u8ba4\u524d\u7f00\u4e3aJWT JWT_AUTH = { 'JWT_RESPONSE_PAYLOAD_HANDLER': 'utils.jwt_response_payload_handler.jwt_response_payload_handler', } \u6307\u5b9atoken\u751f\u6210\u7684\u8fc7\u671f\u65f6\u95f4 # \u6307\u5b9a\u751f\u6210\u7684TOKEN\u8fc7\u671f\u65f6\u95f4 \"JWT_EXPIRATION_DELTA\": datetime.timedelta(days=1) \u4e8c\u5341\u3001\u5982\u4f55\u4f7f\u7528Django\u81ea\u5e26\u7684\u6a21\u578b\u7c7b \u76f4\u63a5\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5bf9\u81ea\u5e26\u7684\u6a21\u578b\u7c7b\u8fdb\u884c\u5e8f\u5217\u5316\u5373\u53ef from rest_framework import serializers from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): class Meta: model = User fields = (\"id\", \"username\", \"email\") \u4e8c\u5341\u4e00\u3001\u4f7f\u7528apps\u7edf\u4e00\u7ba1\u7406\u5b50\u5e94\u7528 sys.path\u4fdd\u5b58\u4e86Python\u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84 \u4e3a\u4e86\u7b80\u5316\u5b57\u5e94\u7528\u7684\u6ce8\u518c\uff0c\u53ef\u4ee5\u5c06\u5b50\u5e94\u7528\u6240\u5728\u76ee\u5f55\uff08apps\uff09\u52a0\u5165\u5230\u6a21\u5757\u641c\u7d22\u8def\u5f84\u4e2d import sys sys.path.insert(0, os.path.join(BASE_DIR, \"apps\")) \u4e8c\u5341\u4e8c\u3001\u5f00\u542f\u8de8\u57df 1.\u5b89\u88c5django-cors-headers pip install django-cors-headers 2.\u5c06corsheaders\u6dfb\u52a0\u5230settings.py\u4e2d\u7684INSTALLED_APPS\u4e2d\uff0c\u5c3d\u91cf\u653e\u5728\u524d\u9762 INSTALLED_APPS = [ ... 'corsheaders', ... ] 3.\u6dfb\u52a0\u4e2d\u95f4\u4ef6 MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', # \u9700\u8981\u6dfb\u52a0CommonMiddleware\u4e2d\u95f4\u4ef6\u524d 'corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] 4.\u6dfb\u52a0\u767d\u540d\u5355 # \u6307\u5b9a\u6240\u6709\u57df\u540d\u90fd\u53ef\u4ee5\u8bbf\u95ee\u540e\u7aef\u63a5\u53e3\uff0c\u9ed8\u8ba4\u4e3aFalse CORS_ORIGIN_ALLOW_ALL = True 5.\u5141\u8bb8\u8de8\u57df\u65f6\u643a\u5e26Cookie\uff0c\u9ed8\u8ba4\u4e3aFalse CORS_ALLOW_CREDENTIALS = True","title":"Django REST framework"},{"location":"Django/003%20Django-DRF/#django-rest-framework","text":"","title":"Django REST framework"},{"location":"Django/003%20Django-DRF/#_1","text":"\u5728Django\u6846\u67b6\u57fa\u7840\u4e4b\u4e0a\uff0c\u8fdb\u884c\u4e8c\u6b21\u5f00\u53d1 \u7528\u4e8e\u6784\u5efaRestful API \u7b80\u79f0DRF\u6846\u67b6\u6216REST framework\u6846\u67b6","title":"\u4e00\u3001\u7b80\u4ecb"},{"location":"Django/003%20Django-DRF/#_2","text":"\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684Serializer\u5e8f\u5217\u5316\u5668\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u8fdb\u884c\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c \u63d0\u4f9b\u4e86\u6781\u4e3a\u4e30\u5bcc\u7684\u7c7b\u89c6\u56fe\u3001Mixin\u6269\u5c55\u7c7b\u3001ViewSet\u89c6\u56fe\u96c6 \u63d0\u4f9b\u4e86\u76f4\u89c2\u7684Web API\u754c\u9762 \u591a\u79cd\u8eab\u4efd\u8ba4\u8bc1\u548c\u6743\u9650\u8ba4\u8bc1 \u5f3a\u5927\u7684\u6392\u5e8f\u3001\u8fc7\u6ee4\u3001\u5206\u9875\u3001\u641c\u7d22\u3001\u9650\u6d41\u7b49\u529f\u80fd \u53ef\u6269\u5c55\u6027\uff0c\u63d2\u4ef6\u4e30\u5bcc","title":"\u4e8c\u3001\u7279\u6027"},{"location":"Django/003%20Django-DRF/#_3","text":"","title":"\u4e09\u3001\u5b89\u88c5&amp;\u914d\u7f6e"},{"location":"Django/003%20Django-DRF/#1","text":"pip install djangorestframework pip install markdown # Markdown support for the browsable API","title":"1.\u5b89\u88c5"},{"location":"Django/003%20Django-DRF/#2","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', # \u653e\u5728\u7cfb\u7edf\u5e94\u7528\u540e # \u6ce8\u518c\u5b50\u5e94\u7528 'projects', 'interfaces', ]","title":"2.\u914d\u7f6e"},{"location":"Django/003%20Django-DRF/#_4","text":"","title":"\u56db\u3001\u5e8f\u5217\u5316\u5668"},{"location":"Django/003%20Django-DRF/#1_1","text":"\u5fc5\u987b\u5f97\u7ee7\u627f Serializer \u7c7b\u6216\u5176\u5b50\u7c7b \u5b9a\u4e49\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d\u79f0\u2018\u5fc5\u987b\u2019\u4e0e\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d\u4fdd\u6301\u4e00\u81f4 \u9ed8\u8ba4\u5b9a\u4e49\u54ea\u4e9b\u5b57\u6bb5\uff0c\u90a3\u4e48\u54ea\u4e9b\u5b57\u6bb5\u5c31\u4f1a\u5e8f\u5217\u5316\u8f93\u51fa\uff0c\u540c\u65f6\u8fd9\u4e9b\u5b57\u6bb5\u4e5f\u5fc5\u987b\u8f93\u5165\uff08\u4f20\u9012\uff09 \u5e8f\u5217\u5316\u5668\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\u5fc5\u987b\u4e3aField\u5b50\u7c7b CharField \u5b57\u7b26\u4e32\u7c7b\u578b IntegerField int\u7c7b\u578b BooleanField \u5e03\u5c14\u7c7b\u578b DateTimeField \u65e5\u671f\u7c7b\u578b from rest_framework import serializers class ProjectSerializer(serializers.Serializer): id = serializers.IntegerField() name = serializers.CharField() leader = serializers.CharField()","title":"1. \u5b9a\u4e49\u5e8f\u5217\u5316\u5668\u7c7b"},{"location":"Django/003%20Django-DRF/#2_1","text":"a. \u5982\u679c\u9700\u8981\u5c06\u4e00\u4e2a\u67e5\u8be2\u96c6\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5fc5\u987b\u5f97\u6307\u5b9amany=True b. \u9700\u8981\u7ed9instance\u4f20\u53c2 c. \u5982\u679c\u5c06\u4e00\u4e2a\u6a21\u578b\u5bf9\u8c61\u5e8f\u5217\u5316\uff0c\u90a3\u4e48\u65e0\u9700\u6307\u5b9amany=True d. \u4f7f\u7528serializer\u4e2d\u7684data\u5c5e\u6027\uff0c\u53ef\u4ee5\u83b7\u53d6\u5e8f\u5217\u5316\u8f93\u51fa\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 pro = Projects.objects.all() serializer = serializers.ProjectSerializer(instance=pro, many=True) data = serializer.data pro = Projects.objects.filter(pk=pk).first() serializer = serializers.ProjectSerializer(instance=pro) data = serializer.data","title":"2. \u4f7f\u7528\u5e8f\u5217\u5316\u5668"},{"location":"Django/003%20Django-DRF/#3","text":"label\u548chelp_text\uff0c\u4e0e\u6a21\u578b\u7c7b\u4e2d\u5b57\u6bb5\u7684verbose_name\u548chelp_text\u4e00\u81f4 CharField\u53ef\u4ee5\u6307\u5b9a min_length\u53c2\u6570\uff0c\u4e3a\u6700\u5c0f\u957f\u5ea6 max_length\u53c2\u6570\uff0c\u4e3a\u6700\u5927\u957f\u5ea6 trim_whitespace\u53c2\u6570\uff0c\u662f\u5426\u622a\u65ad\u7a7a\u767d\u5b57\u7b26 IntegerField\u53ef\u4ee5\u6307\u5b9a min_value\u53c2\u6570\uff0c\u4e3a\u6700\u5c0f\u503c max_value\u53c2\u6570\uff0c\u4e3a\u6700\u5927\u503c \u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u8bbe\u7f6ewrite_only=True\uff0c\u8be5\u5b57\u6bb5\u5fc5\u987b\u5f97\u8f93\u5165\uff08\u53cd\u5e8f\u5217\u5316\u8f93\u5165\uff09\uff0c\u4f46\u65e0\u9700\u8f93\u51fa\uff08\u5e8f\u5217\u5316\u8f93\u51fa\uff09 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eread_only=True\uff0c\u8be5\u5b57\u6bb5\u65e0\u9700\u8f93\u5165\uff08\u53cd\u5e8f\u5217\u5316\u8f93\u5165\uff09\uff0c\u4f46\u5fc5\u987b\u5f97\u8f93\u51fa\uff08\u5e8f\u5217\u5316\u8f93\u51fa\uff09\uff0c\u4e0d\u80fd\u4e0ewrite_only=True\u4e00\u8d77\u7528 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eallow_null=True\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u4f20null\u503c \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eallow_blank=True\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5 \u4f20\u7a7a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4e0eallow_null=True\u4e00\u8d77\u7528 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6erequired=False\uff0c\u8be5\u5b57\u6bb5\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u65f6\uff0c\u53ef\u4ee5\u4e0d\u4f20\u9012 \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6edefault\uff0c\u4e3a\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u4f1a\u5c06\u9ed8\u8ba4\u503c\u4f5c\u4e3a\u53cd\u5e8f\u5217\u5316\u7684\u8f93\u5165\u503c \u5e8f\u5217\u5316\u5b57\u6bb5\u8bbe\u7f6eerror_messages\uff0c\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u9519\u8bef\u4fe1\u606f \u7c7b\u578b\u4e3a\u5b57\u5178 key\u4e3a\u6821\u9a8c\u53c2\u6570 value\u4e3a\u9519\u8bef\u4fe1\u606f DateTimeField\u53ef\u4ee5\u6307\u5b9a format=\"%Y-%m-%d %H:%M:%S\" \u683c\u5f0f\u5316\u8f93\u51fa\u65e5\u671f format=\"%Y\u5e74%m\u6708%d\u65e5 %H:%M:%S\"","title":"3.\u5e8f\u5217\u5316\u5668\u6570\u636e\u6821\u9a8c\u53c2\u6570"},{"location":"Django/003%20Django-DRF/#4","text":"\u5728\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u7ed9data\u4f20\u53c2\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u6821\u9a8c data\u5fc5\u987b\u5f97\u4f20\u9012Python\u4e2d\u7684\u57fa\u672c\u7c7b\u578b\uff08\u5b57\u5178\u6216\u8005\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868\uff09 \u5fc5\u987b\u5f97\u8c03\u7528 is_valid() \u65b9\u6cd5\uff0c\u624d\u4f1a\u5f00\u59cb\u8fdb\u884c\u6821\u9a8c\uff08\u6821\u9a8c\u7684\u5f00\u5173\uff09 \u5982\u679c\u6821\u9a8c\u901a\u8fc7\uff0c\u4f1a\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse .errors \u5c5e\u6027\u7528\u4e8e\u83b7\u53d6\u9519\u8bef\u63d0\u793a\u4fe1\u606f\uff0c\u5f80\u5f80\u4e3a\u5b57\u5178\u7c7b\u578b\uff0c\u5fc5\u987b\u5f97\u5148\u8c03\u7528is_valid\u65b9\u6cd5\u624d\u884c is_valid(raise_exception=True) \uff0c\u5f53\u68c0\u9a8c\u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u629b\u51fa\u5f02\u5e38\u4fe1\u606f \u4f7f\u7528\u5e8f\u5217\u5316\u5668\u5bf9\u8c61 .validated_data \u5c5e\u6027\uff0c\u83b7\u53d6\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e .validated_data \u5c5e\u6027\uff0c\u5fc5\u987b\u6821\u9a8c\uff08\u8c03\u7528is_valid\u65b9\u6cd5\uff09\u4e4b\u540e\uff0c\u624d\u80fd\u83b7\u53d6 serializer = serializers.ProjectSerializer(data=data) if not serializer.is_valid(): err = serializer.errors return JsonResponse(data=err, json_dumps_params={\"ensure_ascii\": False}, status=400)","title":"4.\u5e8f\u5217\u5316\u5668\u6570\u636e\u6821\u9a8c"},{"location":"Django/003%20Django-DRF/#5","text":"\u53ef\u4ee5\u5b9e\u73b0\u5e8f\u5217\u5316\u8f93\u51fa \u53ef\u4ee5\u5b9e\u73b0\u53cd\u5e8f\u5217\u5316\u8f93\u5165 \u6570\u636e\u6821\u9a8c \u64cd\u4f5c\u6570\u636e","title":"5.\u5e8f\u5217\u5316\u5668\u6709\u54ea\u4e9b\u4f5c\u7528\uff1f"},{"location":"Django/003%20Django-DRF/#6","text":"","title":"6.\u5173\u8054\u5b57\u6bb5\u5e8f\u5217\u5316\u5668"},{"location":"Django/003%20Django-DRF/#1manytrue","text":"","title":"1\uff09\u7236\u8868\u83b7\u53d6\u4ece\u8868\u7684\u6570\u636e\uff08\u5fc5\u987b\u5f97\u6307\u5b9amany=True\uff0c\u4e3a\u5217\u8868\u7684\u65f6\u5019\u5fc5\u987b\u6307\u5b9a\uff09"},{"location":"Django/003%20Django-DRF/#1-_set","text":"interfaces_set = serializers.PrimaryKeyRelatedField(label='\u6240\u5c5e\u63a5\u53e3\u7684id', help_text='\u6240\u5c5e\u63a5\u53e3\u7684id', read_only=True, many=True)","title":"\u2460 \u9ed8\u8ba4\u4f7f\u7528\u4ece\u8868\u6a21\u578b\u7c7b\u540d\u5c0f\u5199_set"},{"location":"Django/003%20Django-DRF/#2-elated_name","text":"projects = models.ForeignKey('projects.Projects', on_delete=models.CASCADE,related_name=\"interfaces\") \u5728\u83b7\u53d6\u4ece\u8868\u6570\u636e\u65f6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201cinterfaces\u201d interfaces = serializers.PrimaryKeyRelatedField(label='\u6240\u5c5e\u63a5\u53e3\u7684id', help_text='\u6240\u5c5e\u63a5\u53e3\u7684id', read_only=True, many=True)","title":"\u2461 \u81ea\u5b9a\u4e49\u540d\u79f0\uff08\u5728\u4ece\u8868\u6a21\u578b\u7c7b\u4e2d\u5b9a\u4e49\u5916\u952e\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9aelated_name\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u7236\u8868\u6a21\u578b\u5bf9\u8c61\u83b7\u53d6\u4ece\u8868\u6570\u636e\u65f6\uff0c\u4f7f\u7528\u7684\u5c5e\u6027\u540d\u79f0\uff09"},{"location":"Django/003%20Django-DRF/#2_2","text":"PrimaryKeyRelatedField\uff0c\u6307\u5b9a\u4ece\u8868\u7684\u4e3b\u952eid\u503c PrimaryKeyRelatedField\u6307\u5b9aread_only=True\uff0c\u90a3\u4e48\u53ea\u8f93\u51fa\u4ece\u8868\u5916\u952eid \u5982\u679c\u672a\u6307\u5b9aread_only=True\u6216\u8005required=False\uff0c\u90a3\u4e48\u5fc5\u987b\u5f97\u6307\u5b9aqueryset\uff08\u6307\u5b9a\u68c0\u9a8c\u65f6\u4f7f\u7528\u7684\u67e5\u8be2\u96c6\u5bf9\u8c61\uff09 interfaces = serializers.PrimaryKeyRelatedField(label='\u6240\u5c5e\u63a5\u53e3\u7684id', help_text='\u6240\u5c5e\u63a5\u53e3\u7684id', many=True, queryset=Interfaces.objects.all()) StringRelatedField\uff0c\u7528\u4e8e\u5728\u5e8f\u5217\u5316\u8f93\u51fa\u65f6\uff0c\u8c03\u7528\u5173\u8054\u6a21\u578b\u7c7b\u4e2d\u7684__str__\u65b9\u6cd5 StringRelatedField \u9ed8\u8ba4\u6dfb\u52a0\u4e86\u8ba9read_only=True\uff0c\u53ea\u7528\u4e8e\u5e8f\u5217\u5316\u8f93\u51fa\uff0c\u800c\u4e0d\u4f1a\u53cd\u5e8f\u5217\u5316\u8f93\u5165 interfaces =serializers.StringRelatedField(many=True) SlugRelatedField\uff0c\u7528\u4e8e\u5728\u5e8f\u5217\u5316\u8f93\u51fa\u6216\u8005\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u662f\uff0c\u6307\u5b9a\u4f7f\u7528\u7684\u5173\u8054\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d \u5982\u679c\u672a\u6307\u5b9aread_only=True\u6216\u8005required=False\uff0c\u90a3\u4e48\u5fc5\u987b\u5f97\u6307\u5b9aqueryset\uff08\u6307\u5b9a\u68c0\u9a8c\u65f6\u4f7f\u7528\u7684\u67e5\u8be2\u96c6\u5bf9\u8c61\uff09 \u5982\u679c\u9700\u8981\u53cd\u5e8f\u5217\u5316\u8f93\u5165\uff0c\u90a3\u4e48slug_field\u5fc5\u987b\u5f97\u6307\u5b9a\u62e5\u6709\u552f\u4e00\u7ea6\u675f\u7684\u5b57\u6bb5\u540d interfaces =serializers.SlugRelatedField(many=True,read_only=True,slug_field=\"tester\")","title":"2\uff09\u5728\u7236\u8868\u5e8f\u5217\u5316\u5668\u4e2d\uff0c\u53ef\u4ee5\u624b\u52a8\u7f6e\u9876\u5173\u8054\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u7c7b\u578b"},{"location":"Django/003%20Django-DRF/#7","text":"","title":"7. \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668"},{"location":"Django/003%20Django-DRF/#1validators","text":"validators\u5fc5\u987b\u5f97\u6307\u5b9a\u4e3a\u5e8f\u5217\u7c7b\u578b\uff08\u5f80\u5f80\u4e3a\u5217\u8868\uff09\uff0c\u5728\u5217\u8868\u4e2d\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u68c0\u9a8c\u5668 UniqueValidator\u6821\u9a8c\u5668\u8fdb\u884c\u552f\u4e00\u7ea6\u675f\u7684\u6821\u9a8c\uff0c\u5fc5\u987b\u5f97\u6307\u5b9aqueryset\u53c2\u6570\uff0c\u4f7f\u7528message\u6307\u5b9a\u5177\u4f53\u62a5\u9519\u4fe1\u606f from rest_framework.validators import UniqueValidator name = serializers.CharField( label='\u9879\u76ee\u540d\u79f0', help_text='\u9879\u76ee\u540d\u79f0', write_only=True, max_length=10, min_length=3, error_messages={\"min_length\": \"\u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d\"}, validators=[UniqueValidator(queryset=Projects.objects.all(),message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\")])","title":"1\uff09\u53ef\u4ee5\u5728\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u4e0a\u4f7f\u7528validators\u6307\u5b9a\u81ea\u5b9a\u4e49\u6821\u9a8c\u5668"},{"location":"Django/003%20Django-DRF/#2_3","text":"","title":"2\uff09\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6821\u9a8c\u51fd\u6570\uff0c\u5bf9\u67d0\u4e2a\u5b57\u6bb5\u8fdb\u884c\u8fdb\u4e00\u6b65\u590d\u6742\u7684\u6821\u9a8c"},{"location":"Django/003%20Django-DRF/#1_2","text":"value\uff1a\u524d\u7aef\u4f20\u9012\u7684\u9879\u76ee\u540d\u79f0 \u5982\u679c\u6821\u9a8c\u5931\u8d25\uff0c\u5fc5\u987b\u5f97\u8fd4\u56deValidationError\u5f02\u5e38\u5bf9\u8c61 \u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f def is_contain_keyword(value): if '\u9879\u76ee' not in value: raise serializers.ValidationError(\"\u9879\u76ee\u4e2d\u5fc5\u987b\u5305\u542b\u2018\u9879\u76ee\u2019\u5173\u952e\u5b57\")","title":"\u2460 \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u51fd\u6570"},{"location":"Django/003%20Django-DRF/#2-validators","text":"name = serializers.CharField( label='\u9879\u76ee\u540d\u79f0', help_text='\u9879\u76ee\u540d\u79f0', write_only=True, max_length=10, min_length=3, error_messages={\"min_length\": \"\u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d\"}, validators=[UniqueValidator(queryset=Projects.objects.all(),message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\"),is_contain_keyword])","title":"\u2461 \u81ea\u5b9a\u4e49\u6821\u9a8c\u5668\u51fd\u6570\u4f7f\u7528\uff0c\u76f4\u63a5\u5c06\u51fd\u6570\u540d\u653e\u7f6e\u5230validators\u5217\u8868\u4e2d"},{"location":"Django/003%20Django-DRF/#3_1","text":"\u5355\u5b57\u6bb5\u68c0\u9a8c\u65b9\u6cd5\u7684\u540d\u79f0\uff0c\u5fc5\u987b\u4ee5 validate_ \u4f5c\u4e3a\u524d\u7f00 \u63a5\u6536\u7684\u53c2\u6570\u4e3a\u524d\u7aef\u4f20\u9012\u7684\u503c \u5982\u679c\u5728\u5b57\u6bb5\u5b9a\u4e49\u65f6\uff0c\u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8c03\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u5355\u5b57\u6bb5\u7684\u68c0\u9a8c\u65b9\u6cd5 \u5982\u679c\u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u5fc5\u987b\u5f97\u8fd4\u56deValidationError\u5f02\u5e38\u5bf9\u8c61 \u5982\u679c\u6821\u9a8c\u901a\u8fc7\u3002\u90a3\u4e48\u4e00\u822c\u9700\u8981\u5c06\u6821\u9a8c\u4e4b\u540e\u7684\u503c\u8fd4\u56de def validate_name(self, value): if not value.endswith('\u9879\u76ee'): raise ValidationError(\"\u9879\u76ee\u540d\u79f0\u4e2d\u5fc5\u987b\u4ee5'\u9879\u76ee'\u7ed3\u5c3e\") return value","title":"3\uff09\u53ef\u4ee5\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u5b9a\u4e49\u5bf9\u5355\u5b57\u6bb5\u8fdb\u884c\u68c0\u9a8c\u7684\u65b9\u6cd5"},{"location":"Django/003%20Django-DRF/#4validate","text":"\u63a5\u6536\u7684\u53c2\u6570\u4e3a\u524d\u7aef\u4f20\u9012\u7684\u6240\u6709\u53c2\u6570\uff08\u4f46\u5b57\u6bb5\u5747\u6821\u9a8c\u901a\u8fc7\uff09 \u5982\u679c\u5728\u5355\u5b57\u6bb5\u7684\u68c0\u9a8c\u65b9\u6cd5\u4e2d\u68c0\u9a8c\u4e0d\u901a\u8fc7\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8c03\u7528 validate \u5982\u679c\u6821\u9a8c\u4e0d\u901a\u8fc7\uff0c\u5fc5\u987b\u5f97\u8fd4\u56de ValidationError \u5f02\u5e38\u5bf9\u8c61 \u5982\u679c\u6821\u9a8c\u901a\u8fc7\u3002\u90a3\u4e48\u4e00\u822c\u9700\u8981\u5c06\u6821\u9a8c\u4e4b\u540e\u7684\u6570\u636e\u8fd4\u56de def validate(self, attrs): name = attrs.get(\"name\") leader = attrs.get(\"leader\") if len(name+leader)>10: raise serializers.ValidationError(\"\u9879\u76ee\u540d\u79f0\u548c\u8d1f\u8d23\u4eba\u76f8\u52a0\u4e0d\u80fd\u5927\u4e8e10\") return attrs","title":"4\uff09validate\u7528\u4e8e\u591a\u4e2a\u5b57\u6bb5\u7684\u8054\u5408\u6821\u9a8c"},{"location":"Django/003%20Django-DRF/#5to_internal_value","text":"def to_internal_value(self, data): return super().to_internal_value(data)","title":"5\uff09to_internal_value \u7528\u4e8e\u5e8f\u5217\u5316\u5668\u7c7b\u8fdb\u884c\u6821\u9a8c\u65f6\uff0c\u9996\u5148\u4f1a\u8c03\u7528\uff0c\u5f00\u59cb\u8fdb\u884c\u6821\u9a8c"},{"location":"Django/003%20Django-DRF/#6to_representation","text":"def to_representation(self, instance): return super().to_representation(instance)","title":"6\uff09to_representation \u7528\u4e8e\u53cd\u5e8f\u5217\u5316\u8f93\u51fa\u65f6\u8c03\u7528"},{"location":"Django/003%20Django-DRF/#7_1","text":"class OneInterfaceSerializer(serializers.Serializer): id = serializers.IntegerField() name = serializers.CharField() tester = serializers.CharField() -------------------------------------------------------------- interfaces = OneInterfaceSerializer(many=True, read_only=True)","title":"7\uff09\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684\u5b57\u6bb5"},{"location":"Django/003%20Django-DRF/#8","text":"\u8c03\u7528\u7236\u7c7b\u7684to_internal_value\u65b9\u6cd5 \u68c0\u9a8c\u5b57\u6bb5\u7c7b\u578b \u901a\u7528\u7684\u7ea6\u675f\u53c2\u6570\uff08min_length\u3001max_length\uff09 \u4f9d\u6b21\u6821\u9a8cvalidators\u4e2d\u6307\u5b9a\u7684\u6821\u9a8c\u89c4\u5219 \u8fdb\u5165\u5230\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u8c03\u7528\u5355\u5b57\u6bb5\u7684\u6821\u9a8c\u65b9\u6cd5\uff08\u524d\u63d0\u4e3a\u4e0a\u9762\u4e09\u4e2a\u6821\u9a8c\u5668\u90fd\u901a\u8fc7\uff0c\u624d\u4f1a\u6267\u884c\u8fd9\u4e00\u4e2a\u6821\u9a8c\u5668\uff09 \u7236\u7c7b\u7684to_internal_value\u65b9\u6cd5\u8c03\u7528\u7ed3\u675f \u8fdb\u5165\u5230\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u8c03\u7528\u591a\u5b57\u6bb5\u7684\u8054\u5408\u6821\u9a8c\u65b9\u6cd5\uff08validate\uff09","title":"8.\u67d0\u4e2a\u5b57\u6bb5\u7684\u68c0\u9a8c\u987a\u5e8f"},{"location":"Django/003%20Django-DRF/#createupdate","text":"","title":"\u4e94\u3001\u5e8f\u5217\u5316\u5668\u6570\u636e\u5e93\u64cd\u4f5c create\u548cupdate"},{"location":"Django/003%20Django-DRF/#save","text":"","title":"\u5e8f\u5217\u5316\u5668\u5bf9\u8c61save\u65b9\u6cd5"},{"location":"Django/003%20Django-DRF/#1data","text":"\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u4f1a\u8c03\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684create\u65b9\u6cd5\u8fdb\u884c\u6570\u636e\u521b\u5efa\u64cd\u4f5c","title":"1\uff09\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u4ec5\u4ec5\u53ea\u4f20data\u53c2\u6570"},{"location":"Django/003%20Django-DRF/#2datainstance","text":"\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u4f1a\u8c03\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684update\u65b9\u6cd5\u8fdb\u884c\u6570\u636e\u66f4\u65b0\u64cd\u4f5c","title":"2\uff09\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u540c\u65f6\u7ed9data\u548cinstance\u4f20\u53c2\u6570"},{"location":"Django/003%20Django-DRF/#create","text":"validated_data\u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 \u5fc5\u987b\u5f97\u5c06\u521b\u5efa\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de \u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88abvalidated_data\u63a5\u6536 \u53ef\u4ee5\u7ed9\u521b\u5efa\u7684\u6a21\u578b\u5bf9\u8c61\u6dfb\u52a0\u52a8\u6001\u5b57\u6bb5\uff0c\u5982\u679c\u8be5\u5b57\u6bb5\u6709\u5b9a\u4e49\u76f8\u5e94\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u5e76\u4e14\u5236\u5b9a\u8f93\u51fa\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5c31\u4f1a\u8f93\u51fa\u8be5\u503c def create(self, validated_data): \"\"\" 1.validated_data\u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 2.\u5fc5\u987b\u5f97\u5c06\u521b\u5efa\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de 3.\u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88abvalidated_data\u63a5\u6536 4.\u53ef\u4ee5\u7ed9\u521b\u5efa\u7684\u6a21\u578b\u5bf9\u8c61\u6dfb\u52a0\u52a8\u6001\u5b57\u6bb5\uff0c\u5982\u679c\u8be5\u5b57\u6bb5\u6709\u5b9a\u4e49\u76f8\u5e94\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u5e76\u4e14\u5236\u5b9a\u8f93\u51fa\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5c31\u4f1a\u8f93\u51fa\u8be5\u503c \"\"\" pro = Projects.objects.create(**validated_data) return pro --------------------------------------------------------- serializer = serializers.ProjectSerializer(data=data) serializer.save()","title":"create\u65b9\u6cd5"},{"location":"Django/003%20Django-DRF/#create_1","text":"\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u53ea\u4f20data\u53c2\u6570 \u5e8f\u5217\u5316\u5bf9\u8c61\u8c03\u7528is_valid()\u65b9\u6cd5 \u5e8f\u5217\u5316\u5bf9\u8c61.save()","title":"\u4ec0\u4e48\u65f6\u5019\u8c03\u7528create\u65b9\u6cd5?"},{"location":"Django/003%20Django-DRF/#update","text":"validated_data \u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 instance \u4e3a\u5f85\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61 \u5fc5\u987b\u5f97\u5c06\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de \u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88ab validated_data \u63a5\u6536 def update(self, instance, validated_data): \"\"\" 1.validated_data\u5f80\u5f80\u4e3a\u6821\u9a8c\u901a\u8fc7\u4e4b\u540e\u7684\u6570\u636e\uff08\u5b57\u5178\uff09 2.instance\u4e3a\u5f85\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61 3.\u5fc5\u987b\u5f97\u5c06\u66f4\u65b0\u7684\u6a21\u578b\u7c7b\u5bf9\u8c61\u8fd4\u56de 4.\u5728\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u8c03\u7528save\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u88abvalidated_data\u63a5\u6536 \"\"\" instance.name = validated_data.get(\"name\", instance.name) instance.leader = validated_data.get(\"leader\", instance.leader) instance.desc = validated_data.get(\"desc\", instance.desc) instance.save() return instance ------------------------------------------------------ qs = Project.objects.get(id=2) data = {\"leader\": \"eww\"} # \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u586b\u5b57\u6bb5\u7684\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 partial\u53c2\u6570\u6765\u5141\u8bb8\u90e8\u5206\u66f4\u65b0\u3002 serializer = ProjectSerializer( data=data, instance=qs, partial=True) if not serializer.is_valid(): err = serializer.errors return JsonResponse(data=err, json_dumps_params={\"ensure_ascii\": False}, status=400) serializer.save() return JsonResponse(data=serializer.data, safe=False)","title":"update\u65b9\u6cd5"},{"location":"Django/003%20Django-DRF/#create_2","text":"\u521b\u5efa\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u65f6\uff0c\u540c\u65f6\u4f20data\u4e0einstance\u53c2\u6570 \u5e8f\u5217\u5316\u5bf9\u8c61\u8c03\u7528is_valid()\u65b9\u6cd5 \u5e8f\u5217\u5316\u5bf9\u8c61.save()","title":"\u4ec0\u4e48\u65f6\u5019\u8c03\u7528create\u65b9\u6cd5?"},{"location":"Django/003%20Django-DRF/#modelserializer","text":"","title":"\u516d\u3001ModelSerializer \u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7c7b"},{"location":"Django/003%20Django-DRF/#_5","text":"\u53ef\u4ee5\u7ee7\u627fModelSerializer\uff0c\u6839\u636e\u6a21\u578b\u7c7b\u6765\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u7684\u5b57\u6bb5 \u5fc5\u987b\u5f97\u6307\u5b9amodel\u53c2\u6570\uff08\u6a21\u578b\u7c7b\uff09\uff0c\u7528\u4e8e\u6307\u5b9a\u4f7f\u7528\u7684\u6a21\u578b \u4f1a\u5b9e\u73b0create\u3001update\u65b9\u6cd5 \u4f1a\u7ed9\u4e3b\u952e\u5b57\u6bb5\u3001DataTimeField\u4e2d\u6307\u5b9aauto_now_add\u548cauto_now\u53c2\u6570\uff0c\u4f1a\u6dfb\u52a0read_only=True \u4f1a\u7ed9\u6709\u6307\u5b9adefault\u53c2\u6570\u7684\u5b57\u6bb5\uff0c\u6dfb\u52a0required=False \u4f1a\u7ed9\u6709\u6307\u5b9anull\u53c2\u6570\u7684\u5b57\u6bb5\uff0c\u6dfb\u52a0allow_null=True \u4f1a\u7ed9\u6709\u6307\u5b9ablank\u53c2\u6570\u7684\u5b57\u6bb5\uff0c\u6dfb\u52a0allow_blank=True fields\u6307\u5b9a\u6a21\u578b\u7c7b\u4e2d\u9700\u8981\u8fdb\u884c\u5e8f\u5217\u5316\u7684\u5b57\u6bb5 \" all \"\u4e3a\uff0c\u6a21\u578b\u7c7b\u4e2d\u6240\u6709\u7684\u5b57\u6bb5\u90fd\u5e8f\u5217\u5316\u64cd\u4f5c\u7684\u5b57\u6bb5 \u53ef\u4ee5\u6307\u5b9a\u6a21\u578b\u7c7b\u4e2d\u5e8f\u5217\u5316\u64cd\u4f5c\u7684\u5b57\u6bb5\uff0c\u9700\u8981\u5728\u5143\u7ec4\u4e2d\u6307\u5b9a exclude\u6307\u5b9a\u4e0d\u9700\u8981\u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c\u7684\u5b57\u6bb5 \u5982\u679c\u6307\u5b9a\u4e86\u6a21\u578b\u7c7b\u4e2d\u6ca1\u6709\u5b9a\u4e49\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u5fc5\u987b\u5728fields\u5143\u7ec4\u4e2d\u6307\u5b9a\uff0c\u5982\u679cfields\u4e3a\u201c all \u201d\u6216\u8005\u6709exclude\u7684\u9664\u5916 class ProjectModelSerializer(serializers.ModelSerializer): interfaces = OneInterfaceSerializer(many=True, read_only=True) token = serializers.CharField(read_only=True) class Meta: model = Projects # fields = '__all__' fields = ('id', 'name', 'leader', 'is_excute', 'interfaces', 'token') # exclude = ('create_time', 'update_time')","title":"\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7c7b"},{"location":"Django/003%20Django-DRF/#_6","text":"","title":"\u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u5e8f\u5217\u5316\u5b57\u6bb5\u6821\u9a8c\uff1f"},{"location":"Django/003%20Django-DRF/#_7","text":"a.\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u6a21\u578b\u7c7b\u4e2d\u7684\u5b57\u6bb5 b.\u91cd\u65b0\u5b9a\u4e49\u7684\u5b57\u6bb5\u4f1a\u8986\u76d6\u81ea\u52a8\u751f\u6210\u7684\u540c\u540d\u5b57\u6bb5 name = serializers.CharField( label='\u9879\u76ee\u540d\u79f0', help_text='\u9879\u76ee\u540d\u79f0', max_length=10, min_length=3, error_messages={\"min_length\": \"\u9879\u76ee\u540d\u79f0\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d\"}, validators=[UniqueValidator(queryset=Projects.objects.all(), message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\"), is_contain_keyword])","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Django/003%20Django-DRF/#_8","text":"a.\u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u7684extra_kwargs\u4e2d\u5bf9\u81ea\u52a8\u751f\u6210\u7684\u5e8f\u5217\u5316\u5b57\u6bb5\u8fdb\u884c\u4fee\u6539 b.\u5c06\u9700\u8981\u4fee\u6539\u7684\u5b57\u6bb5\u540d\u4f5c\u4e3akey\uff0c\u5177\u4f53\u4fee\u6539\u7684\u5185\u5bb9\u4f5c\u4e3avalue class Meta: model = Projects # fields = '__all__' fields = ('id', 'name', 'leader', 'is_excute') # exclude = ('create_time', 'update_time') extra_kwargs = { \"name\": { \"label\": \"\u9879\u76ee\u540d\u79f0\", \"max_length\": 10, \"error_messages\": { \"min_length\": '\u9879\u76ee\u540d\u4e0d\u80fd\u5c11\u4e8e\u4e09\u4f4d' }, \"validators\": [ UniqueValidator(queryset=Projects.objects.all(), message=\"\u9879\u76ee\u540d\u4e0d\u80fd\u91cd\u590d\"), is_contain_keyword ] } }","title":"\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Django/003%20Django-DRF/#read_onlytrue","text":"\u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u7684read_only_fields,\u7edf\u4e00\u6307\u5b9a\u9700\u8981\u6dfb\u52a0read_only=True\u7684\u5b57\u6bb5 class Meta: model = Projects # fields = '__all__' fields = ('id', 'name', 'leader', 'is_excute') # exclude = ('create_time', 'update_time') # \u53ef\u4ee5\u5728Meta\u5185\u90e8\u7c7b\u4e2d\u7684read_only_fields,\u7edf\u4e00\u6307\u5b9a\u9700\u8981\u6dfb\u52a0read_only=True\u7684\u5b57\u6bb5 read_only_fields = ('is_excute','desc','id')","title":"\u7edf\u4e00\u6307\u5b9a\u9700\u8981\u6dfb\u52a0read_only=True\u7684\u5b57\u6bb5"},{"location":"Django/003%20Django-DRF/#apiview","text":"","title":"\u4e03\u3001APIView"},{"location":"Django/003%20Django-DRF/#_9","text":"\u7ee7\u627fAPIView\u4e4b\u540e\uff0crequest\u4e3aRequest\u5bf9\u8c61 \u53ef\u4ee5\u6839\u636e\u524d\u7aef\u8bf7\u6c42\u5934\u4e2d\u4f20\u9012\u7684Content-Type\uff0c\u81ea\u52a8\u89e3\u6790\u53c2\u6570 \u7edf\u4e00\u4e86\u4e0d\u540c\u6570\u636e\u4e4b\u95f4\u6570\u636e\u89e3\u6790\u65b9\u5f0f \u524d\u7aef\u4f20\u9012\u7684www-form-urlencoded\u3001application/json\u3001form-data\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528request.data\u5c5e\u6027\u83b7\u53d6 \u524d\u7aef\u4f20\u9012\u7684\u67e5\u8be2\u5b57\u7b26\u521b\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7GET\u3001query_params\u83b7\u53d6 Request\u662f\u5bf9Django\u4e2dHTTPRequest\u7c7b\u8fdb\u884c\u4e86\u62d3\u5c55\uff0c\u517c\u5bb9HTTPRequest\u7c7b\u7684\u64cd\u4f5c\u65b9\u5f0f from rest_framework.response import Response from rest_framework.request import Request from rest_framework import status class ProjectView(APIView): def get(self, request: Request, id: int): pro = Project.objects.filter(id=id) serializer = ProjectModelSerializer(instance=pro, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK) def post(self, request: Request): # \u76f4\u63a5\u4f7f\u7528request.data\u83b7\u53d6\u4f20\u9012\u7684\u53c2\u6570 serializer = ProjectModelSerializer(data=request.data) # \u76f4\u63a5\u5728is_valid\u65b9\u6cd5\u4e2d\u6dfb\u52a0\u53c2\u6570raise_exception=True\uff0c\u81ea\u52a8\u629b\u51fa\u68c0\u9a8c\u5f02\u5e38 serializer.is_valid(raise_exception=True) serializer.save() # \u4f7f\u7528 Rest Framwork\u4e2d\u7684Response\u8fdb\u884c\u8fd4\u56de return Response(data=serializer.data)","title":"\u7279\u5f81\uff1a"},{"location":"Django/003%20Django-DRF/#genericapiview","text":"","title":"\u516b\u3001GenericAPIView"},{"location":"Django/003%20Django-DRF/#_10","text":"GenericAPIView\u7c7b\u662fAPIView\u5b50\u7c7b \u652f\u6301APIView\u7684\u6240\u6709\u529f\u80fd \u652f\u6301\u8fc7\u6ee4\u3001\u6392\u5e8f\u3001\u5206\u9875\u529f\u80fd \u7ee7\u627fGenericAPIView\u4e4b\u540e\uff0c\u9700\u8981\u5236\u5b9aqueryset\u548cserializer_class\u7c7b\u578b queryset\u6307\u5b9a\u5f53\u524d\u7c7b\u89c6\u56fe\u9700\u8981\u4f7f\u7528\u7684\u67e5\u8be2\u96c6\u5bf9\u8c61 serializer_class\u6307\u5b9a\u5f53\u524d\u7c7b\u89c6\u56fe\u9700\u8981\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u5668\u7c7b self.get_queryset()\u83b7\u53d6\u67e5\u8be2\u96c6\u5bf9\u8c61 self.get_serializer()\u83b7\u53d6\u5e8f\u5217\u5316\u5668\u7c7b lookup_field\u7c7b\u5c5e\u6027\u7528\u4e8e\u6307\u5b9a\u4f20\u9012\u4e3b\u952e\u53c2\u6570\u65f6\uff0c\u63a5\u6536\u7684url\u8def\u5f84\u53c2\u6570\u540d\uff0c\u9ed8\u8ba4\u4e3apk self.get_object()\u83b7\u53d6\u6a21\u578b\u5bf9\u8c61 from rest_framework.generics import GenericAPIView class ProjectView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer lookup_field = \"id\" def get(self, request: Request, id: int): serializer = self.get_serializer(instance=self.get_object()) return Response(data=serializer.data, status=status.HTTP_200_OK) def post(self, request: Request): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) serializer.save() return Response(data=serializer.data) def put(self, request: Request, id: int): serializer = self.get_serializer( data=request.data, instance=self.get_object(), partial=True) serializer.is_valid(raise_exception=True) serializer.save() return Response(data=serializer.data, status=status.HTTP_201_CREATED) def delete(self, request, id: int): qs = self.get_queryset().filter(id=id).delete() return HttpResponse(qs) class ProjectsView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer def get(self, request: Request): # \u591a\u6761\u6570\u636e\u7684\u65f6\u5019\u9700\u8981\u52a0\u4e0amany=True serializer = self.get_serializer( instance=self.get_queryset(), many=True) return Response(data=serializer.data, status=status.HTTP_200_OK)","title":"\u7279\u5f81\uff1a"},{"location":"Django/003%20Django-DRF/#genericapiview_1","text":"","title":"GenericAPIView\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5c5e\u6027\u548c\u65b9\u6cd5\uff1f"},{"location":"Django/003%20Django-DRF/#1_3","text":"queryset\u3001serializer_class","title":"1.\u5c5e\u6027"},{"location":"Django/003%20Django-DRF/#2_4","text":"get_queryset()\u3001 get_serializer()\u3001 get_serializer_class()\u3001 filter_queryset()\u3001 paginate_queryset()\u3001 get_paginated_response()\u3001 get_object()","title":"2.\u65b9\u6cd5"},{"location":"Django/003%20Django-DRF/#_11","text":"","title":"\u8fc7\u6ee4\u529f\u80fd"},{"location":"Django/003%20Django-DRF/#_12","text":"\u5728settings.py\u4e2d\u6307\u5b9a\u4f7f\u7528\u7684\u5168\u5c40\u8fc7\u6ee4\u5f15\u64ce \u6240\u6709\u7ee7\u627fGenericAPIView\u7684\u7c7b\u89c6\u56fe\u4e2d\u83b7\u53d6\u5217\u8868\u6570\u636e\u7684\u63a5\u53e3\uff0c\u652f\u6301\u8fc7\u6ee4\u529f\u80fd \u524d\u7aef\u5728\u8fc7\u6ee4\u65f6\uff0c\u9ed8\u8ba4\u9700\u8981\u4f7f\u7528search\u4f5c\u4e3a\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u4f7f\u7528SEARCH_PARAM\u8fdb\u884c\u4fee\u6539 REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS':['rest_framework.filters.SearchFilter'], 'SEARCH_PARAM':'ss' }","title":"\u5168\u5c40\u914d\u7f6e\u8fc7\u6ee4\u5f15\u64ce"},{"location":"Django/003%20Django-DRF/#_13","text":"search_fields:\u6307\u5b9a\u5bf9\u6a21\u578b\u7c7b\u4e2d\u56fd\u54ea\u4e9b\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4 \u4f7f\u7528\u8fc7\u6ee4\u5fc5\u987b\u8c03\u7528self.filter_queryset\u65b9\u6cd5 \u9700\u8981\u4f20\u9012\u67e5\u8be2\u96c6\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570 \u53ef\u4ee5\u5728\u5b57\u7b26\u524d\u9762\u6dfb\u52a0\u524d\u7f00 '^': 'istartswith' '=': 'iexact', '@': 'search', '$': 'iregex', class ProjectsView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer lookup_field = \"id\" # \u5728\u7c7b\u89c6\u56fe\u4e2d\u6307\u5b9a\u8fc7\u6ee4\u5f15\u64ce\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5168\u5c40 filter_backends= [SearchFilter] search_fields = [\"name\", \"leader\"] def get(self, request: Request): queryset = self.filter_queryset(self.get_queryset()) serializer = self.get_serializer( instance=queryset, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK)","title":"\u7c7b\u89c6\u56fe\u4e2d\u4f7f\u7528\u8fc7\u6ee4"},{"location":"Django/003%20Django-DRF/#_14","text":"\u5982\u679c\u5168\u5c40\u672a\u6307\u5b9a\u8fc7\u6ee4\u5f15\u64ce \u5982\u679csearch_fields \u7c7b\u5c5e\u6027\u4e3a\u7a7a \u5982\u679c\u524d\u7aef\u641c\u7d22\u65f6\uff0c\u672a\u6307\u5b9asearch\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570","title":"\u54ea\u4e9b\u60c5\u51b5\u4e0d\u4f1a\u8fdb\u884c\u8fc7\u6ee4\uff1f"},{"location":"Django/003%20Django-DRF/#_15","text":"","title":"\u6392\u5e8f\u529f\u80fd"},{"location":"Django/003%20Django-DRF/#_16","text":"'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter','rest_framework.filters.OrderingFilter'],","title":"\u5168\u5c40\u914d\u7f6e\u6392\u5e8f\u5f15\u64ce"},{"location":"Django/003%20Django-DRF/#_17","text":"\u5728\u7c7b\u89c6\u56fe\u4e2d\u6307\u5b9a\u6a21\u578b\u7c7b\u4e2d\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\u540d\u79f0 \u524d\u7aef\u9700\u8981\u4f7f\u7528ordering\u4f5c\u4e3a\u6392\u5e8f\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u540d\u79f0 \u524d\u7aef\u53ef\u4ee5\u5728\u5b57\u6bb5\u524d\u6dfb\u52a0'-'\uff0c\u8fdb\u884c\u9006\u5e8f\u6392\u5e8f\uff0c\u9ed8\u8ba4\u5347\u5e8f ordering\uff1a\u6307\u5b9a\u4f7f\u7528\u9ed8\u8ba4\u6392\u5e8f\u5b57\u6bb5 \u524d\u7aef\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u6392\u5e8f\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u6392\u5e8f\u5b57\u6bb5\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\uff1a?ordering=-id,name class ProjectsView(GenericAPIView): queryset = Project.objects.all() serializer_class = ProjectModelSerializer lookup_field = \"id\" # \u5728\u7c7b\u89c6\u56fe\u4e2d\u6307\u5b9a\u6392\u5e8f\u5f15\u64ce\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5168\u5c40 filter_backends = [SearchFilter, OrderingFilter] search_fields = [\"name\", \"leader\"] # \u6307\u5b9a\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\u540d\u79f0 ordering_fields = [\"id\", 'name', 'leader'] # \u9ed8\u8ba4\u4f7f\u7528\u7684\u6392\u5e8f\u5b57\u6bb5\uff0c\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u4e3aid\u6392\u5e8f ordering = [\"name\"] def get(self, request: Request): queryset = self.filter_queryset(self.get_queryset()) serializer = self.get_serializer( instance=queryset, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK)","title":"\u7c7b\u89c6\u56fe\u4e2d\u4f7f\u7528\u6392\u5e8f"},{"location":"Django/003%20Django-DRF/#_18","text":"","title":"\u5206\u9875\u529f\u80fd"},{"location":"Django/003%20Django-DRF/#_19","text":"# \u6307\u5b9a\u5206\u9875\u5f15\u64ce\u7c7b 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', # \u5fc5\u987b\u6307\u5b9a\u6bcf\u9875\u663e\u793a\u7684\u6700\u5927\u6570\u636e\u6761\u6570 'PAGE_SIZE': 4,","title":"\u5168\u5c40\u914d\u7f6e\u5206\u9875\u5f15\u64ce"},{"location":"Django/003%20Django-DRF/#_20","text":"\u4f7f\u7528self.paginate_queryset\u65b9\u6cd5\uff0c\u8fdb\u884c\u5206\u9875\u64cd\u4f5c \u9700\u8981\u63a5\u6536\u67e5\u8be2\u96c6\u53c2\u6570 \u5982\u679c\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u8fdb\u884c\u5206\u9875\u64cd\u4f5c\uff0c\u5426\u5219\u9700\u8981\u8fdb\u884c\u5206\u9875\u64cd\u4f5c def get(self, request: Request): queryset = self.filter_queryset(self.get_queryset()) page = self.paginate_queryset(queryset) if page is not None: serializer = self.get_serializer(instance=page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer( instance=queryset, many=True) return Response(data=serializer.data, status=status.HTTP_200_OK)","title":"\u7c7b\u89c6\u56fe\u4e2d\u4f7f\u7528\u5206\u9875"},{"location":"Django/003%20Django-DRF/#pagenumberpagination","text":"from rest_framework.pagination import PageNumberPagination as _PageNumberPagination class PageNumberPagination(_PageNumberPagination): # \u6307\u5b9a\u9ed8\u8ba4\u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u6761\u6570 page_size = 3 # \u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u9875\u7801\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u540d\u79f0 page_query_param = 'p' # \u6307\u5b9a\u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u9875\u7801\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u63cf\u8ff0 page_query_description = \"\u83b7\u53d6\u7684\u9875\u7801\" # \u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u6bcf\u4e00\u9875\u7684\u6570\u636e\u6761\u6570\uff0c\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u540d\u79f0 # \u53ea\u8981\u8bbe\u7f6e\u4e86page_size_query_param\uff0c\u90a3\u4e48\u524d\u7aef\u5c31\u652f\u6301\u6307\u5b9a\u83b7\u53d6\u6bcf\u4e00\u9875\u7684\u6570\u636e\u6761\u6570 page_size_query_param = \"s\" # \u524d\u7aef\u7528\u4e8e\u6307\u5b9a\u6bcf\u4e00\u9875\u7684\u6570\u636e\u6761\u6570\uff0c\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u7684\u63cf\u8ff0 page_size_query_description = \"\u6bcf\u4e00\u9875\u6570\u636e\u6761\u6570\" max_page_size = 100 def get_paginated_response(self, data): response = super().get_paginated_response(data) # \u4e3a\u5206\u9875\u540e\u7684\u6570\u636e\uff0c\u6dfb\u52a0\u9875\u7801 response.data['current_num'] = self.page.number return response","title":"\u91cd\u5199\u5206\u9875\u5f15\u64ce\u7c7bPageNumberPagination"},{"location":"Django/003%20Django-DRF/#_21","text":"'DEFAULT_PAGINATION_CLASS': 'utils.pagination.PageNumberPagination'","title":"\u91cd\u5199\u540e\u9700\u8981\u66f4\u6539\u5f15\u64ce\u7c7b"},{"location":"Django/003%20Django-DRF/#mixins","text":"","title":"\u4e5d\u3001Mixins"},{"location":"Django/003%20Django-DRF/#viewset","text":"ViewSet\u7ee7\u627f\u4e86ViewSetMixin\u3001views.APIView\uff0c\u6240\u4ee5\u672a\u63d0\u4f9b\u5bf9\u4e8e\u5206\u9875\u3001\u8fc7\u6ee4\u529f\u80fd\u7684\u652f\u6301 \u672a\u63d0\u4f9bget_object()\u3001get_serializer()\u3001queryset\u3001serializer_class\u7b49","title":"\u5341\u3001ViewSet"},{"location":"Django/003%20Django-DRF/#genericviewset","text":"GenericViewSet\u7ee7\u627f\u4e86ViewSetMixin\u3001generics.GenericAPIView\uff0c\u6240\u4ee5\u652f\u6301\u5206\u9875\u3001\u8fc7\u6ee4\u529f\u80fd \u53ea\u8981\u7ee7\u627f\u4e86ViewSet\u7684\u7c7b\u89c6\u56fe\uff0c\u90a3\u4e48\u5c31\u652f\u6301\u8bf7\u6c42\u65b9\u6cd5\u4e0eaction\u540d\u79f0\u8fdb\u884c\u4e00\u4e00\u5bf9\u5e94\u7684\u529f\u80fd \u5728as_view\u65b9\u6cd5\u4e2d\u6dfb\u52a0\u5b57\u5178\uff0ckey\u4e3a\u8bf7\u6c42\u65b9\u6cd5\u540d\u79f0\uff08get/post/put/delete/patch/option/head\uff09 value\u4e3a\u9700\u8981\u8c03\u52a8\u7684action\u65b9\u6cd5\u540d\u79f0 from rest_framework import generics, mixins, status,viewsets class ProjectViewSet(mixins.ListModelMixin,viewsets.GenericViewSet): queryset = Project.objects.all() serializer_class = ProjectModelSerializer def names(self, request): queryset = self.get_queryset() names = [{'id': pro.id, 'name': pro.name} for pro in queryset] return Response(names, status=status.HTTP_200_OK) -------------------------------------------------------- \u65b9\u5f0f\u4e00\uff1a\u624b\u52a8\u5199\u8def\u7531 path('p/', views.ProjectViewSet.as_view( {'get': 'list', } )) \u65b9\u5f0f\u4e8c\uff1a\u81ea\u52a8\u751f\u6210\u8def\u7531 from rest_framework import routers # 1\u3001\u521b\u5efa\u8def\u7531\u5bf9\u8c61 DefaultRouter\u4e0eSimpleRouter\u529f\u80fd\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u8ddf\u8def\u7531\uff08\u4f5c\u4e3a\u83b7\u53d6\u5f53\u524d\u6570\u636e\u7684\u5165\u53e3\uff09 router = routers.SimpleRouter() # 2\u3001\u6ce8\u518c\u8def\u7531 \u7b2c\u4e00\u4e2a\u53c2\u6570\uff1a\u8def\u7531\u524d\u7f00 \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u89c6\u56fe\u96c6 \u4f7f\u7528\u89c6\u56fe\u96c6\u4e2d\u7684\u8def\u7531\u673a\u5236\uff0c\u53ea\u4f1a\u4e3a\u7279\u5b9a\u7684action\u81ea\u52a8\u751f\u6210\u8def\u7531\u6761\u4ef6 \u7279\u5b9a\u7684action:retrieve/update/list/created\u7b49 \u9ed8\u8ba4\u81ea\u5b9a\u4e49\u7684action\uff0c\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u8def\u7531\u6761\u76ee\uff0c\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u8def\u7531\u6620\u5c04 router.register(r'p', views.ProjectViewSet) urlpatterns = [ ... path('p/names/',views.ProjectViewSet.as_view({ 'get':'names' })) ] # 3\u3001\u5408\u5e76\u8def\u7531\u6761\u76ee urlpatterns += router.urls","title":"\u5341\u4e00\u3001GenericViewSet"},{"location":"Django/003%20Django-DRF/#action","text":"a.\u5982\u679c\u9700\u8981\u4f7f\u7528\u89c6\u56fe\u96c6\u4e2d\u7684\u8def\u7531\u673a\u5236\u6765\u4e3a\u81ea\u5b9a\u4e49\u7684action\uff0c\u81ea\u52a8\u751f\u6210\u8def\u7531\u6761\u76ee\uff0c\u90a3\u4e48\u9700\u8981\u4f7f\u7528action b.methods\u53c2\u6570\u9ed8\u8ba4\u4e3aget\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u5217\u8868\u4e2d\u6307\u5b9a\u591a\u4e2a\u8bf7\u6c42\u65b9\u6cd5 c.detail\u6307\u5b9a\u662f\u5426\u9700\u8981\u63a5\u6536\u6a21\u578b\u4e3b\u952e\u503c\uff0c\u5982\u679c\u65e0\u9700\u63a5\u6536\u4e3b\u952e\u503c\uff0c\u90a3\u4e48\u9700\u8981\u8bbe\u7f6edetail=False\uff0c\u5426\u5219\u9700\u8981\u8bbe\u7f6edetail=True d.url_path\u6307\u5b9a\u751f\u6210\u7684\u8def\u7531\u6761\u76ee\u8def\u5f84\u540d\uff0c\u9ed8\u8ba4\u4e3a\u81ea\u5b9a\u4e49action\u65b9\u6cd5\u540d\u79f0 e.url_name\u6307\u5b9a\u751f\u6210\u7684\u8def\u7531\u540d\u79f0\u540e\u7f00\uff0c\u9ed8\u8ba4\u4e3a\u81ea\u5b9a\u4e49action\u65b9\u6cd5\u540d\u79f0 @action(methods=['get'], detail=False, url_path='names', url_name='mm') def names(self, request): queryset = self.get_queryset() names = [{'id': pro.id, 'name': pro.name} for pro in queryset] return Response(names, status=status.HTTP_200_OK)","title":"\u5341\u4e8c\u3001\u4f7f\u7528action\u88c5\u9970\u5668\uff0c\u81ea\u52a8\u751f\u6210\u8def\u7531"},{"location":"Django/003%20Django-DRF/#drf","text":"\u53ef\u4ee5\u5728Django settings.py\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539DRF\u7684\u914d\u7f6e\u4fe1\u606f \u5728REST_FRAMEWORK\u5b57\u5178\u4e2d\u4fee\u6539","title":"\u5341\u4e09\u3001\u4fee\u6539DRF\u914d\u7f6e\u4fe1\u606f"},{"location":"Django/003%20Django-DRF/#default_parser_classes","text":"REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ # \u89e3\u6790json\u53c2\u6570 'rest_framework.parsers.JSONParser', # \u89e3\u6790www-form-urlencoded\u53c2\u6570 'rest_framework.parsers.FormParser', # \u89e3\u6790multipart/form-data\u53c2\u6570 'rest_framework.parsers.MultiPartParser' ] }","title":"\u5728DEFAULT_PARSER_CLASSES\u4e2d\u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u7684\u89e3\u6790\u5668"},{"location":"Django/003%20Django-DRF/#_22","text":"\u4f1a\u81ea\u52a8\u6839\u636e\u8bf7\u6c42\u5934\u4e2d\u7684Accept\u5b57\u6bb5\uff0c\u8fd4\u56de\u524d\u7aef\u9700\u8981\u7684\u6570\u636e\u683c\u5f0f \u9ed8\u8ba4\u5982\u679c\u672a\u6dfb\u52a0Accept\u5b57\u6bb5\u53c2\u6570\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56deapplication/json \u9ed8\u8ba4\u5982\u679c\u6307\u5b9a\u4e86Accept\u5b57\u6bb5\u4e3atext/html\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de\u53ef\u6d4f\u89c8\u7684API\u9875\u9762 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ # \u4f1a\u8fd4\u56dejson 'rest_framework.renderers.JSONRenderer', # \u4f1a\u8fd4\u56de\u53ef\u6d4f\u89c8API\u9875\u9762 'rest_framework.renderers.BrowsableAPIRenderer', ], }","title":"\u6307\u5b9a\u540e\u7aef\u4f7f\u7528\u7684\u6e32\u67d3\u5668"},{"location":"Django/003%20Django-DRF/#settingspy","text":"LOGGING = { # \u6307\u5b9a\u65e5\u5fd7\u7248\u672c 'version': 1, # \u6307\u5b9a\u662f\u5426\u7981\u7528\u5176\u4ed6\u65e5\u5fd7\u5668 'disable_existing_loggers': False, # \u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u7684\u683c\u5f0f 'formatters': { # \u7b80\u5355\u683c\u5f0f 'simple': { 'format': '%(asctime)s - [%(levelname)s] - [msg]%(message)s' }, # \u590d\u6742\u683c\u5f0f 'verbose': { 'format': '%(asctime)s - [%(levelname)s] - %(name)s - [msg]%(message)s - [%(filename)s:%(lineno)d ]' }, }, # \u6307\u5b9a\u65e5\u5fd7\u8fc7\u6ee4\u89c4\u5219 'filters': { 'require_debug_true': { '()': 'django.utils.log.RequireDebugTrue', }, }, # \u6307\u5b9a\u65e5\u5fd7\u8f93\u51fa\u6e20\u9053 'handlers': { # \u6307\u5b9a\u5728console\u7ec8\u7aef\u7684\u65e5\u5fd7\u914d\u7f6e\u4fe1\u606f 'console': { # \u8bb0\u5f55\u65e5\u5fd7\u7684\u7b49\u7ea7 'level': 'DEBUG', 'filters': ['require_debug_true'], 'class': 'logging.StreamHandler', 'formatter': 'simple' }, # \u6307\u5b9a\u5728\u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e\u4fe1\u606f 'file': { 'level': 'INFO', 'class': 'logging.handlers.RotatingFileHandler', 'filename': os.path.join(BASE_DIR, \"logs/log.log\"), # \u65e5\u5fd7\u6587\u4ef6\u7684\u4f4d\u7f6e 'maxBytes': 100 * 1024 * 1024, 'backupCount': 10, 'formatter': 'verbose', 'encoding': 'utf-8', }, }, # \u5b9a\u4e49\u65e5\u5fd7\u5668 'loggers': { 'web': { # \u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3adev06\u7684\u65e5\u5fd7\u5668 # \u6307\u5b9a\u5f53\u524d\u65e5\u5fd7\u5668\u5173\u8054\u7684\u6e20\u9053 'handlers': ['console', 'file'], 'propagate': True, 'level': 'DEBUG', # \u65e5\u5fd7\u5668\u63a5\u6536\u7684\u6700\u4f4e\u65e5\u5fd7\u7ea7\u522b }, } }","title":"\u5341\u56db\u3001\u65e5\u5fd7\u914d\u7f6e\uff08settings.py\uff09"},{"location":"Django/003%20Django-DRF/#_23","text":"","title":"\u5341\u4e94\u3001\u63a5\u53e3\u6587\u6863"},{"location":"Django/003%20Django-DRF/#coreapi","text":"pip install coreapi","title":"coreapi"},{"location":"Django/003%20Django-DRF/#_24","text":"","title":"\u4f7f\u7528"},{"location":"Django/003%20Django-DRF/#1-settingspy","text":"REST_FRAMEWORK = { 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema' }","title":"1. \u5728 settings.py \u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e"},{"location":"Django/003%20Django-DRF/#2_5","text":"from rest_framework.documentation import include_docs_urls urlpatterns = [ path('docs/', include_docs_urls(title=\"\u8bf4\u660e\u6587\u6863\")), ]","title":"2. \u6dfb\u52a0\u63a5\u53e3\u6587\u6863\u8def\u7531"},{"location":"Django/003%20Django-DRF/#drf-yasg","text":"pip install drf-yasg","title":"drf-yasg"},{"location":"Django/003%20Django-DRF/#_25","text":"","title":"\u4f7f\u7528"},{"location":"Django/003%20Django-DRF/#1-installed_apps","text":"INSTALLED_APPS = [ ... 'drf_yasg' ... ]","title":"1. \u6dfb\u52a0\u5230INSTALLED_APPS\u4e2d"},{"location":"Django/003%20Django-DRF/#2_6","text":"from django.urls import path, re_path from drf_yasg.views import get_schema_view from drf_yasg import openapi # from rest_framework import permissions schema_view = get_schema_view( openapi.Info( title=\"Snippets API\", default_version='v1', description=\"Test description\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"contact@snippets.local\"), license=openapi.License(name=\"BSD License\"), ), public=True, # permission_classes=(permissions.AllowAny,), ) urlpatterns = [ ... re_path(r\"swagger(?P<format>\\.json|\\.yaml)$\", schema_view.without_ui( cache_timeout=0), name=\"schema-json\"), path(\"swagger/\", schema_view.with_ui(\"swagger\", cache_timeout=0), name=\"schema-swagger-ui\"), path(\"redoc/\", schema_view.with_ui(\"redoc\", cache_timeout=0), name=\"schema-redoc\"), ]","title":"2.\u5728\u5168\u5c40\u8def\u7531\u6dfb\u52a0\u914d\u7f6e"},{"location":"Django/003%20Django-DRF/#_26","text":"","title":"\u5341\u516d\u3001\u521b\u5efa\u5e8f\u5217\u5316\u5668\u7c7b"},{"location":"Django/003%20Django-DRF/#1modelserializer","text":"\u5982\u679c\u6d89\u53ca\u5230ORM\u4e2d\u6a21\u578b\u7c7b\uff08\u64cd\u4f5c\u7684\u662f\u6a21\u578b\u7c7b\u4e2d\u7684\u6570\u636e\uff09","title":"1\u3001\u4ec0\u4e48\u60c5\u51b5\u4f7f\u7528ModelSerializer\uff1f"},{"location":"Django/003%20Django-DRF/#2serializer","text":"\u5982\u679c\u672a\u6d89\u53ca\u5230ORM\u4e2d\u6a21\u578b\u7c7b \u7edd\u5927\u591a\u6570\u6d89\u53ca\u7684\u5b57\u6bb5\u90fd\u4e0d\u662f\u6a21\u578b\u7c7b\u4e2d\u5b57\u6bb5","title":"2\u3001\u4ec0\u4e48\u60c5\u51b5\u4f7f\u7528Serializer\uff1f"},{"location":"Django/003%20Django-DRF/#_27","text":"\u91cd\u5199GenericAPIView\u4e2d\u7684get_serializer_class\u65b9\u6cd5 \u901a\u8fc7action\u5224\u65ad\u8bbf\u95ee\u7684\u8def\u5f84\uff0c\u7136\u540e\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u7c7b @action(methods=['get'], detail=False, url_path='names', url_name='mm') def names(self, request, *args, **kwargs): # queryset = self.get_queryset() # # names = [{'id': pro.id, 'name': pro.name} for pro in queryset] # serializer = ProjectNamesModelSerializer(instance=queryset, many=True) # return Response(data=serializer.data, status=status.HTTP_200_OK) return self.list(request, *args, **kwargs) def get_serializer_class(self): return ProjectNamesModelSerializer if self.action == \"names\" else self.serializer_class","title":"\u5341\u4e03\u3001\u540c\u4e00\u4e2a\u7c7b\u89c6\u56fe\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u7c7b"},{"location":"Django/003%20Django-DRF/#names","text":"\u91cd\u5199GenericAPIView\u4e2d\u7684filter_queryset\u65b9\u6cd5\u548cpaginate_queryset\u65b9\u6cd5 \u901a\u8fc7action\u5224\u65ad\u8bbf\u95ee\u7684\u8def\u5f84\uff0c\u7136\u540e\u4f7f\u7528\u4e0d\u540c\u7684queryset def filter_queryset(self, queryset): return self.queryset if self.action == \"names\" else super().filter_queryset(queryset) def paginate_queryset(self, queryset): return None if self.action == \"names\" else super().paginate_queryset(queryset)","title":"\u95ee\u9898\uff1a\u5982\u679c\u4e3b\u5e8f\u5217\u5316\u914d\u7f6e\u4e86\u5206\u9875\u3001\u8fc7\u6ee4\u529f\u80fd\uff0c\u90a3\u4e48\u5728names\u4e2d\u4e0d\u60f3\u4f7f\u7528\uff0c\u5982\u4f55\u89e3\u51b3\uff1f"},{"location":"Django/003%20Django-DRF/#_28","text":"\u7c7b\u89c6\u56fe\u5c3d\u91cf\u7b80\u5316 \u6839\u636e\u9700\u6c42\u9009\u62e9\u76f8\u5e94\u7684\u7236\u7c7b\u89c6\u56fe \u5982\u679cDRF\u4e2d\u7684\u7c7b\u89c6\u56fe\u6709\u63d0\u4f9b\u76f8\u5e94\u7684\u903b\u8f91\uff0c\u90a3\u4e48\u76f4\u63a5\u4f7f\u7528\u7236\u7c7b\u4f7f\u7528\u7684 \u5982\u679cDRF\u4e2d\u7684\u7c7b\u89c6\u56fe\uff0c\u7edd\u5927\u591a\u6570\u9700\u6c42\u90fd\u80fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u76f4\u63a5\u91cd\u5199\u7236\u7c7b\u7684\u5b9e\u73b0 \u5982\u679cDRF\u4e2d\u7684\u7c7b\u89c6\u56fe\u5b8c\u5168\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u4e48\u76f4\u63a5\u81ea\u5b9a\u4e49","title":"\u5341\u516b\u3001\u7c7b\u89c6\u56fe\u7684\u8bbe\u8ba1\u539f\u5219"},{"location":"Django/003%20Django-DRF/#_29","text":"","title":"\u5341\u4e5d\u3001\u3001\u8ba4\u8bc1\u548c\u6388\u6743"},{"location":"Django/003%20Django-DRF/#_30","text":"\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u80fd\u83b7\u5f97\u6743\u9650","title":"\u4ec0\u4e48\u662f\u8ba4\u8bc1\uff1f"},{"location":"Django/003%20Django-DRF/#_31","text":"\u901a\u8fc7\u8ba4\u8bc1\u540e\uff0c\u80fd\u5177\u5907\u54ea\u4e9b\u6743\u9650","title":"\u4ec0\u4e48\u662f\u6388\u6743\uff1f"},{"location":"Django/003%20Django-DRF/#session","text":"","title":"\u4f7f\u7528Session\u4f1a\u8bdd"},{"location":"Django/003%20Django-DRF/#1settingpy","text":"# \u6307\u5b9a\u4f7f\u7528\u8ba4\u8bc1\u7c7b # \u9ed8\u8ba4DRF\u6846\u67b6\u4f7f\u7528\u7684\u8ba4\u8bc1\u7c7b\u4e3asession\u4f1a\u8bdd\u8ba4\u8bc1 'DEFAULT_AUTHENTICATION_CLASSES': [ # \u6307\u5b9asession\u4f1a\u8bdd\u8ba4\u8bc1\u7c7b 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication' ],","title":"1\u3001\u6307\u5b9a\u4f7f\u7528\u8ba4\u8bc1\u7c7b\uff08setting.py\uff09"},{"location":"Django/003%20Django-DRF/#2_7","text":"# \u6307\u5b9a\u4f7f\u7528\u6743\u9650\u7c7b # \u9ed8\u8ba4DRF\u6846\u67b6\u4f7f\u7528\u7684\u6743\u9650\u7c7b\u4e3aAllowAny\uff0c\u5177\u5907\u6240\u6709\u6743\u9650 'DEFAULT_PERMISSION_CLASSES': [ # 'rest_framework.permissions.AllowAny', # \u6307\u5b9aDRF\u4e2d\u63d0\u4f9b\u7684IsAuthenticated\u6743\u9650\u7c7b\uff0c\u53ea\u8981\u767b\u5f55\u5c31\u5177\u5907\u6240\u6709\u6743\u9650\uff0c\u5982\u679c\u4e0d\u767b\u5f55\u4e0d\u5177\u5907\u6743\u9650 # \u53ef\u4ee5\u4f7f\u7528 python manage.py createsuperuser \u521b\u5efa\u8d85\u7ea7\u7ba1\u7406\u5458 'rest_framework.permissions.IsAuthenticated' ],","title":"2\u3001\u6307\u5b9a\u4f7f\u7528\u6743\u9650\u7c7b"},{"location":"Django/003%20Django-DRF/#3_2","text":"urlpatterns = [ ... path(\"api/\",include(\"rest_framework.urls\")) ]","title":"3\u3001\u6dfb\u52a0\u5168\u5c40\u8def\u7531"},{"location":"Django/003%20Django-DRF/#4_1","text":"from rest_framework import permissions class ProjectViewSet(viewsets.ModelViewSet): queryset = Project.objects.all() serializer_class = ProjectModelSerializer # \u6307\u5b9a\u4f7f\u7528\u7684\u6743\u9650\u7c7b permission_classes = [permissions.IsAuthenticated]","title":"4\u3001\u90e8\u5206\u89c6\u56fe\u624d\u9700\u8981\u6dfb\u52a0\u6743\u9650\uff0c\u53ef\u4ee5\u5728\u7c7b\u89c6\u56fe\u6307\u5b9a\u4f7f\u7528\u7684\u6743\u9650\u7c7b\uff0c\u4f18\u5148\u7ea7\u5927\u4e8e\u5168\u5c40\u914d\u7f6e"},{"location":"Django/003%20Django-DRF/#5drf","text":"AllowAny IsAuthenticated IsAdminUser IsAuthenticatedOrReadOnly","title":"5\u3001DRF\u81ea\u5e26\u7684\u6743\u9650"},{"location":"Django/003%20Django-DRF/#jwtjson-web-token","text":"\u6700\u5e38\u7528\u7684\u8ba4\u8bc1\u673a\u5236 Session\u8ba4\u8bc1 Token\u8ba4\u8bc1 Session\u8ba4\u8bc1 \u4fdd\u6301\u5728\u670d\u52a1\u7aef\uff0c\u589e\u52a0\u670d\u52a1\u5668\u5f00\u9500 \u5206\u5e03\u5f0f\u67b6\u6784\u4e2d\uff0c\u96be\u4ee5\u7ef4\u6301Session\u4f1a\u8bdd\u540c\u6b65 CSRF\u653b\u51fb\u98ce\u9669 Token\u8ba4\u8bc1 \u4fdd\u5b58\u5728\u5ba2\u6237\u7aef \u8de8\u8bed\u8a00\u3001\u8de8\u5e73\u53f0 \u62d3\u5c55\u6027\u5f3a \u9274\u6743\u6027\u80fd\u9ad8","title":"\u4f7f\u7528JWT(Json Web Token)\u8ba4\u8bc1"},{"location":"Django/003%20Django-DRF/#jwt","text":"\u7531\u4e09\u90e8\u5206\u7ec4\u6210 header\u3001playload\u3001signature header \u58f0\u660e\u7c7b\u578b \u58f0\u660e\u52a0\u5bc6\u7b97\u6cd5\uff0c\u9ed8\u8ba4\u4e3aHs256 base64\u52a0\u5bc6\uff0c\u53ef\u4ee5\u89e3\u5bc6 playload \u5b58\u653e\u8fc7\u671f\u65f6\u95f4\u3001\u7b7e\u53d1\u7528\u6237\u7b49 \u53ef\u4ee5\u6dfb\u52a0\u7528\u6237\u7684\u975e\u654f\u611f\u4fe1\u606f base64\u52a0\u5bc6\uff0c\u53ef\u4ee5\u89e3\u5bc6 signature \u7531\u4e09\u90e8\u5206\u7ec4\u6210 \u4f7f\u7528base64\u52a0\u5bc6\u4e4b\u540e\u7684header + . + \u4f7f\u7528base64\u52a0\u5bc6\u4e4b\u540e\u7684playload + \u4f7f\u7528HS256\u7b97\u6cd5\u52a0\u5bc6\uff0c\u540c\u65f6secret\u52a0\u76d0\u5904\u7406","title":"JWT"},{"location":"Django/003%20Django-DRF/#djangorestframework-jwt","text":"pip install djangorestframework-jwt","title":"\u5b89\u88c5djangorestframework-jwt"},{"location":"Django/003%20Django-DRF/#jwt_1","text":"```python 'DEFAULT_AUTHENTICATION_CLASSES': [ # \u6307\u5b9a\u4f7f\u7528JWT Token\u8ba4\u8bc1 'rest_framework_jwt.authentication.JSONWebTokenAuthentication' # \u6307\u5b9asession\u4f1a\u8bdd\u8ba4\u8bc1\u7c7b 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication' ], #### \u6dfb\u52a0users\u6a21\u5757\uff0c\u6307\u5b9a\u8def\u7531 ```python from rest_framework_jwt.views import obtain_jwt_token urlpatterns = [ path(r\"login/\",obtain_jwt_token) ]","title":"\u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u6dfb\u52a0jwt\u8ba4\u8bc1\u7c7b"},{"location":"Django/003%20Django-DRF/#_32","text":"","title":"\u66f4\u6539\u767b\u5f55\u540e\u8fd4\u56de\u7684\u6570\u636e"},{"location":"Django/003%20Django-DRF/#1jwt_response_payload_handler","text":"def jwt_response_payload_handler(token, user=None, request=None): return { 'token': token, 'id': user.id, 'username': user.username }","title":"1.\u91cd\u5199jwt_response_payload_handler"},{"location":"Django/003%20Django-DRF/#2jwt_auth","text":"\u53ef\u4ee5\u5728\u5168\u5c40\u914d\u7f6esettings.py\u4e2d\u6dfb\u52a0JWT_AUTH\uff0c\u91cd\u5199JWT\u76f8\u5173\u53c2\u6570 JWT_AUTH_HEADER_PREFIX \u6307\u5b9aTOKEN\u8ba4\u8bc1\u65f6\uff0c\u524d\u7aef\u8bf7\u6c42\u5934\u627e\u90a3\u4e2aTOKEN\u8ba4\u8bc1\u503c\u5f97\u524d\u7f00 \u524d\u7aef\u9700\u8981\u5728\u8bf7\u6c42\u5934\u4e2d\u4f20\u9012key\u4e3aAuthorization\uff0cvalue\u4e3a\u524d\u7f00 token\u503c\uff0c\u9ed8\u8ba4\u524d\u7f00\u4e3aJWT JWT_AUTH = { 'JWT_RESPONSE_PAYLOAD_HANDLER': 'utils.jwt_response_payload_handler.jwt_response_payload_handler', }","title":"2.\u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u66f4\u6539JWT_AUTH\u914d\u7f6e"},{"location":"Django/003%20Django-DRF/#token","text":"# \u6307\u5b9a\u751f\u6210\u7684TOKEN\u8fc7\u671f\u65f6\u95f4 \"JWT_EXPIRATION_DELTA\": datetime.timedelta(days=1)","title":"\u6307\u5b9atoken\u751f\u6210\u7684\u8fc7\u671f\u65f6\u95f4"},{"location":"Django/003%20Django-DRF/#django","text":"\u76f4\u63a5\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5bf9\u81ea\u5e26\u7684\u6a21\u578b\u7c7b\u8fdb\u884c\u5e8f\u5217\u5316\u5373\u53ef from rest_framework import serializers from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): class Meta: model = User fields = (\"id\", \"username\", \"email\")","title":"\u4e8c\u5341\u3001\u5982\u4f55\u4f7f\u7528Django\u81ea\u5e26\u7684\u6a21\u578b\u7c7b"},{"location":"Django/003%20Django-DRF/#apps","text":"sys.path\u4fdd\u5b58\u4e86Python\u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84 \u4e3a\u4e86\u7b80\u5316\u5b57\u5e94\u7528\u7684\u6ce8\u518c\uff0c\u53ef\u4ee5\u5c06\u5b50\u5e94\u7528\u6240\u5728\u76ee\u5f55\uff08apps\uff09\u52a0\u5165\u5230\u6a21\u5757\u641c\u7d22\u8def\u5f84\u4e2d import sys sys.path.insert(0, os.path.join(BASE_DIR, \"apps\"))","title":"\u4e8c\u5341\u4e00\u3001\u4f7f\u7528apps\u7edf\u4e00\u7ba1\u7406\u5b50\u5e94\u7528"},{"location":"Django/003%20Django-DRF/#_33","text":"","title":"\u4e8c\u5341\u4e8c\u3001\u5f00\u542f\u8de8\u57df"},{"location":"Django/003%20Django-DRF/#1django-cors-headers","text":"pip install django-cors-headers","title":"1.\u5b89\u88c5django-cors-headers"},{"location":"Django/003%20Django-DRF/#2corsheaderssettingspyinstalled_apps","text":"INSTALLED_APPS = [ ... 'corsheaders', ... ]","title":"2.\u5c06corsheaders\u6dfb\u52a0\u5230settings.py\u4e2d\u7684INSTALLED_APPS\u4e2d\uff0c\u5c3d\u91cf\u653e\u5728\u524d\u9762"},{"location":"Django/003%20Django-DRF/#3_3","text":"MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', # \u9700\u8981\u6dfb\u52a0CommonMiddleware\u4e2d\u95f4\u4ef6\u524d 'corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ]","title":"3.\u6dfb\u52a0\u4e2d\u95f4\u4ef6"},{"location":"Django/003%20Django-DRF/#4_2","text":"# \u6307\u5b9a\u6240\u6709\u57df\u540d\u90fd\u53ef\u4ee5\u8bbf\u95ee\u540e\u7aef\u63a5\u53e3\uff0c\u9ed8\u8ba4\u4e3aFalse CORS_ORIGIN_ALLOW_ALL = True","title":"4.\u6dfb\u52a0\u767d\u540d\u5355"},{"location":"Django/003%20Django-DRF/#5cookiefalse","text":"CORS_ALLOW_CREDENTIALS = True","title":"5.\u5141\u8bb8\u8de8\u57df\u65f6\u643a\u5e26Cookie\uff0c\u9ed8\u8ba4\u4e3aFalse"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/","text":"Djang \u547d\u4ee4\u6c47\u603b \u521b\u5efaDjango\u5de5\u7a0b django-admin startproject project_name \u521b\u5efa\u5b50\u5e94\u7528app python manage.py startapp app_name \u8fd0\u884c\u9879\u76ee python manage.py runserver \u751f\u6210\u8fc1\u79fb\u811a\u672c python manage.py makemigrations project_name \u67e5\u770b\u521b\u5efa\u8868sql\u8bed\u53e5 python manage.py sqlmigrate project_name \u8fc1\u79fb\u811a\u672c \u6267\u884c\u8fc1\u79fb\u811a\u672c python manage.py migrate project_name python manage.py migrate \u6839\u636e\u73b0\u6709\u6570\u636e\u5e93\u5efa\u7acbmodel python manage.py inspectdb \u628a\u6a21\u578b\u6587\u4ef6\u5bfc\u5165\u5230app\u4e2d python manage.py startapp app python manage.py inspectdb > app/models.py","title":"Djang \u547d\u4ee4\u6c47\u603b"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#djang","text":"","title":"Djang \u547d\u4ee4\u6c47\u603b"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#django","text":"django-admin startproject project_name","title":"\u521b\u5efaDjango\u5de5\u7a0b"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#app","text":"python manage.py startapp app_name","title":"\u521b\u5efa\u5b50\u5e94\u7528app"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#_1","text":"python manage.py runserver","title":"\u8fd0\u884c\u9879\u76ee"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#_2","text":"python manage.py makemigrations project_name","title":"\u751f\u6210\u8fc1\u79fb\u811a\u672c"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#sql","text":"python manage.py sqlmigrate project_name \u8fc1\u79fb\u811a\u672c","title":"\u67e5\u770b\u521b\u5efa\u8868sql\u8bed\u53e5"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#_3","text":"python manage.py migrate project_name python manage.py migrate","title":"\u6267\u884c\u8fc1\u79fb\u811a\u672c"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#model","text":"python manage.py inspectdb","title":"\u6839\u636e\u73b0\u6709\u6570\u636e\u5e93\u5efa\u7acbmodel"},{"location":"Django/004%20Django%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/#app_1","text":"python manage.py startapp app python manage.py inspectdb > app/models.py","title":"\u628a\u6a21\u578b\u6587\u4ef6\u5bfc\u5165\u5230app\u4e2d"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/","text":"docker\u7b14\u8bb0 \u5b89\u88c5Docker(CentOS 8) 1\u3001\u5b89\u88c5yum-utils\u547d\u4ee4\u5305\uff08yum-config-manager\u547d\u4ee4\u9700\u8981\uff09 sudo yum -y install yum-utils 2\u3001\u6dfb\u52a0\u8f6f\u4ef6\u6e90\u4fe1\u606f(\u56fd\u5185\u6e90, \u901f\u5ea6\u66f4\u5feb, \u63a8\u8350) sudo yum-config-manager \\ --add-repo \\ https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo 3\u3001\u66f4\u65b0Docker-CE yum makecache fast(\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u62a5\u9519\u7684\u8bdd\uff0c\u7528\u4e0b\u9762\u7684) yum makecache (CentOS8\u6ca1\u6709fast\u53c2\u6570\uff0c\u53ef\u4ee5\u53bb\u6389) 4\u3001\u5b89\u88c5Docker Engine yum install docker-ce docker-ce-cli containerd.io 5\u3001\u5f00\u542fdocker systemctl enable docker(\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f\u52a8) systemctl start docker 6\u3001\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f docker run hello-world \u5982\u679c\u51fa\u73b0\u201cHello from Docker!\u201d\uff0c\u5219\u4ee3\u8868\u8fd0\u884c\u6210\u529f 7\u3001docker \u7248\u672c\u4fe1\u606f docker version docker \u4e00\u3001docker\u57fa\u672c\u64cd\u4f5c 1\u3001docker image(\u955c\u50cf) \u5217\u51fa\u955c\u50cf # \u5217\u51fa\u6240\u6709\u955c\u50cf docker images # \u4ec5\u5217\u51fa\u955c\u50cf\u7684ID docker images -q \u641c\u7d22\u955c\u50cf docker search mysql \u4e0b\u8f7d\u955c\u50cf docker pull nginx \u5220\u9664\u955c\u50cf docker rmi ImageID \u67e5\u770b\u955c\u50cf\u8be6\u7ec6\u4fe1\u606f docker inspect jenkins 2\u3001docker container(\u5bb9\u5668) \u8fd0\u884c\u5bb9\u5668 docker run image docker run centos # \u542f\u52a8\u5bb9\u5668\u5e76\u6253\u5f00\u5bb9\u5668bash\u7ec8\u7aef docker run -it centos /bin/bash docker run --name web -d -p 8080:80 -v $PWD:/usr/share/nginx/html nginx \u53c2\u6570\uff1a-i -t --name -d -p -P -v --net docker exec -it mysql /bin/bash -i \u5df2\u4ea4\u4e92\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\uff0c\u901a\u5e38\u4e0e-t\u540c\u65f6\u4f7f\u7528 -t \u4e3a\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u4f2a\u8f93\u5165\u7ec8\u7aef\uff0c\u901a\u5e38\u4e0e-i\u540c\u65f6\u4f7f\u7528 --name \u4e3a\u5bb9\u5668\u6307\u5b9a\u4e00\u4e2a\u540d\u79f0 -d \u540e\u53f0\u8fd0\u884c\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u5bb9\u5668ID -p \u4ee3\u8868\u7aef\u53e3\u6620\u5c04\uff0c\u683c\u5f0f\u4e3a \u5bbf\u4e3b\u673a\u6620\u5c04\u7aef\u53e3:\u5bb9\u5668\u8fd0\u884c\u7aef\u53e3 -P \u968f\u673a\u7aef\u53e3\u6620\u5c04\uff0c\u5bb9\u5668\u5185\u90e8\u7aef\u53e3\u968f\u673a\u6620\u5c04\u5230\u4e3b\u673a\u7684\u7aef\u53e3 -v \u6620\u5c04\u76ee\u5f55\uff0c\u5c06\u5bb9\u5668\u5185\u7684\u914d\u7f6e\u4e0e\u6570\u636e\u6587\u4ef6\u5939\uff0c\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u76ee\u5f55 -e \u4ee3\u8868\u6dfb\u52a0\u73af\u5883\u53d8\u91cf --net\u6307\u5b9a\u5bb9\u5668\u7684\u7f51\u7edc\u8fde\u63a5\u7c7b\u578b\uff0c\u652f\u6301bridge/host/none/container\u56db\u79cd\u7c7b\u578b --volume \u7ed1\u5b9a\u4e00\u4e2a\u5377 -h \u6307\u5b9a\u5bb9\u5668\u7684hostname \u5217\u51fa\u5bb9\u5668 # \u5217\u51fa\u5f53\u524d\u8fd0\u884c\u7684\u5bb9\u5668 docker ps # \u5217\u51fa\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u5bb9\u5668 docker ps -a # \u5217\u51fa\u5bb9\u5668\u4e0a\u8fd0\u884c\u7684\u6240\u6709\u5386\u53f2\u547d\u4ee4 sudo docker history centos \u67e5\u770b\u5bb9\u5668\u7684\u8fdb\u7a0b\u548c\u8d44\u6e90\u5229\u7528\u60c5\u51b5 # \u67e5\u770b\u5bb9\u5668\u7684\u8fdb\u7a0b docker top ContainerID # \u67e5\u770b\u5bb9\u5668\u7684\u8d44\u6e90\u5229\u7528\u60c5\u51b5 docker stats ContainerID \u505c\u6b62/\u5f00\u542f\u5bb9\u5668 # \u505c\u6b62\u5bb9\u5668 docker stop ContainerID # \u5f00\u542f\u5bb9\u5668 docker restart ContainerID \u6682\u505c/\u542f\u52a8\u5bb9\u5668 # \u6682\u505c\u5bb9\u5668 docker pause web # \u542f\u52a8\u5bb9\u5668 docker unpause web \u5220\u9664\u5bb9\u5668 # \u5220\u9664\u4e00\u4e2a\u672a\u8fd0\u884c\u7684\u5bb9\u5668 docker rm web # \u5220\u9664\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668 docker rm -f web \u4e8c\u3001docker\u7f51\u7edc 1\u3001docker0 \u9ed8\u8ba4\u5bb9\u5668\u4e0e\u5bbf\u4e3b\u673a\u4e4b\u95f4\u7684\u6865\u6881 2\u3001\u7f51\u7edc\u7c7b\u578b bridge nat\u7f51\u7edc\u6a21\u578b \u865a\u62df\u4ea4\u6362\u673a host \u4e0e\u5bbf\u4e3b\u673a\u5171\u4eab\u7f51\u7edc --net=host none \u4e0d\u914d\u7f6e\u7f51\u7edc --net=none overlay \u4e0d\u540c\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1 \u4e0e\u4e00\u4e2a\u5bb9\u5668\u5171\u4eab\u7f51\u7edc --net=container:ContainerName 3\u3001\u76f8\u5173\u64cd\u4f5c 1\uff09\u67e5\u770b docker network ls docker network inspect networkname 2\uff09\u521b\u5efa docker network create --driver drivername name docker network create -d bridge --subnet 172.16.100.0/24 one_network \u4e09\u3001volume \u6570\u636e\u5377 1\u3001\u4ecb\u7ecd \u4f7f\u7528\u6570\u636e\u5377\u5b9e\u73b0\u6570\u636e\u6301\u4e45\u5316 \u6570\u636e\u5907\u4efd/\u6570\u636e\u5171\u4eab 2\u3001\u76f8\u5173\u64cd\u4f5c 1\uff09\u521b\u5efa # \u624b\u52a8\u521b\u5efa docker volume create nginx11 # \u8fd0\u884c\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa docker run --name nginx33 -d -v nginx22:/usr/share/nginx/html -p 8888:80 nginx:alpine 2\uff09\u67e5\u770b # \u5217\u51fa\u6240\u6709\u7684volume\u5377 docker volume ls # \u67e5\u8be2\u6307\u5b9a\u7684volume\u5377\u7684\u8be6\u7ec6\u4fe1\u606f docker volume inspect nginx22 3\uff09\u6302\u8f7d docker run -v \u5bbf\u4e3b\u673a\u76ee\u5f55:\u5bb9\u5668\u76ee\u5f55 docker run --name nginx33 -d -v nginx22:/usr/share/nginx/html -p 8888:80 nginx:alpine 4\uff09\u5220\u9664 docker volume rm nginx11 \u56db\u3001Dockerfile \u53ef\u4ee5\u4f7f\u7528#\u53f7\u6307\u5b9a\u6ce8\u91ca\u4fe1\u606f \u6587\u4ef6\u540d\u4e00\u822c\u4e3aDockerfile \u53ef\u4ee5\u4f7f\u7528Dockerfile\u6587\u4ef6\u6765\u81ea\u5b9a\u4e49\u955c\u50cf \u6307\u5b9abase image\uff0c\u57fa\u672c\u955c\u50cf FROM\u4e00\u822c\u4e3a\u7b2c\u4e00\u884c\uff0cFROM\u57fa\u672c\u955c\u50cf\u540d\u79f0:tag\u7248\u672c\u7f16\u53f7 \u5982\u679c\u672c\u5730\u6ca1\u6709\uff0c\u4f1a\u81ea\u52a8\u4ecedocker hub \u8fdc\u7a0b\u4ed3\u5e93\u4e0b\u8f7d\uff0c\u5426\u5219\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u4ed3\u5e93\u63d0\u4f9b\u7684 1\u3001FROM FROM\u4e00\u822c\u4e3a\u7b2c\u4e00\u884c\uff0cFROM\u57fa\u672c\u955c\u50cf\u540d\u79f0:tag\u7248\u672c\u7f16\u53f7 FROM python:alpine 2\u3001LABEL \u4f7f\u7528LABEL\u6307\u5b9a\u955c\u50cf\u7684\u5143\u6570\u636e\u4fe1\u606f\uff08\u63d0\u793a\u8bf4\u660e\u4f5c\u7528\uff09 LABEL key=value \u5982\u679cvalue\u4e2d\u6709\u7a7a\u683c\uff0c\u9700\u8981\u4f7f\u7528\u5f15\u53f7\u62ec\u8d77\u6765\u6216\u8005\u4f7f\u7528\\\u8fdb\u884c\u8f6c\u4e49 3\u3001COPY \u7528\u4e8e\u5c06\u5bbf\u4e3b\u673a\u4e2d\u7684\u8d44\u6e90\u590d\u5236\u7c98\u8d34\u81f3\u5bb9\u5668\u4e2d COPY \u5bbf\u4e3b\u673a\u8def\u5f84 \u5bb9\u5668\u4e2d\u7684\u8def\u5f84 \u5982\u679c\u5bb9\u5668\u4e2d\u6307\u5b9a\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa \u5982\u679c\u5c06\u4e00\u4e2a\u6587\u4ef6\u590d\u5236\u5230\u5bb9\u5668\u4e2d\uff0c\u6307\u5b9a\u7684\u5bb9\u5668\u8def\u5f84\uff0c\u5efa\u8bae\u6dfb\u52a0/ COPY . /app 4\u3001ADD ADD\u4e0eCOPY\u7c7b\u4f3c\uff0c\u7528\u4e8e\u5c06\u5bbf\u4e3b\u673a\u4e2d\u7684\u8d44\u6e90\u590d\u5236\u5230\u5bb9\u5668\u4e2d ADD \u53ef\u4ee5\u5c06\u8fdc\u7a0b\u6587\u4ef6\u4e0b\u8f7d\u4e4b\u540e\uff0c\u590d\u5236\u5230\u5bb9\u5668\u4e2d\uff1aADD \u8fdc\u7a0b\u6587\u4ef6\u94fe\u63a5 \u5bb9\u5668\u76ee\u5f55 \u4e5f\u53ef\u4ee5\u5c06\u672c\u5730\u7684\u538b\u7f29\u6587\u4ef6\u89e3\u538b\u4e4b\u540e\uff0c\u590d\u5236\u5230\u5bb9\u5668\u4e2d\uff1aADD \u672c\u5730\u538b\u7f29\u6587\u4ef6 \u5bb9\u5668\u76ee\u5f55 ADD https://github.com/docker-library/python/raw/master/update.sh . 5\u3001WORKDIR \u76f8\u5f53\u4e8ecd\u547d\u4ee4\uff0c\u7528\u4e8e\u5bb9\u5668\u8fdb\u5165\u5230\u67d0\u4e2a\u76ee\u5f55\u4e2d \u5982\u679c\u6307\u5b9a\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa WORKDIR /app 6\u3001RUN \u7528\u4e8e\u5728\u5bb9\u5668\u4e2d\u6267\u884clinux\u547d\u4ee4 \u6bcf\u4e00\u4e2aRUN\u6307\u4ee4\u4f1a\u72ec\u81ea\u5360\u4e00\u5c42 \u4e3a\u4e86\u4f18\u5316\u955c\u50cf\u7684\u5927\u5c0f\uff0c\u5982\u679c\u6709\u591a\u6761\u547d\u4ee4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aRUN\u6307\u4ee4\uff0c\u591a\u6761\u547d\u4ee4\u4e4b\u95f4&&\u6216\u8005;\u4f7f\u7528\\\u8fdb\u884c\u6362\u884c RUN pip install -r requirements.txt 7\u3001ENV ENV username=Desire\\ password=123456 8\u3001VOLUME \u6307\u5b9a\u5bb9\u5668\u4e2d\u54ea\u4e9b\u76ee\u5f55\u53ef\u4ee5\u4e0e\u5bbf\u4e3b\u673a\u8fdb\u884c\u5171\u4eab LABEL maintaier=\"Desire <desireyang.qq.com>\" LABEL description=\"define Dockerfile Demo\" 9\u3001EXPOSE \u6307\u5b9a\u5bb9\u5668\u4e2d\u53ef\u4ee5\u66b4\u9732\u7684\u7aef\u53e3 EXPOSE 8000 10\u3001CMD \u6307\u5b9a\u5bb9\u5668\u8fd0\u884c\uff08docker run \uff09\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u6267\u884c\u7684\u547d\u4ee4 \u5982\u679c\u5728\u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u6307\u5b9a\u4e86\u5176\u4ed6\u547d\u4ee4\uff0c\u90a3\u4e48CMD\u547d\u4ee4\u4f1a\u88ab\u8986\u76d6 \u5982\u679c\u6709\u591a\u4e2aCMD\u547d\u4ee4\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u4f1a\u88ab\u6267\u884c \u6709\u4e24\u79cd\u683c\u5f0f\uff0cshell\u683c\u5f0f\u3001exec\u683c\u5f0f exec\u683c\u5f0f(\u5e38\u7528)\uff1a[\"\u547d\u4ee4\u7684\u7edd\u5bf9\u8def\u5f84\",\"\u53c2\u65701\",\"\u53c2\u65702\"] shell\u683c\u5f0f\uff1a\u547d\u4ee4\u7684\u7edd\u5bf9\u8def\u5f84 \u53c2\u65701 \u53c2\u65702 CMD [\"python\", \"fun.py\"] # CMD [\"/bin/ls\",\"/\",\"/etc\"] # CMD python fun.py 11\u3001ENTRYPOINT \u4e0eCMD\u7c7b\u4f3c\uff0c\u5f53\u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u5982\u679c\u6307\u5b9a\u4e86\u5176\u4ed6\u547d\u4ee4\uff0c\u90a3\u4e48ENTRYPOINT\u4e0d\u4f1a\u88ab\u8986\u76d6 \u5982\u679c\u6709\u591a\u4e2aENTRYPOINT\uff0c\u90a3\u4e48\u53ea\u6709\u6700\u540e\u4e00\u4e2aENTRYPOINT\u4f1a\u88ab\u6267\u884c \u53ef\u4ee5\u4e0eCMD\u4e00\u8d77\u7528\uff0c\u653e\u5728ENTRYPOINT\u540e\u9762\uff0c\u4f5c\u4e3aENTRYPOINT\u9ed8\u8ba4\u53c2\u6570 ENTRYPOINT [\"python\", \"fun.py\"] ENTRYPOINT [\"cat\", \"fun.py\"] CMD [\"etc/passwd\"] # \u53ef\u4ee5\u6307\u5b9ashell\u811a\u672c ENTRYPOINT [\"/bin/sh\",\"docker-entrypoint.sh\"] 12\u3001ARG \u6784\u5efa\u53c2\u6570 \u548cENV\u7684\u6548\u679c\u4e00\u6837\uff0c\u90fd\u662f\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf ARG\u6240\u8bbe\u7f6e\u7684\u6784\u5efa\u73af\u5883\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5728\u5c06\u6765\u5bb9\u5668\u8fd0\u884c\u65f6\u662f\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u7684 \u4e0d\u8981\u56e0\u6b64\u4f7f\u7528ARG\u4fdd\u5b58\u5bc6\u7801\u4e4b\u7c7b\u7684\u4fe1\u606f\uff0c docker history \u662f\u53ef\u4ee5\u770b\u5230\u6240\u6709\u503c\u7684 \u5b9a\u4e49\u7684\u503c\u53ef\u4ee5\u5728 docker build \u4e2d\u7528 --build-arg <\u53c2\u6570\u540d>=<\u503c> \u8fdb\u884c\u8986\u76d6 \u751f\u6548\u8303\u56f4 \u5982\u679c\u662f\u5728 FROM \u6307\u4ee4\u4e4b\u524d\u6307\u5b9a\uff0c\u90a3\u4e48\u53ea\u80fd\u7528\u4e8e FROM \u6307\u4ee4\u4e2d # \u53ea\u5728 FROM \u4e2d\u751f\u6548 ARG DOCKER_USERNAME=library FROM ${DOCKER_USERNAME}/alpine # \u8981\u60f3\u5728 FROM \u4e4b\u540e\u4f7f\u7528\uff0c\u5fc5\u987b\u518d\u6b21\u6307\u5b9a ARG DOCKER_USERNAME=library RUN set -x ; echo ${DOCKER_USERNAME} 13\u3001USER \u6307\u5b9a\u5f53\u524d\u7528\u6237 USER\u53ea\u662f\u5e2e\u52a9\u5207\u6362\u5230\u6307\u5b9a\u7528\u6237\uff0c\u5e76\u4e0d\u4f1a\u521b\u5efa\u7528\u6237 USER root \u901a\u8fc7Dockerfile\u6587\u4ef6\u6784\u5efa\u955c\u50cf docker build -t \u955c\u50cf\u540d:tag -f \u6307\u5b9aDockerfile\u6587\u4ef6\u8def\u5f84 . -t \u6307\u5b9a\u6784\u5efa\u7684\u955c\u50cf\u540d\u79f0\u548ctag\uff0c\u5982\u679c\u4e0d\u6307\u5b9atag\uff0c\u9ed8\u8ba4\u4f7f\u7528latest\uff0c\u955c\u50cf\u540d\u4e00\u822c\u4e3a\u7528\u6237\u540d/\u955c\u50cf\u540d\u79f0 -f \u6307\u5b9aDockerfile\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u547d\u540d\u4e3aDockerfile\uff0c\u4e14\u5728\u5f53\u524d\u8def\u5f84\u4e0b\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e0d\u7528\u6307\u5b9a\uff0c\u5426\u5219\u5fc5\u987b\u6307\u5b9a . \u4ee3\u8868\u5c06\u5f53\u524d\u8def\u5f84\u4f5c\u4e3a\u6784\u5efa\u4e0a\u4e0b\u6587 Dockerfile\u6587\u4ef6 FROM python:alpine LABEL maintaier=\"Desire <desireyang.qq.com>\" LABEL description=\"define Dockerfile Demo\" COPY . /app # ADD https://github.com/docker-library/python/raw/master/update.sh . WORKDIR /app RUN pip install -r requirements.txt ENV username=Desire\\ password=123456 VOLUME /app # EXPOSE 8000 CMD [\"python\", \"fun.py\"] # CMD [\"/bin/ls\",\"/\",\"/etc\"] # CMD python fun.py # ENTRYPOINT [\"python\", \"fun.py\"] # ENTRYPOINT [\"cat\", \"fun.py\"] # CMD [\"etc/passwd\"] # \u53ef\u4ee5\u6307\u5b9ashell\u811a\u672c # ENTRYPOINT [\"/bin/sh\",\"docker-entrypoint.sh\"] \u4e94\u3001docker-compose 1\u3001\u5b89\u88c5 # \u8fd0\u884c\u6b64\u547d\u4ee4\u4e0b\u8f7d\u5f53\u524d\u7684 Docker Compose \u7a33\u5b9a\u7248\u672c sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose # \u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e94\u7528\u53ef\u6267\u884c\u6743\u9650 sudo chmod +x /usr/local/bin/docker-compose # \u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f docker-compose --version 2\u3001\u4f7f\u7528docker-compose\u90e8\u7f72\u5e94\u7528 # \u6307\u5b9a\u7248\u672c\u4fe1\u606f version: '3' # \u5b9a\u4e49\u670d\u52a1\uff08\u5bb9\u5668\uff09 services: # \u521b\u5efa\u5177\u4f53\u7684\u670d\u52a1\uff08\u5bb9\u5668\uff09 db: # \u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u955c\u50cf\u540d\u79f0 # \u955c\u50cf\u540d:tag # \u5982\u679c\u672c\u5730\u6ca1\u6709\u6307\u5b9a\u955c\u50cf\uff0c\u90a3\u4e48\u4f1a\u4ecedocker hub\u4e2d\u4e0b\u8f7d\uff0c\u5426\u5219\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u7684\u955c\u50cf image: mariadb # \u5728\u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u6307\u5b9a\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\u6216\u8005\u53c2\u6570 command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci # \u6307\u5b9a\u6570\u636e\u6301\u4e45\u5316\u6620\u5c04 volumes: # - \u6570\u636e\u5377\u540d\u79f0\u6216\u8005\u5bbf\u4e3b\u673a\u6587\u4ef6\u3001\u8def\u5f84:\u5bb9\u5668\u4e2d\u7684\u8def\u5f84 - mysql_db:/var/lib/mysql # \u6307\u5b9a\u5bb9\u5668\u5931\u8d25\u65f6\uff08Existed\uff09\uff0c\u91cd\u542f\u7b56\u7565 restart: always # \u6307\u5b9a\u5bb9\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf environment: # \u53d8\u91cf\u540d: \u53d8\u91cf\u503c MYSQL_ROOT_PASSWORD: \"123456\" MYSQL_DATABASE: my_django # \u6307\u5b9a\u5f53\u524d\u5bb9\u5668\u9700\u8981\u52a0\u5165\u7684\u7f51\u7edc networks: - django_app_net django_app: # \u6307\u5b9a\u5f53\u524d\u670d\u52a1\uff08\u5bb9\u5668\uff09\u4f9d\u8d56\u7684\u670d\u52a1 depends_on: - db # \u6307\u5b9a\u901a\u8fc7Dockerfile\u53bb\u6784\u5efa\u955c\u50cf\uff08Dockerfile\u6240\u5728\u8def\u5f84\uff09 build: ./django # \u5728build\u4e0b\u65b9\uff0c\u6307\u5b9a\u6784\u5efa\u7684\u955c\u50cf\u540d\u79f0:tag image: desireyang/django_app:v2 restart: always volumes: - logs:/usr/src/app/logs/ - django_code:/usr/src/app/web_test/ networks: - django_app_net web: depends_on: - django_app build: ./nginx image: desireyang/web:v2 restart: always # \u5c06\u5bb9\u5668\u4e2d\u76d1\u542c\u7684\u7aef\u53e3\u4e0e\u5bbf\u4e3b\u673a\u7aef\u53e3\u955c\u50cf\u6620\u5c04 ports: - \"8444:80\" - \"8440:8000\" volumes: - logs:/var/log/nginx/ networks: - django_app_net # \u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u7f51\u7edc networks: # \u6307\u5b9a\u7f51\u7edc\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4f1a\u521b\u5efabridge\u6865\u63a5\u7f51\u7edc django_app_net: # \u6307\u5b9a\u6570\u636e\u5377 volumes: mysql_db: django_code: logs: 3\u3001\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef docker-compose config 4\u3001\u53ea\u6784\u5efa\u4e0d\u8fd0\u884c docker-compose build 5\u3001\u8fd0\u884c docker-compose up -d # \u5982\u679cdocker-compose\u6587\u4ef6\u540d\u4e0d\u662fdocker-compose.yml\uff0c\u9700\u8981\u52a0\u4e0a-f\u6307\u5b9a\u6587\u4ef6 docker-compose up -d -f docker-compose-django.yml","title":"docker\u7b14\u8bb0"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#docker","text":"","title":"docker\u7b14\u8bb0"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#dockercentos-8","text":"","title":"\u5b89\u88c5Docker(CentOS 8)"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1yum-utilsyum-config-manager","text":"sudo yum -y install yum-utils","title":"1\u3001\u5b89\u88c5yum-utils\u547d\u4ee4\u5305\uff08yum-config-manager\u547d\u4ee4\u9700\u8981\uff09"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2","text":"sudo yum-config-manager \\ --add-repo \\ https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo","title":"2\u3001\u6dfb\u52a0\u8f6f\u4ef6\u6e90\u4fe1\u606f(\u56fd\u5185\u6e90, \u901f\u5ea6\u66f4\u5feb, \u63a8\u8350)"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#3docker-ce","text":"yum makecache fast(\u53ef\u80fd\u4f1a\u62a5\u9519\uff0c\u62a5\u9519\u7684\u8bdd\uff0c\u7528\u4e0b\u9762\u7684) yum makecache (CentOS8\u6ca1\u6709fast\u53c2\u6570\uff0c\u53ef\u4ee5\u53bb\u6389)","title":"3\u3001\u66f4\u65b0Docker-CE"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#4docker-engine","text":"yum install docker-ce docker-ce-cli containerd.io","title":"4\u3001\u5b89\u88c5Docker Engine"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#5docker","text":"systemctl enable docker(\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f\u52a8) systemctl start docker","title":"5\u3001\u5f00\u542fdocker"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#6","text":"docker run hello-world \u5982\u679c\u51fa\u73b0\u201cHello from Docker!\u201d\uff0c\u5219\u4ee3\u8868\u8fd0\u884c\u6210\u529f","title":"6\u3001\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#7docker","text":"docker version","title":"7\u3001docker \u7248\u672c\u4fe1\u606f"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#docker_1","text":"","title":"docker"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#docker_2","text":"","title":"\u4e00\u3001docker\u57fa\u672c\u64cd\u4f5c"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1docker-image","text":"\u5217\u51fa\u955c\u50cf # \u5217\u51fa\u6240\u6709\u955c\u50cf docker images # \u4ec5\u5217\u51fa\u955c\u50cf\u7684ID docker images -q \u641c\u7d22\u955c\u50cf docker search mysql \u4e0b\u8f7d\u955c\u50cf docker pull nginx \u5220\u9664\u955c\u50cf docker rmi ImageID \u67e5\u770b\u955c\u50cf\u8be6\u7ec6\u4fe1\u606f docker inspect jenkins","title":"1\u3001docker image(\u955c\u50cf)"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2docker-container","text":"\u8fd0\u884c\u5bb9\u5668 docker run image docker run centos # \u542f\u52a8\u5bb9\u5668\u5e76\u6253\u5f00\u5bb9\u5668bash\u7ec8\u7aef docker run -it centos /bin/bash docker run --name web -d -p 8080:80 -v $PWD:/usr/share/nginx/html nginx \u53c2\u6570\uff1a-i -t --name -d -p -P -v --net docker exec -it mysql /bin/bash -i \u5df2\u4ea4\u4e92\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\uff0c\u901a\u5e38\u4e0e-t\u540c\u65f6\u4f7f\u7528 -t \u4e3a\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u4f2a\u8f93\u5165\u7ec8\u7aef\uff0c\u901a\u5e38\u4e0e-i\u540c\u65f6\u4f7f\u7528 --name \u4e3a\u5bb9\u5668\u6307\u5b9a\u4e00\u4e2a\u540d\u79f0 -d \u540e\u53f0\u8fd0\u884c\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u5bb9\u5668ID -p \u4ee3\u8868\u7aef\u53e3\u6620\u5c04\uff0c\u683c\u5f0f\u4e3a \u5bbf\u4e3b\u673a\u6620\u5c04\u7aef\u53e3:\u5bb9\u5668\u8fd0\u884c\u7aef\u53e3 -P \u968f\u673a\u7aef\u53e3\u6620\u5c04\uff0c\u5bb9\u5668\u5185\u90e8\u7aef\u53e3\u968f\u673a\u6620\u5c04\u5230\u4e3b\u673a\u7684\u7aef\u53e3 -v \u6620\u5c04\u76ee\u5f55\uff0c\u5c06\u5bb9\u5668\u5185\u7684\u914d\u7f6e\u4e0e\u6570\u636e\u6587\u4ef6\u5939\uff0c\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u76ee\u5f55 -e \u4ee3\u8868\u6dfb\u52a0\u73af\u5883\u53d8\u91cf --net\u6307\u5b9a\u5bb9\u5668\u7684\u7f51\u7edc\u8fde\u63a5\u7c7b\u578b\uff0c\u652f\u6301bridge/host/none/container\u56db\u79cd\u7c7b\u578b --volume \u7ed1\u5b9a\u4e00\u4e2a\u5377 -h \u6307\u5b9a\u5bb9\u5668\u7684hostname \u5217\u51fa\u5bb9\u5668 # \u5217\u51fa\u5f53\u524d\u8fd0\u884c\u7684\u5bb9\u5668 docker ps # \u5217\u51fa\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u5bb9\u5668 docker ps -a # \u5217\u51fa\u5bb9\u5668\u4e0a\u8fd0\u884c\u7684\u6240\u6709\u5386\u53f2\u547d\u4ee4 sudo docker history centos \u67e5\u770b\u5bb9\u5668\u7684\u8fdb\u7a0b\u548c\u8d44\u6e90\u5229\u7528\u60c5\u51b5 # \u67e5\u770b\u5bb9\u5668\u7684\u8fdb\u7a0b docker top ContainerID # \u67e5\u770b\u5bb9\u5668\u7684\u8d44\u6e90\u5229\u7528\u60c5\u51b5 docker stats ContainerID \u505c\u6b62/\u5f00\u542f\u5bb9\u5668 # \u505c\u6b62\u5bb9\u5668 docker stop ContainerID # \u5f00\u542f\u5bb9\u5668 docker restart ContainerID \u6682\u505c/\u542f\u52a8\u5bb9\u5668 # \u6682\u505c\u5bb9\u5668 docker pause web # \u542f\u52a8\u5bb9\u5668 docker unpause web \u5220\u9664\u5bb9\u5668 # \u5220\u9664\u4e00\u4e2a\u672a\u8fd0\u884c\u7684\u5bb9\u5668 docker rm web # \u5220\u9664\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668 docker rm -f web","title":"2\u3001docker container(\u5bb9\u5668)"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#docker_3","text":"","title":"\u4e8c\u3001docker\u7f51\u7edc"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1docker0","text":"\u9ed8\u8ba4\u5bb9\u5668\u4e0e\u5bbf\u4e3b\u673a\u4e4b\u95f4\u7684\u6865\u6881","title":"1\u3001docker0"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2_1","text":"bridge nat\u7f51\u7edc\u6a21\u578b \u865a\u62df\u4ea4\u6362\u673a host \u4e0e\u5bbf\u4e3b\u673a\u5171\u4eab\u7f51\u7edc --net=host none \u4e0d\u914d\u7f6e\u7f51\u7edc --net=none overlay \u4e0d\u540c\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1 \u4e0e\u4e00\u4e2a\u5bb9\u5668\u5171\u4eab\u7f51\u7edc --net=container:ContainerName","title":"2\u3001\u7f51\u7edc\u7c7b\u578b"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#3","text":"","title":"3\u3001\u76f8\u5173\u64cd\u4f5c"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1","text":"docker network ls docker network inspect networkname","title":"1\uff09\u67e5\u770b"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2_2","text":"docker network create --driver drivername name docker network create -d bridge --subnet 172.16.100.0/24 one_network","title":"2\uff09\u521b\u5efa"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#volume","text":"","title":"\u4e09\u3001volume \u6570\u636e\u5377"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1_1","text":"\u4f7f\u7528\u6570\u636e\u5377\u5b9e\u73b0\u6570\u636e\u6301\u4e45\u5316 \u6570\u636e\u5907\u4efd/\u6570\u636e\u5171\u4eab","title":"1\u3001\u4ecb\u7ecd"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2_3","text":"","title":"2\u3001\u76f8\u5173\u64cd\u4f5c"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1_2","text":"# \u624b\u52a8\u521b\u5efa docker volume create nginx11 # \u8fd0\u884c\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa docker run --name nginx33 -d -v nginx22:/usr/share/nginx/html -p 8888:80 nginx:alpine","title":"1\uff09\u521b\u5efa"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2_4","text":"# \u5217\u51fa\u6240\u6709\u7684volume\u5377 docker volume ls # \u67e5\u8be2\u6307\u5b9a\u7684volume\u5377\u7684\u8be6\u7ec6\u4fe1\u606f docker volume inspect nginx22","title":"2\uff09\u67e5\u770b"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#3_1","text":"docker run -v \u5bbf\u4e3b\u673a\u76ee\u5f55:\u5bb9\u5668\u76ee\u5f55 docker run --name nginx33 -d -v nginx22:/usr/share/nginx/html -p 8888:80 nginx:alpine","title":"3\uff09\u6302\u8f7d"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#4","text":"docker volume rm nginx11","title":"4\uff09\u5220\u9664"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#dockerfile","text":"\u53ef\u4ee5\u4f7f\u7528#\u53f7\u6307\u5b9a\u6ce8\u91ca\u4fe1\u606f \u6587\u4ef6\u540d\u4e00\u822c\u4e3aDockerfile \u53ef\u4ee5\u4f7f\u7528Dockerfile\u6587\u4ef6\u6765\u81ea\u5b9a\u4e49\u955c\u50cf \u6307\u5b9abase image\uff0c\u57fa\u672c\u955c\u50cf FROM\u4e00\u822c\u4e3a\u7b2c\u4e00\u884c\uff0cFROM\u57fa\u672c\u955c\u50cf\u540d\u79f0:tag\u7248\u672c\u7f16\u53f7 \u5982\u679c\u672c\u5730\u6ca1\u6709\uff0c\u4f1a\u81ea\u52a8\u4ecedocker hub \u8fdc\u7a0b\u4ed3\u5e93\u4e0b\u8f7d\uff0c\u5426\u5219\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u4ed3\u5e93\u63d0\u4f9b\u7684","title":"\u56db\u3001Dockerfile"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1from","text":"FROM\u4e00\u822c\u4e3a\u7b2c\u4e00\u884c\uff0cFROM\u57fa\u672c\u955c\u50cf\u540d\u79f0:tag\u7248\u672c\u7f16\u53f7 FROM python:alpine","title":"1\u3001FROM"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2label","text":"\u4f7f\u7528LABEL\u6307\u5b9a\u955c\u50cf\u7684\u5143\u6570\u636e\u4fe1\u606f\uff08\u63d0\u793a\u8bf4\u660e\u4f5c\u7528\uff09 LABEL key=value \u5982\u679cvalue\u4e2d\u6709\u7a7a\u683c\uff0c\u9700\u8981\u4f7f\u7528\u5f15\u53f7\u62ec\u8d77\u6765\u6216\u8005\u4f7f\u7528\\\u8fdb\u884c\u8f6c\u4e49","title":"2\u3001LABEL"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#3copy","text":"\u7528\u4e8e\u5c06\u5bbf\u4e3b\u673a\u4e2d\u7684\u8d44\u6e90\u590d\u5236\u7c98\u8d34\u81f3\u5bb9\u5668\u4e2d COPY \u5bbf\u4e3b\u673a\u8def\u5f84 \u5bb9\u5668\u4e2d\u7684\u8def\u5f84 \u5982\u679c\u5bb9\u5668\u4e2d\u6307\u5b9a\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa \u5982\u679c\u5c06\u4e00\u4e2a\u6587\u4ef6\u590d\u5236\u5230\u5bb9\u5668\u4e2d\uff0c\u6307\u5b9a\u7684\u5bb9\u5668\u8def\u5f84\uff0c\u5efa\u8bae\u6dfb\u52a0/ COPY . /app","title":"3\u3001COPY"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#4add","text":"ADD\u4e0eCOPY\u7c7b\u4f3c\uff0c\u7528\u4e8e\u5c06\u5bbf\u4e3b\u673a\u4e2d\u7684\u8d44\u6e90\u590d\u5236\u5230\u5bb9\u5668\u4e2d ADD \u53ef\u4ee5\u5c06\u8fdc\u7a0b\u6587\u4ef6\u4e0b\u8f7d\u4e4b\u540e\uff0c\u590d\u5236\u5230\u5bb9\u5668\u4e2d\uff1aADD \u8fdc\u7a0b\u6587\u4ef6\u94fe\u63a5 \u5bb9\u5668\u76ee\u5f55 \u4e5f\u53ef\u4ee5\u5c06\u672c\u5730\u7684\u538b\u7f29\u6587\u4ef6\u89e3\u538b\u4e4b\u540e\uff0c\u590d\u5236\u5230\u5bb9\u5668\u4e2d\uff1aADD \u672c\u5730\u538b\u7f29\u6587\u4ef6 \u5bb9\u5668\u76ee\u5f55 ADD https://github.com/docker-library/python/raw/master/update.sh .","title":"4\u3001ADD"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#5workdir","text":"\u76f8\u5f53\u4e8ecd\u547d\u4ee4\uff0c\u7528\u4e8e\u5bb9\u5668\u8fdb\u5165\u5230\u67d0\u4e2a\u76ee\u5f55\u4e2d \u5982\u679c\u6307\u5b9a\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa WORKDIR /app","title":"5\u3001WORKDIR"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#6run","text":"\u7528\u4e8e\u5728\u5bb9\u5668\u4e2d\u6267\u884clinux\u547d\u4ee4 \u6bcf\u4e00\u4e2aRUN\u6307\u4ee4\u4f1a\u72ec\u81ea\u5360\u4e00\u5c42 \u4e3a\u4e86\u4f18\u5316\u955c\u50cf\u7684\u5927\u5c0f\uff0c\u5982\u679c\u6709\u591a\u6761\u547d\u4ee4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aRUN\u6307\u4ee4\uff0c\u591a\u6761\u547d\u4ee4\u4e4b\u95f4&&\u6216\u8005;\u4f7f\u7528\\\u8fdb\u884c\u6362\u884c RUN pip install -r requirements.txt","title":"6\u3001RUN"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#7env","text":"ENV username=Desire\\ password=123456","title":"7\u3001ENV"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#8volume","text":"\u6307\u5b9a\u5bb9\u5668\u4e2d\u54ea\u4e9b\u76ee\u5f55\u53ef\u4ee5\u4e0e\u5bbf\u4e3b\u673a\u8fdb\u884c\u5171\u4eab LABEL maintaier=\"Desire <desireyang.qq.com>\" LABEL description=\"define Dockerfile Demo\"","title":"8\u3001VOLUME"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#9expose","text":"\u6307\u5b9a\u5bb9\u5668\u4e2d\u53ef\u4ee5\u66b4\u9732\u7684\u7aef\u53e3 EXPOSE 8000","title":"9\u3001EXPOSE"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#10cmd","text":"\u6307\u5b9a\u5bb9\u5668\u8fd0\u884c\uff08docker run \uff09\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u6267\u884c\u7684\u547d\u4ee4 \u5982\u679c\u5728\u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u6307\u5b9a\u4e86\u5176\u4ed6\u547d\u4ee4\uff0c\u90a3\u4e48CMD\u547d\u4ee4\u4f1a\u88ab\u8986\u76d6 \u5982\u679c\u6709\u591a\u4e2aCMD\u547d\u4ee4\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u4f1a\u88ab\u6267\u884c \u6709\u4e24\u79cd\u683c\u5f0f\uff0cshell\u683c\u5f0f\u3001exec\u683c\u5f0f exec\u683c\u5f0f(\u5e38\u7528)\uff1a[\"\u547d\u4ee4\u7684\u7edd\u5bf9\u8def\u5f84\",\"\u53c2\u65701\",\"\u53c2\u65702\"] shell\u683c\u5f0f\uff1a\u547d\u4ee4\u7684\u7edd\u5bf9\u8def\u5f84 \u53c2\u65701 \u53c2\u65702 CMD [\"python\", \"fun.py\"] # CMD [\"/bin/ls\",\"/\",\"/etc\"] # CMD python fun.py","title":"10\u3001CMD"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#11entrypoint","text":"\u4e0eCMD\u7c7b\u4f3c\uff0c\u5f53\u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u5982\u679c\u6307\u5b9a\u4e86\u5176\u4ed6\u547d\u4ee4\uff0c\u90a3\u4e48ENTRYPOINT\u4e0d\u4f1a\u88ab\u8986\u76d6 \u5982\u679c\u6709\u591a\u4e2aENTRYPOINT\uff0c\u90a3\u4e48\u53ea\u6709\u6700\u540e\u4e00\u4e2aENTRYPOINT\u4f1a\u88ab\u6267\u884c \u53ef\u4ee5\u4e0eCMD\u4e00\u8d77\u7528\uff0c\u653e\u5728ENTRYPOINT\u540e\u9762\uff0c\u4f5c\u4e3aENTRYPOINT\u9ed8\u8ba4\u53c2\u6570 ENTRYPOINT [\"python\", \"fun.py\"] ENTRYPOINT [\"cat\", \"fun.py\"] CMD [\"etc/passwd\"] # \u53ef\u4ee5\u6307\u5b9ashell\u811a\u672c ENTRYPOINT [\"/bin/sh\",\"docker-entrypoint.sh\"]","title":"11\u3001ENTRYPOINT"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#12arg","text":"\u6784\u5efa\u53c2\u6570 \u548cENV\u7684\u6548\u679c\u4e00\u6837\uff0c\u90fd\u662f\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf ARG\u6240\u8bbe\u7f6e\u7684\u6784\u5efa\u73af\u5883\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5728\u5c06\u6765\u5bb9\u5668\u8fd0\u884c\u65f6\u662f\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u7684 \u4e0d\u8981\u56e0\u6b64\u4f7f\u7528ARG\u4fdd\u5b58\u5bc6\u7801\u4e4b\u7c7b\u7684\u4fe1\u606f\uff0c docker history \u662f\u53ef\u4ee5\u770b\u5230\u6240\u6709\u503c\u7684 \u5b9a\u4e49\u7684\u503c\u53ef\u4ee5\u5728 docker build \u4e2d\u7528 --build-arg <\u53c2\u6570\u540d>=<\u503c> \u8fdb\u884c\u8986\u76d6 \u751f\u6548\u8303\u56f4 \u5982\u679c\u662f\u5728 FROM \u6307\u4ee4\u4e4b\u524d\u6307\u5b9a\uff0c\u90a3\u4e48\u53ea\u80fd\u7528\u4e8e FROM \u6307\u4ee4\u4e2d # \u53ea\u5728 FROM \u4e2d\u751f\u6548 ARG DOCKER_USERNAME=library FROM ${DOCKER_USERNAME}/alpine # \u8981\u60f3\u5728 FROM \u4e4b\u540e\u4f7f\u7528\uff0c\u5fc5\u987b\u518d\u6b21\u6307\u5b9a ARG DOCKER_USERNAME=library RUN set -x ; echo ${DOCKER_USERNAME}","title":"12\u3001ARG"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#13user","text":"\u6307\u5b9a\u5f53\u524d\u7528\u6237 USER\u53ea\u662f\u5e2e\u52a9\u5207\u6362\u5230\u6307\u5b9a\u7528\u6237\uff0c\u5e76\u4e0d\u4f1a\u521b\u5efa\u7528\u6237 USER root","title":"13\u3001USER"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#dockerfile_1","text":"docker build -t \u955c\u50cf\u540d:tag -f \u6307\u5b9aDockerfile\u6587\u4ef6\u8def\u5f84 . -t \u6307\u5b9a\u6784\u5efa\u7684\u955c\u50cf\u540d\u79f0\u548ctag\uff0c\u5982\u679c\u4e0d\u6307\u5b9atag\uff0c\u9ed8\u8ba4\u4f7f\u7528latest\uff0c\u955c\u50cf\u540d\u4e00\u822c\u4e3a\u7528\u6237\u540d/\u955c\u50cf\u540d\u79f0 -f \u6307\u5b9aDockerfile\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u547d\u540d\u4e3aDockerfile\uff0c\u4e14\u5728\u5f53\u524d\u8def\u5f84\u4e0b\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e0d\u7528\u6307\u5b9a\uff0c\u5426\u5219\u5fc5\u987b\u6307\u5b9a . \u4ee3\u8868\u5c06\u5f53\u524d\u8def\u5f84\u4f5c\u4e3a\u6784\u5efa\u4e0a\u4e0b\u6587","title":"\u901a\u8fc7Dockerfile\u6587\u4ef6\u6784\u5efa\u955c\u50cf"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#dockerfile_2","text":"FROM python:alpine LABEL maintaier=\"Desire <desireyang.qq.com>\" LABEL description=\"define Dockerfile Demo\" COPY . /app # ADD https://github.com/docker-library/python/raw/master/update.sh . WORKDIR /app RUN pip install -r requirements.txt ENV username=Desire\\ password=123456 VOLUME /app # EXPOSE 8000 CMD [\"python\", \"fun.py\"] # CMD [\"/bin/ls\",\"/\",\"/etc\"] # CMD python fun.py # ENTRYPOINT [\"python\", \"fun.py\"] # ENTRYPOINT [\"cat\", \"fun.py\"] # CMD [\"etc/passwd\"] # \u53ef\u4ee5\u6307\u5b9ashell\u811a\u672c # ENTRYPOINT [\"/bin/sh\",\"docker-entrypoint.sh\"]","title":"Dockerfile\u6587\u4ef6"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#docker-compose","text":"","title":"\u4e94\u3001docker-compose"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#1_3","text":"# \u8fd0\u884c\u6b64\u547d\u4ee4\u4e0b\u8f7d\u5f53\u524d\u7684 Docker Compose \u7a33\u5b9a\u7248\u672c sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose # \u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e94\u7528\u53ef\u6267\u884c\u6743\u9650 sudo chmod +x /usr/local/bin/docker-compose # \u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f docker-compose --version","title":"1\u3001\u5b89\u88c5"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#2docker-compose","text":"# \u6307\u5b9a\u7248\u672c\u4fe1\u606f version: '3' # \u5b9a\u4e49\u670d\u52a1\uff08\u5bb9\u5668\uff09 services: # \u521b\u5efa\u5177\u4f53\u7684\u670d\u52a1\uff08\u5bb9\u5668\uff09 db: # \u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u955c\u50cf\u540d\u79f0 # \u955c\u50cf\u540d:tag # \u5982\u679c\u672c\u5730\u6ca1\u6709\u6307\u5b9a\u955c\u50cf\uff0c\u90a3\u4e48\u4f1a\u4ecedocker hub\u4e2d\u4e0b\u8f7d\uff0c\u5426\u5219\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u7684\u955c\u50cf image: mariadb # \u5728\u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u6307\u5b9a\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\u6216\u8005\u53c2\u6570 command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci # \u6307\u5b9a\u6570\u636e\u6301\u4e45\u5316\u6620\u5c04 volumes: # - \u6570\u636e\u5377\u540d\u79f0\u6216\u8005\u5bbf\u4e3b\u673a\u6587\u4ef6\u3001\u8def\u5f84:\u5bb9\u5668\u4e2d\u7684\u8def\u5f84 - mysql_db:/var/lib/mysql # \u6307\u5b9a\u5bb9\u5668\u5931\u8d25\u65f6\uff08Existed\uff09\uff0c\u91cd\u542f\u7b56\u7565 restart: always # \u6307\u5b9a\u5bb9\u5668\u4e2d\u7684\u5168\u5c40\u53d8\u91cf environment: # \u53d8\u91cf\u540d: \u53d8\u91cf\u503c MYSQL_ROOT_PASSWORD: \"123456\" MYSQL_DATABASE: my_django # \u6307\u5b9a\u5f53\u524d\u5bb9\u5668\u9700\u8981\u52a0\u5165\u7684\u7f51\u7edc networks: - django_app_net django_app: # \u6307\u5b9a\u5f53\u524d\u670d\u52a1\uff08\u5bb9\u5668\uff09\u4f9d\u8d56\u7684\u670d\u52a1 depends_on: - db # \u6307\u5b9a\u901a\u8fc7Dockerfile\u53bb\u6784\u5efa\u955c\u50cf\uff08Dockerfile\u6240\u5728\u8def\u5f84\uff09 build: ./django # \u5728build\u4e0b\u65b9\uff0c\u6307\u5b9a\u6784\u5efa\u7684\u955c\u50cf\u540d\u79f0:tag image: desireyang/django_app:v2 restart: always volumes: - logs:/usr/src/app/logs/ - django_code:/usr/src/app/web_test/ networks: - django_app_net web: depends_on: - django_app build: ./nginx image: desireyang/web:v2 restart: always # \u5c06\u5bb9\u5668\u4e2d\u76d1\u542c\u7684\u7aef\u53e3\u4e0e\u5bbf\u4e3b\u673a\u7aef\u53e3\u955c\u50cf\u6620\u5c04 ports: - \"8444:80\" - \"8440:8000\" volumes: - logs:/var/log/nginx/ networks: - django_app_net # \u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u7f51\u7edc networks: # \u6307\u5b9a\u7f51\u7edc\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4f1a\u521b\u5efabridge\u6865\u63a5\u7f51\u7edc django_app_net: # \u6307\u5b9a\u6570\u636e\u5377 volumes: mysql_db: django_code: logs:","title":"2\u3001\u4f7f\u7528docker-compose\u90e8\u7f72\u5e94\u7528"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#3_2","text":"docker-compose config","title":"3\u3001\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#4_1","text":"docker-compose build","title":"4\u3001\u53ea\u6784\u5efa\u4e0d\u8fd0\u884c"},{"location":"Docker/001docker%E7%AC%94%E8%AE%B0/#5","text":"docker-compose up -d # \u5982\u679cdocker-compose\u6587\u4ef6\u540d\u4e0d\u662fdocker-compose.yml\uff0c\u9700\u8981\u52a0\u4e0a-f\u6307\u5b9a\u6587\u4ef6 docker-compose up -d -f docker-compose-django.yml","title":"5\u3001\u8fd0\u884c"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/","text":"docker\u5b89\u88c5\u96c6\u5408 Docker\u5b89\u88c5RabbitMQ \u4e0b\u8f7dDocker\u955c\u50cf # \u4e0b\u8f7d\u81ea\u5e26\u7ba1\u7406\u7684\u955c\u50cf docker pull rabbitmq:management \u542f\u52a8rabbitmq\u5bb9\u5668 docker run -d --hostname desire-rabbit --name desire-rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 -p 5672:5672 rabbitmq:management RABBITMQ_DEFAULT_USER \u8bbe\u7f6e\u767b\u5f55\u7528\u6237 RABBITMQ_DEFAULT_PASS \u8bbe\u7f6e\u767b\u5f55\u5bc6\u7801 -p 15672:15672 \u6620\u5c0415672\u7aef\u53e3\uff0c\u7528\u6765\u8bbf\u95ee\u7ba1\u7406\u540e\u53f0 -p 5672:5672 \u6620\u5c045672\u7aef\u53e3\uff0c\u7528\u6765\u8fde\u63a5\u64cd\u4f5crabbit \u8bbf\u95ee\u7ba1\u7406\u540e\u53f0 http://ip:15672 Docker\u5b89\u88c5mysql 1\u3001\u67e5\u770bmysql-docker\u955c\u50cf docker search mysql 2\u3001pull mysql\u955c\u50cf docker pull mysql 3\u3001\u8fd0\u884c\u5bb9\u5668 1\uff09\u521b\u5efa\u6620\u5c04\u6587\u4ef6 mkdir -p /home/docker/mysql/conf.d mkdir -p /home/docker/mysql/data 2\uff09\u8fd0\u884c\u5bb9\u5668\uff0c\u6dfb\u52a0\u6620\u5c04 docker run -di -p 3306:3306 -v /home/docker/mysql/conf.d:/etc/mysql/conf.d -v /home/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql -v \u6620\u5c04\u76ee\u5f55\uff0c\u5c06\u5bb9\u5668\u5185\u7684\u914d\u7f6e\u4e0e\u6570\u636e\u6587\u4ef6\u5939\uff0c\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u76ee\u5f55 -p \u4ee3\u8868\u7aef\u53e3\u6620\u5c04\uff0c\u683c\u5f0f\u4e3a \u5bbf\u4e3b\u673a\u6620\u5c04\u7aef\u53e3:\u5bb9\u5668\u8fd0\u884c\u7aef\u53e3 -e \u4ee3\u8868\u6dfb\u52a0\u73af\u5883\u53d8\u91cf MYSQL_ROOT_PASSWORD\u662froot\u7528\u6237\u7684\u767b\u9646\u5bc6\u7801","title":"docker\u5b89\u88c5\u96c6\u5408"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#docker","text":"","title":"docker\u5b89\u88c5\u96c6\u5408"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#dockerrabbitmq","text":"","title":"Docker\u5b89\u88c5RabbitMQ"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#docker_1","text":"# \u4e0b\u8f7d\u81ea\u5e26\u7ba1\u7406\u7684\u955c\u50cf docker pull rabbitmq:management","title":"\u4e0b\u8f7dDocker\u955c\u50cf"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#rabbitmq","text":"docker run -d --hostname desire-rabbit --name desire-rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 -p 5672:5672 rabbitmq:management RABBITMQ_DEFAULT_USER \u8bbe\u7f6e\u767b\u5f55\u7528\u6237 RABBITMQ_DEFAULT_PASS \u8bbe\u7f6e\u767b\u5f55\u5bc6\u7801 -p 15672:15672 \u6620\u5c0415672\u7aef\u53e3\uff0c\u7528\u6765\u8bbf\u95ee\u7ba1\u7406\u540e\u53f0 -p 5672:5672 \u6620\u5c045672\u7aef\u53e3\uff0c\u7528\u6765\u8fde\u63a5\u64cd\u4f5crabbit","title":"\u542f\u52a8rabbitmq\u5bb9\u5668"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#_1","text":"http://ip:15672","title":"\u8bbf\u95ee\u7ba1\u7406\u540e\u53f0"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#dockermysql","text":"","title":"Docker\u5b89\u88c5mysql"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#1mysql-docker","text":"docker search mysql","title":"1\u3001\u67e5\u770bmysql-docker\u955c\u50cf"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#2pull-mysql","text":"docker pull mysql","title":"2\u3001pull mysql\u955c\u50cf"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#3","text":"","title":"3\u3001\u8fd0\u884c\u5bb9\u5668"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#1","text":"mkdir -p /home/docker/mysql/conf.d mkdir -p /home/docker/mysql/data","title":"1\uff09\u521b\u5efa\u6620\u5c04\u6587\u4ef6"},{"location":"Docker/002docker%E5%AE%89%E8%A3%85%E9%9B%86%E5%90%88/#2","text":"docker run -di -p 3306:3306 -v /home/docker/mysql/conf.d:/etc/mysql/conf.d -v /home/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql -v \u6620\u5c04\u76ee\u5f55\uff0c\u5c06\u5bb9\u5668\u5185\u7684\u914d\u7f6e\u4e0e\u6570\u636e\u6587\u4ef6\u5939\uff0c\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u76ee\u5f55 -p \u4ee3\u8868\u7aef\u53e3\u6620\u5c04\uff0c\u683c\u5f0f\u4e3a \u5bbf\u4e3b\u673a\u6620\u5c04\u7aef\u53e3:\u5bb9\u5668\u8fd0\u884c\u7aef\u53e3 -e \u4ee3\u8868\u6dfb\u52a0\u73af\u5883\u53d8\u91cf MYSQL_ROOT_PASSWORD\u662froot\u7528\u6237\u7684\u767b\u9646\u5bc6\u7801","title":"2\uff09\u8fd0\u884c\u5bb9\u5668\uff0c\u6dfb\u52a0\u6620\u5c04"},{"location":"FastAPI/001FastAPI%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","text":"FastAPI\u7b80\u5355\u4f7f\u7528 1\u3001\u5b89\u88c5 pip install fastapi pip install uvicorn 2\u3001\u7b80\u5355\u7684demo main.py from fastapi import FastAPI app = FastAPI() @app.get(\"/\") async def root(): return {\"message\": \"Hello World\"} 3\u3001\u8fd0\u884c uvicorn main:app --port 8888 --reload \u547d\u4ee4\u542b\u4e49\u5982\u4e0b: main\uff1amain.py \u6587\u4ef6\uff08\u4e00\u4e2a Python\u300c\u6a21\u5757\u300d\uff09\u3002 app\uff1a\u5728 main.py \u6587\u4ef6\u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --port\uff1a\u6267\u884c\u7aef\u53e3\u53f7 --reload\uff1a\u8ba9\u670d\u52a1\u5668\u5728\u66f4\u65b0\u4ee3\u7801\u540e\u91cd\u65b0\u542f\u52a8\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u8be5\u9009\u9879\u3002 4\u3001 \u8bbf\u95ee http://127.0.0.1:8888 # \u8bbf\u95ee\u63a5\u53e3 http://127.0.0.1:8888/docs # \u4ea4\u4e92\u5f0fAPI\u6587\u6863\uff08Swagger UI\uff09 http://127.0.0.1:8888/redoc # \u53ef\u9009\u7684API\u6587\u6863","title":"FastAPI\u7b80\u5355\u4f7f\u7528"},{"location":"FastAPI/001FastAPI%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#fastapi","text":"","title":"FastAPI\u7b80\u5355\u4f7f\u7528"},{"location":"FastAPI/001FastAPI%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#1","text":"pip install fastapi pip install uvicorn","title":"1\u3001\u5b89\u88c5"},{"location":"FastAPI/001FastAPI%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#2demo","text":"main.py from fastapi import FastAPI app = FastAPI() @app.get(\"/\") async def root(): return {\"message\": \"Hello World\"}","title":"2\u3001\u7b80\u5355\u7684demo"},{"location":"FastAPI/001FastAPI%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#3","text":"uvicorn main:app --port 8888 --reload \u547d\u4ee4\u542b\u4e49\u5982\u4e0b: main\uff1amain.py \u6587\u4ef6\uff08\u4e00\u4e2a Python\u300c\u6a21\u5757\u300d\uff09\u3002 app\uff1a\u5728 main.py \u6587\u4ef6\u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --port\uff1a\u6267\u884c\u7aef\u53e3\u53f7 --reload\uff1a\u8ba9\u670d\u52a1\u5668\u5728\u66f4\u65b0\u4ee3\u7801\u540e\u91cd\u65b0\u542f\u52a8\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u8be5\u9009\u9879\u3002","title":"3\u3001\u8fd0\u884c"},{"location":"FastAPI/001FastAPI%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#4","text":"http://127.0.0.1:8888 # \u8bbf\u95ee\u63a5\u53e3 http://127.0.0.1:8888/docs # \u4ea4\u4e92\u5f0fAPI\u6587\u6863\uff08Swagger UI\uff09 http://127.0.0.1:8888/redoc # \u53ef\u9009\u7684API\u6587\u6863","title":"4\u3001 \u8bbf\u95ee"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/","text":"JWT(JSON Web Tokens) \u4e00\u3001\u4f9d\u8d56\u5e93\u5b89\u88c5 jwt pip install jwt==1.2.0 python-jose \u7528\u4e8e\u751f\u6210\u548c\u68c0\u9a8cJWT\u4ee4\u724c pip install python-jose==3.2.0 passlib \u7528\u4e8e\u5904\u7406\u54c8\u5e0c\u5bc6\u7801\u7684\u5305 \u652f\u6301\u8bb8\u591a\u5b89\u5168\u54c8\u5e0c\u7b97\u6cd5\u4ee5\u53ca\u914d\u5408\u7b97\u6cd5\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f \u63a8\u8350\u7684\u7b97\u6cd5\u662f Bcrypt pip install passlib[Bcrypt]==1.7.4 \u4e8c\u3001\u54c8\u5e0c\u5e76\u6821\u9a8c\u5bc6\u7801 1\u3001\u521b\u5efa\u5bf9\u8c61\uff0c\u8fdb\u884c\u54c8\u5e0c\u548c\u6821\u9a8c\u5bc6\u7801 from passlib.context import CryptContext # \u4f7f\u7528\u7684\u7b97\u6cd5\u662fBcrypt pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") 2\u3001\u54c8\u5e0c\u5bc6\u7801\uff1ahash(password) def get_password_hash(password): \"\"\" \u54c8\u5e0c\u6765\u81ea\u7528\u6237\u7684\u5bc6\u7801 :param password: \u539f\u5bc6\u7801 :return: \u54c8\u5e0c\u540e\u7684\u5bc6\u7801 \"\"\" return pwd_context.hash(password) # \u54c8\u5e0c\u540e\u7684\u5bc6\u7801 # $2b$12$sErK932BEaLyIisz30PubepN7w91RLwkISWbAFYgUgoIqh8goJLEW 3\u3001\u6821\u9a8c\u5bc6\u7801\uff1averify(plain_password, hashed_password) def verify_password(plain_password, hashed_password): \"\"\" \u6821\u9a8c\u63a5\u6536\u7684\u5bc6\u7801\u662f\u5426\u4e0e\u5b58\u50a8\u7684\u54c8\u5e0c\u503c\u5339\u914d :param plain_password: \u539f\u5bc6\u7801 :param hashed_password: \u54c8\u5e0c\u540e\u7684\u5bc6\u7801 :return: \u8fd4\u56de\u503c\u4e3abool\u7c7b\u578b\uff0c\u6821\u9a8c\u6210\u529f\u8fd4\u56deTrue,\u53cd\u4e4bFalse \"\"\" return pwd_context.verify(plain_password, hashed_password) \u4e09\u3001JWT\u4ee4\u724c\u9a8c\u8bc1\u52a0\u5bc6 1\u3001\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u5bc6\u94a5\uff0c\u7528\u4e8e\u5bf9JWT\u4ee4\u724c\u8fdb\u884c\u7b7e\u540d openssl rand -hex 32 # eac77e4e9a9a767b792779132e84ea37b1f4c31bec56714607f617a3fbdfbd53 2\u3001\u521b\u5efa\u5bc6\u94a5\u53d8\u91cf SECRET_KEY = \"eac77e4e9a9a767b792779132e84ea37b1f4c31bec56714607f617a3fbdfbd53\" 3\u3001\u521b\u5efa\u7528\u4e8e\u8bbe\u5b9aJWT\u4ee4\u724c\u7b7e\u540d\u7b97\u6cd5\u7684\u53d8\u91cf ALGORITHM = \"HS256\" 4\u3001\u521b\u5efa\u8bbe\u7f6e\u4ee4\u724c\u8fc7\u671f\u65f6\u95f4\u53d8\u91cf\uff08\u5355\u4f4d\uff1a\u5206\u949f\uff09 ACCESS_TOKEN_EXPIRE_MINUTES = 30 5\u3001\u6a21\u62df\u6570\u636e\u5e93\u7528\u6237\u4fe1\u606f users_db = { \"mockuser\":{ \"id\": 1, \"username\": \"mockuser\", \"email\": \"mock@user.com\", \"password\": \"$2b$12$sErK932BEaLyIisz30PubepN7w91RLwkISWbAFYgUgoIqh8goJLEW\", } } 6\u3001\u521b\u5efa\u6240\u9700\u6a21\u578b\u7c7b from typing import Optional from pydantic import BaseModel, EmailStr 1) \u7528\u6237\u6a21\u578b\u57fa\u7c7b class UserBase(BaseModel): id: Optional[int] = False username: str = None # pip install pydantic[email] email: Optional[EmailStr] = None 2\uff09\u767b\u5f55\u6210\u529f\u8fd4\u56detoken\u6a21\u578b class TokenModel(UserBase): token: str = None 3\uff09\u7528\u6237\u767b\u5f55\u6a21\u578b class LoginModel(BaseModel): username: str = None password: str = None 4\uff09\u521b\u5efa\u7528\u6237\u6a21\u578b class CreateModel(UserBase): password: str 7\u3001\u521b\u5efa\u751f\u6210\u8bbf\u95ee\u4ee4\u724c\u7684\u51fd\u6570 def create_access_token(data: dict, expires_delta: Optional[timedelta] = None): \"\"\" :param data: \u9700\u8981\u8fdb\u884cJWT\u4ee4\u724c\u52a0\u5bc6\u7684\u6570\u636e\uff08\u89e3\u5bc6\u7684\u65f6\u5019\u4f1a\u7528\u5230\uff09 :param expires_delta: \u4ee4\u724c\u6709\u6548\u671f :return: token \"\"\" to_encode = data.copy() if expires_delta: expire = datetime.utcnow() + expires_delta else: expire = datetime.utcnow() + timedelta(minutes=15) # \u6dfb\u52a0\u5931\u6548\u65f6\u95f4 to_encode.update({\"exp\": expire}) # SECRET_KEY\uff1a\u5bc6\u94a5 # ALGORITHM\uff1aJWT\u4ee4\u724c\u7b7e\u540d\u7b97\u6cd5 encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM) return encoded_jwt 8\u3001\u6821\u9a8c\u7528\u6237\u529f\u80fd\u51fd\u6570 def check_user(username, password): \"\"\" \u6821\u9a8c\u7528\u6237\uff08\u771f\u5b9e\u7684\u5e94\u8be5\u662f\u8ddfDB\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd9\u91cc\u53ea\u662f\u505a\u6f14\u793a\uff09 :param username: :param password: :return: \"\"\" user = users_db.get(username) if not user: return False if not verify_password(password, user.get(\"password\")): return False return user 9\u3001\u521b\u5efa\u767b\u5f55\u63a5\u53e3api # \u4f7f\u7528\u8868\u5355\u683c\u5f0f\u53c2\u6570\u9700\u8981\u5b89\u88c5\u6a21\u5757\uff1apython-multipart @app.post(\"/token\", response_model=TokenModel) async def login_for_access_token(username: str = Form(...), password: str = Form(...)): user = check_user(username, password) if not user: raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\" ) # \u8fc7\u671f\u65f6\u95f4 access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES) # \u628aid\u8fdb\u884cusername\u52a0\u5bc6\uff0c\u8981\u4f7f\u7528str\u7c7b\u578b access_token = create_access_token( data={\"sub\": user.get(\"username\")}, expires_delta=access_token_expires ) user.update({\"token\": access_token}) return user \u56db\u3001JWT\u4ee4\u724c\u9a8c\u8bc1\u89e3\u5bc6 1\u3001\u9a8c\u8bc1token def check_jwt_token(token: Optional[str] = Header(None)): \"\"\" \u9a8c\u8bc1token :param token: :return: \u8fd4\u56de\u7528\u6237\u4fe1\u606f \"\"\" try: payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM) username: str = payload.get(\"sub\") # \u901a\u8fc7\u89e3\u6790\u5f97\u5230\u7684username,\u83b7\u53d6\u7528\u6237\u4fe1\u606f,\u5e76\u8fd4\u56de return users_db.get(username) except (jwt.JWTError, jwt.ExpiredSignatureError, ValidationError): raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail={ 'code': 5000, 'message': \"Token Error\", 'data': \"Token Error\", } ) 2\u3001\u8bbf\u95ee\u5f53\u524d\u7528\u6237\u4fe1\u606f\u63a5\u53e3api # \u5b9a\u4e49\u8fd4\u56de\u6570\u636e\u683c\u5f0f\u4e3aUserBase\u6a21\u578b\u683c\u5f0f\u6570\u636e # \u628a\u6821\u9a8ctoken\u51fd\u6570\u5f53\u505a\u4f9d\u8d56\u9879\u8fdb\u884c\u8d4b\u503c\u7ed9user # \u9a8c\u8bc1\u6210\u529f\uff0c\u5e76\u8fd4\u56deuser @app.get(\"/user\", response_model=UserBase) async def get_user(*, user: UserBase = Depends(check_jwt_token)): return user 3\u3001\u9700\u8981token\u9a8c\u8bc1\u4f46\u4e0d\u9700\u8981\u7528\u6237\u4fe1\u606f\u6570\u636e\u63a5\u53e3api # \u5f53\u4e0d\u9700\u8981\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u65f6\uff0c\u53ef\u4ee5\u5c06\u4f9d\u8d56\u9879\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u53ea\u505a\u9a8c\u8bc1\u4f7f\u7528 @app.get(\"/pro\", dependencies=[Depends(check_jwt_token)]) async def get_projects(): return {\"projects\": \"pro\"}","title":"JWT(JSON Web Tokens)"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#jwtjson-web-tokens","text":"","title":"JWT(JSON Web Tokens)"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#_1","text":"","title":"\u4e00\u3001\u4f9d\u8d56\u5e93\u5b89\u88c5"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#jwt","text":"pip install jwt==1.2.0","title":"jwt"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#python-jose","text":"\u7528\u4e8e\u751f\u6210\u548c\u68c0\u9a8cJWT\u4ee4\u724c pip install python-jose==3.2.0","title":"python-jose"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#passlib","text":"\u7528\u4e8e\u5904\u7406\u54c8\u5e0c\u5bc6\u7801\u7684\u5305 \u652f\u6301\u8bb8\u591a\u5b89\u5168\u54c8\u5e0c\u7b97\u6cd5\u4ee5\u53ca\u914d\u5408\u7b97\u6cd5\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f \u63a8\u8350\u7684\u7b97\u6cd5\u662f Bcrypt pip install passlib[Bcrypt]==1.7.4","title":"passlib"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#_2","text":"","title":"\u4e8c\u3001\u54c8\u5e0c\u5e76\u6821\u9a8c\u5bc6\u7801"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#1","text":"from passlib.context import CryptContext # \u4f7f\u7528\u7684\u7b97\u6cd5\u662fBcrypt pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")","title":"1\u3001\u521b\u5efa\u5bf9\u8c61\uff0c\u8fdb\u884c\u54c8\u5e0c\u548c\u6821\u9a8c\u5bc6\u7801"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#2hashpassword","text":"def get_password_hash(password): \"\"\" \u54c8\u5e0c\u6765\u81ea\u7528\u6237\u7684\u5bc6\u7801 :param password: \u539f\u5bc6\u7801 :return: \u54c8\u5e0c\u540e\u7684\u5bc6\u7801 \"\"\" return pwd_context.hash(password) # \u54c8\u5e0c\u540e\u7684\u5bc6\u7801 # $2b$12$sErK932BEaLyIisz30PubepN7w91RLwkISWbAFYgUgoIqh8goJLEW","title":"2\u3001\u54c8\u5e0c\u5bc6\u7801\uff1ahash(password)"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#3verifyplain_password-hashed_password","text":"def verify_password(plain_password, hashed_password): \"\"\" \u6821\u9a8c\u63a5\u6536\u7684\u5bc6\u7801\u662f\u5426\u4e0e\u5b58\u50a8\u7684\u54c8\u5e0c\u503c\u5339\u914d :param plain_password: \u539f\u5bc6\u7801 :param hashed_password: \u54c8\u5e0c\u540e\u7684\u5bc6\u7801 :return: \u8fd4\u56de\u503c\u4e3abool\u7c7b\u578b\uff0c\u6821\u9a8c\u6210\u529f\u8fd4\u56deTrue,\u53cd\u4e4bFalse \"\"\" return pwd_context.verify(plain_password, hashed_password)","title":"3\u3001\u6821\u9a8c\u5bc6\u7801\uff1averify(plain_password, hashed_password)"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#jwt_1","text":"","title":"\u4e09\u3001JWT\u4ee4\u724c\u9a8c\u8bc1\u52a0\u5bc6"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#1jwt","text":"openssl rand -hex 32 # eac77e4e9a9a767b792779132e84ea37b1f4c31bec56714607f617a3fbdfbd53","title":"1\u3001\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u5bc6\u94a5\uff0c\u7528\u4e8e\u5bf9JWT\u4ee4\u724c\u8fdb\u884c\u7b7e\u540d"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#2","text":"SECRET_KEY = \"eac77e4e9a9a767b792779132e84ea37b1f4c31bec56714607f617a3fbdfbd53\"","title":"2\u3001\u521b\u5efa\u5bc6\u94a5\u53d8\u91cf"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#3jwt","text":"ALGORITHM = \"HS256\"","title":"3\u3001\u521b\u5efa\u7528\u4e8e\u8bbe\u5b9aJWT\u4ee4\u724c\u7b7e\u540d\u7b97\u6cd5\u7684\u53d8\u91cf"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#4","text":"ACCESS_TOKEN_EXPIRE_MINUTES = 30","title":"4\u3001\u521b\u5efa\u8bbe\u7f6e\u4ee4\u724c\u8fc7\u671f\u65f6\u95f4\u53d8\u91cf\uff08\u5355\u4f4d\uff1a\u5206\u949f\uff09"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#5","text":"users_db = { \"mockuser\":{ \"id\": 1, \"username\": \"mockuser\", \"email\": \"mock@user.com\", \"password\": \"$2b$12$sErK932BEaLyIisz30PubepN7w91RLwkISWbAFYgUgoIqh8goJLEW\", } }","title":"5\u3001\u6a21\u62df\u6570\u636e\u5e93\u7528\u6237\u4fe1\u606f"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#6","text":"from typing import Optional from pydantic import BaseModel, EmailStr","title":"6\u3001\u521b\u5efa\u6240\u9700\u6a21\u578b\u7c7b"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#1_1","text":"class UserBase(BaseModel): id: Optional[int] = False username: str = None # pip install pydantic[email] email: Optional[EmailStr] = None","title":"1) \u7528\u6237\u6a21\u578b\u57fa\u7c7b"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#2token","text":"class TokenModel(UserBase): token: str = None","title":"2\uff09\u767b\u5f55\u6210\u529f\u8fd4\u56detoken\u6a21\u578b"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#3","text":"class LoginModel(BaseModel): username: str = None password: str = None","title":"3\uff09\u7528\u6237\u767b\u5f55\u6a21\u578b"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#4_1","text":"class CreateModel(UserBase): password: str","title":"4\uff09\u521b\u5efa\u7528\u6237\u6a21\u578b"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#7","text":"def create_access_token(data: dict, expires_delta: Optional[timedelta] = None): \"\"\" :param data: \u9700\u8981\u8fdb\u884cJWT\u4ee4\u724c\u52a0\u5bc6\u7684\u6570\u636e\uff08\u89e3\u5bc6\u7684\u65f6\u5019\u4f1a\u7528\u5230\uff09 :param expires_delta: \u4ee4\u724c\u6709\u6548\u671f :return: token \"\"\" to_encode = data.copy() if expires_delta: expire = datetime.utcnow() + expires_delta else: expire = datetime.utcnow() + timedelta(minutes=15) # \u6dfb\u52a0\u5931\u6548\u65f6\u95f4 to_encode.update({\"exp\": expire}) # SECRET_KEY\uff1a\u5bc6\u94a5 # ALGORITHM\uff1aJWT\u4ee4\u724c\u7b7e\u540d\u7b97\u6cd5 encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM) return encoded_jwt","title":"7\u3001\u521b\u5efa\u751f\u6210\u8bbf\u95ee\u4ee4\u724c\u7684\u51fd\u6570"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#8","text":"def check_user(username, password): \"\"\" \u6821\u9a8c\u7528\u6237\uff08\u771f\u5b9e\u7684\u5e94\u8be5\u662f\u8ddfDB\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd9\u91cc\u53ea\u662f\u505a\u6f14\u793a\uff09 :param username: :param password: :return: \"\"\" user = users_db.get(username) if not user: return False if not verify_password(password, user.get(\"password\")): return False return user","title":"8\u3001\u6821\u9a8c\u7528\u6237\u529f\u80fd\u51fd\u6570"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#9api","text":"# \u4f7f\u7528\u8868\u5355\u683c\u5f0f\u53c2\u6570\u9700\u8981\u5b89\u88c5\u6a21\u5757\uff1apython-multipart @app.post(\"/token\", response_model=TokenModel) async def login_for_access_token(username: str = Form(...), password: str = Form(...)): user = check_user(username, password) if not user: raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\" ) # \u8fc7\u671f\u65f6\u95f4 access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES) # \u628aid\u8fdb\u884cusername\u52a0\u5bc6\uff0c\u8981\u4f7f\u7528str\u7c7b\u578b access_token = create_access_token( data={\"sub\": user.get(\"username\")}, expires_delta=access_token_expires ) user.update({\"token\": access_token}) return user","title":"9\u3001\u521b\u5efa\u767b\u5f55\u63a5\u53e3api"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#jwt_2","text":"","title":"\u56db\u3001JWT\u4ee4\u724c\u9a8c\u8bc1\u89e3\u5bc6"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#1token","text":"def check_jwt_token(token: Optional[str] = Header(None)): \"\"\" \u9a8c\u8bc1token :param token: :return: \u8fd4\u56de\u7528\u6237\u4fe1\u606f \"\"\" try: payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM) username: str = payload.get(\"sub\") # \u901a\u8fc7\u89e3\u6790\u5f97\u5230\u7684username,\u83b7\u53d6\u7528\u6237\u4fe1\u606f,\u5e76\u8fd4\u56de return users_db.get(username) except (jwt.JWTError, jwt.ExpiredSignatureError, ValidationError): raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail={ 'code': 5000, 'message': \"Token Error\", 'data': \"Token Error\", } )","title":"1\u3001\u9a8c\u8bc1token"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#2api","text":"# \u5b9a\u4e49\u8fd4\u56de\u6570\u636e\u683c\u5f0f\u4e3aUserBase\u6a21\u578b\u683c\u5f0f\u6570\u636e # \u628a\u6821\u9a8ctoken\u51fd\u6570\u5f53\u505a\u4f9d\u8d56\u9879\u8fdb\u884c\u8d4b\u503c\u7ed9user # \u9a8c\u8bc1\u6210\u529f\uff0c\u5e76\u8fd4\u56deuser @app.get(\"/user\", response_model=UserBase) async def get_user(*, user: UserBase = Depends(check_jwt_token)): return user","title":"2\u3001\u8bbf\u95ee\u5f53\u524d\u7528\u6237\u4fe1\u606f\u63a5\u53e3api"},{"location":"FastAPI/002FastAPI-JWT%E9%AA%8C%E8%AF%81/#3tokenapi","text":"# \u5f53\u4e0d\u9700\u8981\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u65f6\uff0c\u53ef\u4ee5\u5c06\u4f9d\u8d56\u9879\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u53ea\u505a\u9a8c\u8bc1\u4f7f\u7528 @app.get(\"/pro\", dependencies=[Depends(check_jwt_token)]) async def get_projects(): return {\"projects\": \"pro\"}","title":"3\u3001\u9700\u8981token\u9a8c\u8bc1\u4f46\u4e0d\u9700\u8981\u7528\u6237\u4fe1\u606f\u6570\u636e\u63a5\u53e3api"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/","text":"\u5206\u9875\u529f\u80fd\u5b9e\u73b0 \u4e00\u3001\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff08fastapi-pagination\uff09 GitHub\uff1ahttps://github.com/uriyyo/fastapi-pagination \u6587\u6863\uff1ahttps://uriyyo-fastapi-pagination.netlify.app/ \u4e8c\u3001\u5b89\u88c5fastapi-pagination pip install fastapi-pagination \u4e09\u3001\u76f4\u63a5\u4f7f\u7528 from fastapi_pagination import Page, paginate, Params,add_pagination Page\uff1a\u7528\u4e8e\u5728\u8def\u5f84\u4e2d(response_model)\u58f0\u660e\u8fd4\u56de\u6a21\u578b Params\uff1a\u7528\u4e8e\u63d0\u4f9b\u5206\u9875\u53c2\u6570 paginate\uff1a\u7528\u4e8e\u5c06\u6570\u636e\u8fdb\u884c\u5206\u9875 1. \u4f7f\u7528\u4f9d\u8d56\u9879 from fastapi import FastAPI, Depends from fastapi_pagination import Page, paginate, add_pagination, Params from pydantic import BaseModel app = FastAPI() class User(BaseModel): name: str surname: str users = [ User(name='name', surname='name'), User(name='name2', surname='name'), User(name='name3', surname='name'), User(name='name4', surname='name'), User(name='name5', surname='name'), User(name='name6', surname='name'), User(name='name7', surname='name'), User(name='name8', surname='name'), User(name='name9', surname='name'), # ... ] # \u3010response_model=Page[User]\u3011\u5728\u8def\u5f84\u53c2\u6570\u4e2d\u58f0\u660e\u54cd\u5e94\u6570\u636e\u7c7b\u578b # \u3010params: Params = Depends()\u3011\u628aParams\u5f53\u505a\u4f9d\u8d56\u9879\u8fdb\u884c\u5f15\u5165 @app.get('/users', response_model=Page[User]) async def get_users(params: Params = Depends()): # \u5c06\u9700\u8981\u5206\u9875\u7684\u6570\u636e\u8fdb\u884c\u5206\u9875\uff0c\u628aparams\u53c2\u6570\u4f20\u5165 return paginate(users, params) 2. \u7701\u7565\u4f9d\u8d56\u9879 from fastapi import FastAPI, Depends from fastapi_pagination import Page, paginate, add_pagination, Params from pydantic import BaseModel app = FastAPI() class User(BaseModel): name: str surname: str users = [ User(name='name', surname='name'), User(name='name2', surname='name'), User(name='name3', surname='name'), User(name='name4', surname='name'), User(name='name5', surname='name'), User(name='name6', surname='name'), User(name='name7', surname='name'), User(name='name8', surname='name'), User(name='name9', surname='name'), # ... ] # \u3010response_model=Page[User]\u3011\u5728\u8def\u5f84\u53c2\u6570\u4e2d\u58f0\u660e\u54cd\u5e94\u6570\u636e\u7c7b\u578b @app.get('/users', response_model=Page[User]) async def get_users(): # \u5c06\u9700\u8981\u5206\u9875\u7684\u6570\u636e\u8fdb\u884c\u5206\u9875 return paginate(users) # \u5728\u63a5\u53e3\u51fd\u6570\u4e4b\u540e\uff0c\u4f7f\u7528add_pagination\u8fdb\u884c\u9ed8\u8ba4\u6dfb\u52a0\u5206\u9875\u4f9d\u8d56\u9879 add_pagination(app) \u56db\u3001Limit-Offset from fastapi import FastAPI from fastapi_pagination import LimitOffsetPage, add_pagination, paginate from pydantic import BaseModel app = FastAPI() class User(BaseModel): name: str surname: str users = [ User(name='name', surname='name'), User(name='name2', surname='name'), User(name='name3', surname='name'), User(name='name4', surname='name'), User(name='name5', surname='name'), User(name='name6', surname='name'), User(name='name7', surname='name'), User(name='name8', surname='name'), User(name='name9', surname='name'), # ... ] @app.get('/users', response_model=LimitOffsetPage[User]) async def get_users(): return paginate(users) add_pagination(app) \u4e94\u3001\u81ea\u5b9a\u4e49\u53c2\u6570\u4fe1\u606f 1.\u81ea\u5b9a\u4e49Params(\u628apage\u53c2\u6570\u8d77\u59cb\u503c\u6539\u4e3a1) from fastapi import Query from fastapi_pagination.bases import AbstractParams, RawParams from pydantic import BaseModel class Params(BaseModel, AbstractParams): # \u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a1\uff0c\u4e0d\u80fd\u591f\u5c0f\u4e8e1 page: int = Query(1, ge=1, description=\"Page number\") # \u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a20\uff0c\u6700\u5927\u4e3a100 size: int = Query(20, gt=0, le=100, description=\"Page size\") def to_raw_params(self) -> RawParams: return RawParams( limit=self.size, # \u66f4\u7231page\u53c2\u6570\u8d77\u59cb\u503c\u4ece1\u5f00\u59cb offset=self.size * (self.page - 1), ) 2.\u81ea\u5b9a\u4e49Page\u6a21\u578b from __future__ import annotations import math from typing import TypeVar, Generic, Sequence from fastapi_pagination.bases import AbstractPage T = TypeVar(\"T\") class Page(AbstractPage[T], Generic[T]): # \u4fee\u6539Page\u6a21\u578b data: Sequence[T] # \u6570\u636e total: int # \u603b\u6570\u636e\u6570 page: int # \u7b2cn\u9875 size: int # \u6bcf\u9875\u6570\u91cf next: str # \u4e0b\u4e00\u9875\u53c2\u6570 previous: str # \u4e0a\u4e00\u9875\u53c2\u6570 total_pages: int # \u603b\u9875\u6570 # \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684Params __params_type__ = Params # Set params related to Page @classmethod def create( cls, items: data, total: int, params: Params, ) -> Page[T]: # \u4eceparams\u83b7\u53d6page\u548csize page = params.page size = params.size # \u901a\u8fc7\u603b\u6570\u548c\u6bcf\u9875\u6570\u91cf\u8ba1\u7b97\u51fa\u603b\u9875\u6570 total_pages = math.ceil(total / params.size) # \u751f\u6210\u4e0b\u4e00\u9875\u53c2\u6570\uff08\u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u9875\u5219\u4e3anull\uff09 next = f\"?page={page + 1}&size={size}\" if (page + 1) <= total_pages else \"null\" # \u751f\u6210\u4e0a\u4e00\u9875\u53c2\u6570\uff08\u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u9875\u5219\u4e3anull\uff09 previous = f\"?page={page - 1}&size={size}\" if (page - 1) >= 1 else \"null\" # \u6839\u636e\u5b9a\u4e49\u7684\u6a21\u578b\u53c2\u6570\u8fdb\u884c\u8fd4\u56de return cls(data=items, total=total, page=params.page, size=params.size, next=next, previous=previous, total_pages=total_pages) 3.\u91cd\u5199\u6574\u5408\uff08pagination.py\uff09 from __future__ import annotations import math from typing import TypeVar, Generic, Sequence from fastapi import Query from fastapi_pagination.bases import AbstractPage, AbstractParams, RawParams from pydantic import BaseModel T = TypeVar(\"T\") class Params(BaseModel, AbstractParams): page: int = Query(1, ge=1, description=\"Page number\") size: int = Query(20, gt=0, le=100, description=\"Page size\") def to_raw_params(self) -> RawParams: return RawParams( limit=self.size, offset=self.size * (self.page - 1), ) class Page(AbstractPage[T], Generic[T]): results: Sequence[T] total: int page: int size: int next: str previous: str total_pages: int __params_type__ = Params # Set params related to Page @classmethod def create( cls, results: results, total: int, params: Params, ) -> Page[T]: page = params.page size = params.size total_pages = math.ceil(total / params.size) next = f\"?page={page + 1}&size={size}\" if (page + 1) <= total_pages else \"null\" previous = f\"?page={page - 1}&size={size}\" if (page - 1) >= 1 else \"null\" return cls(results=results, total=total, page=params.page, size=params.size, next=next, previous=previous, total_pages=total_pages) 4.\u4f7f\u7528\u81ea\u5b9a\u4e49\u540e\u7684\u5206\u9875\u529f\u80fd # \u628aPage\u4ece\u81ea\u5b9a\u4e49\u7684\u5305\u4e2d\u5bfc\u5165\u5373\u53ef from pagination import Page @app.get('/users', response_model=Page[User]) async def get_users(): return paginate(users) \u516d\u3001\u96c6\u6210SQLAlchemy\u4f7f\u7528 1\u3001\u7b80\u5355\u4f7f\u7528 1\uff09 \u66f4\u6539\u3010paginate\u3011\u5305\u7684\u8def\u5f84\u4e3a\u3010fastapi_pagination.ext.sqlalchemy\u3011 from fastapi_pagination.ext.sqlalchemy import paginate 2\uff09 \u521b\u5efa\u6570\u636e\u8fd4\u56de\u6a21\u578b class User(BaseModel): email: str password: str is_active: bool # \u8fd9\u4e2a\u914d\u7f6e\u5fc5\u987b\u5f97\u8981 class Config: orm_mode = True 3\uff09 \u4f7f\u7528\u3010sqlalchemy.paginate\u3011 # \u3010db: Session = Depends(get_db)\u3011\uff1a\u6570\u636e\u5e93\u4f9d\u8d56\u9879 @app.get('/users', response_model=Page[User]) async def get_users(db: Session = Depends(get_db)): # \u6b64\u5904\u7684\u53c2\u6570\u4e3a\u3010db.query(models.User)\u3011 # \u3010sqlalchemy.paginate\u3011\u7684\u53c2\u6570\u4e3a\u3010sqlalchemy.orm.query.Query\u3011\u7c7b\u578b return paginate(db.query(models.User)) 2\u3001\u4f7f\u7528\u5f02\u6b65 1\uff09\u5b89\u88c5\u652f\u6301\u5f02\u6b65\u7684 aiomysql pip install aiomysql 2\uff09 sqlalchemy \u5f15\u64ce\u9700\u8981\u5f02\u6b65\u521b\u5efa from sqlalchemy.ext.asyncio import create_async_engine # \u8fd9\u91cc\u8981\u4f7f\u7528\u652f\u6301\u5f02\u6b65\u7684aiomysql SQLALCHEMY_DATABASE_URL = \"mysql+aiomysql://root:123456@127.0.0.1:3306/users?charset=utf8\" # \u6ce8\u610fsqlite\u4e0d\u652f\u6301\u5f02\u6b65 engine = create_async_engine(SQLALCHEMY_DATABASE_URL) 3\uff09\u521b\u5efa\u5f02\u6b65\u7684\u6570\u636e\u5e93\u4f1a\u8bdd from sqlalchemy.ext.asyncio import AsyncSession SessionLocal = sessionmaker(bind=engine, class_=AsyncSession) 4\uff09\u521b\u5efa\u5f02\u6b65\u7684\u6570\u636e\u5e93\u4f9d\u8d56\u9879 # \u4f9d\u8d56\u9879\u8981\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570 async def get_db(): async with SessionLocal() as session: yield session 5\uff09 paginate \u4f7f\u7528 async_sqlalchemy \u6a21\u5757\u4e0b\u7684 from fastapi_pagination.ext.async_sqlalchemy import paginate from sqlalchemy.future import select @app.get('/users', response_model=Page[User]) async def get_users(db: Session = Depends(get_db)): # \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6570\u636e\u5e93\u8fde\u63a5 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aSelect\u7c7b\u578b\u7684\u53c2\u6570 # \u8981\u6dfb\u52a0await\u5173\u952e\u5b57 return await paginate(db, select(models.User))","title":"\u5206\u9875\u529f\u80fd\u5b9e\u73b0"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#_1","text":"","title":"\u5206\u9875\u529f\u80fd\u5b9e\u73b0"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#fastapi-pagination","text":"GitHub\uff1ahttps://github.com/uriyyo/fastapi-pagination \u6587\u6863\uff1ahttps://uriyyo-fastapi-pagination.netlify.app/","title":"\u4e00\u3001\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff08fastapi-pagination\uff09"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#fastapi-pagination_1","text":"pip install fastapi-pagination","title":"\u4e8c\u3001\u5b89\u88c5fastapi-pagination"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#_2","text":"from fastapi_pagination import Page, paginate, Params,add_pagination Page\uff1a\u7528\u4e8e\u5728\u8def\u5f84\u4e2d(response_model)\u58f0\u660e\u8fd4\u56de\u6a21\u578b Params\uff1a\u7528\u4e8e\u63d0\u4f9b\u5206\u9875\u53c2\u6570 paginate\uff1a\u7528\u4e8e\u5c06\u6570\u636e\u8fdb\u884c\u5206\u9875","title":"\u4e09\u3001\u76f4\u63a5\u4f7f\u7528"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#1","text":"from fastapi import FastAPI, Depends from fastapi_pagination import Page, paginate, add_pagination, Params from pydantic import BaseModel app = FastAPI() class User(BaseModel): name: str surname: str users = [ User(name='name', surname='name'), User(name='name2', surname='name'), User(name='name3', surname='name'), User(name='name4', surname='name'), User(name='name5', surname='name'), User(name='name6', surname='name'), User(name='name7', surname='name'), User(name='name8', surname='name'), User(name='name9', surname='name'), # ... ] # \u3010response_model=Page[User]\u3011\u5728\u8def\u5f84\u53c2\u6570\u4e2d\u58f0\u660e\u54cd\u5e94\u6570\u636e\u7c7b\u578b # \u3010params: Params = Depends()\u3011\u628aParams\u5f53\u505a\u4f9d\u8d56\u9879\u8fdb\u884c\u5f15\u5165 @app.get('/users', response_model=Page[User]) async def get_users(params: Params = Depends()): # \u5c06\u9700\u8981\u5206\u9875\u7684\u6570\u636e\u8fdb\u884c\u5206\u9875\uff0c\u628aparams\u53c2\u6570\u4f20\u5165 return paginate(users, params)","title":"1. \u4f7f\u7528\u4f9d\u8d56\u9879"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#2","text":"from fastapi import FastAPI, Depends from fastapi_pagination import Page, paginate, add_pagination, Params from pydantic import BaseModel app = FastAPI() class User(BaseModel): name: str surname: str users = [ User(name='name', surname='name'), User(name='name2', surname='name'), User(name='name3', surname='name'), User(name='name4', surname='name'), User(name='name5', surname='name'), User(name='name6', surname='name'), User(name='name7', surname='name'), User(name='name8', surname='name'), User(name='name9', surname='name'), # ... ] # \u3010response_model=Page[User]\u3011\u5728\u8def\u5f84\u53c2\u6570\u4e2d\u58f0\u660e\u54cd\u5e94\u6570\u636e\u7c7b\u578b @app.get('/users', response_model=Page[User]) async def get_users(): # \u5c06\u9700\u8981\u5206\u9875\u7684\u6570\u636e\u8fdb\u884c\u5206\u9875 return paginate(users) # \u5728\u63a5\u53e3\u51fd\u6570\u4e4b\u540e\uff0c\u4f7f\u7528add_pagination\u8fdb\u884c\u9ed8\u8ba4\u6dfb\u52a0\u5206\u9875\u4f9d\u8d56\u9879 add_pagination(app)","title":"2. \u7701\u7565\u4f9d\u8d56\u9879"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#limit-offset","text":"from fastapi import FastAPI from fastapi_pagination import LimitOffsetPage, add_pagination, paginate from pydantic import BaseModel app = FastAPI() class User(BaseModel): name: str surname: str users = [ User(name='name', surname='name'), User(name='name2', surname='name'), User(name='name3', surname='name'), User(name='name4', surname='name'), User(name='name5', surname='name'), User(name='name6', surname='name'), User(name='name7', surname='name'), User(name='name8', surname='name'), User(name='name9', surname='name'), # ... ] @app.get('/users', response_model=LimitOffsetPage[User]) async def get_users(): return paginate(users) add_pagination(app)","title":"\u56db\u3001Limit-Offset"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#_3","text":"","title":"\u4e94\u3001\u81ea\u5b9a\u4e49\u53c2\u6570\u4fe1\u606f"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#1paramspage1","text":"from fastapi import Query from fastapi_pagination.bases import AbstractParams, RawParams from pydantic import BaseModel class Params(BaseModel, AbstractParams): # \u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a1\uff0c\u4e0d\u80fd\u591f\u5c0f\u4e8e1 page: int = Query(1, ge=1, description=\"Page number\") # \u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a20\uff0c\u6700\u5927\u4e3a100 size: int = Query(20, gt=0, le=100, description=\"Page size\") def to_raw_params(self) -> RawParams: return RawParams( limit=self.size, # \u66f4\u7231page\u53c2\u6570\u8d77\u59cb\u503c\u4ece1\u5f00\u59cb offset=self.size * (self.page - 1), )","title":"1.\u81ea\u5b9a\u4e49Params(\u628apage\u53c2\u6570\u8d77\u59cb\u503c\u6539\u4e3a1)"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#2page","text":"from __future__ import annotations import math from typing import TypeVar, Generic, Sequence from fastapi_pagination.bases import AbstractPage T = TypeVar(\"T\") class Page(AbstractPage[T], Generic[T]): # \u4fee\u6539Page\u6a21\u578b data: Sequence[T] # \u6570\u636e total: int # \u603b\u6570\u636e\u6570 page: int # \u7b2cn\u9875 size: int # \u6bcf\u9875\u6570\u91cf next: str # \u4e0b\u4e00\u9875\u53c2\u6570 previous: str # \u4e0a\u4e00\u9875\u53c2\u6570 total_pages: int # \u603b\u9875\u6570 # \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684Params __params_type__ = Params # Set params related to Page @classmethod def create( cls, items: data, total: int, params: Params, ) -> Page[T]: # \u4eceparams\u83b7\u53d6page\u548csize page = params.page size = params.size # \u901a\u8fc7\u603b\u6570\u548c\u6bcf\u9875\u6570\u91cf\u8ba1\u7b97\u51fa\u603b\u9875\u6570 total_pages = math.ceil(total / params.size) # \u751f\u6210\u4e0b\u4e00\u9875\u53c2\u6570\uff08\u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u9875\u5219\u4e3anull\uff09 next = f\"?page={page + 1}&size={size}\" if (page + 1) <= total_pages else \"null\" # \u751f\u6210\u4e0a\u4e00\u9875\u53c2\u6570\uff08\u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u9875\u5219\u4e3anull\uff09 previous = f\"?page={page - 1}&size={size}\" if (page - 1) >= 1 else \"null\" # \u6839\u636e\u5b9a\u4e49\u7684\u6a21\u578b\u53c2\u6570\u8fdb\u884c\u8fd4\u56de return cls(data=items, total=total, page=params.page, size=params.size, next=next, previous=previous, total_pages=total_pages)","title":"2.\u81ea\u5b9a\u4e49Page\u6a21\u578b"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#3paginationpy","text":"from __future__ import annotations import math from typing import TypeVar, Generic, Sequence from fastapi import Query from fastapi_pagination.bases import AbstractPage, AbstractParams, RawParams from pydantic import BaseModel T = TypeVar(\"T\") class Params(BaseModel, AbstractParams): page: int = Query(1, ge=1, description=\"Page number\") size: int = Query(20, gt=0, le=100, description=\"Page size\") def to_raw_params(self) -> RawParams: return RawParams( limit=self.size, offset=self.size * (self.page - 1), ) class Page(AbstractPage[T], Generic[T]): results: Sequence[T] total: int page: int size: int next: str previous: str total_pages: int __params_type__ = Params # Set params related to Page @classmethod def create( cls, results: results, total: int, params: Params, ) -> Page[T]: page = params.page size = params.size total_pages = math.ceil(total / params.size) next = f\"?page={page + 1}&size={size}\" if (page + 1) <= total_pages else \"null\" previous = f\"?page={page - 1}&size={size}\" if (page - 1) >= 1 else \"null\" return cls(results=results, total=total, page=params.page, size=params.size, next=next, previous=previous, total_pages=total_pages)","title":"3.\u91cd\u5199\u6574\u5408\uff08pagination.py\uff09"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#4","text":"# \u628aPage\u4ece\u81ea\u5b9a\u4e49\u7684\u5305\u4e2d\u5bfc\u5165\u5373\u53ef from pagination import Page @app.get('/users', response_model=Page[User]) async def get_users(): return paginate(users)","title":"4.\u4f7f\u7528\u81ea\u5b9a\u4e49\u540e\u7684\u5206\u9875\u529f\u80fd"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#sqlalchemy","text":"","title":"\u516d\u3001\u96c6\u6210SQLAlchemy\u4f7f\u7528"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#1_1","text":"","title":"1\u3001\u7b80\u5355\u4f7f\u7528"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#1-paginatefastapi_paginationextsqlalchemy","text":"from fastapi_pagination.ext.sqlalchemy import paginate","title":"1\uff09 \u66f4\u6539\u3010paginate\u3011\u5305\u7684\u8def\u5f84\u4e3a\u3010fastapi_pagination.ext.sqlalchemy\u3011"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#2_1","text":"class User(BaseModel): email: str password: str is_active: bool # \u8fd9\u4e2a\u914d\u7f6e\u5fc5\u987b\u5f97\u8981 class Config: orm_mode = True","title":"2\uff09 \u521b\u5efa\u6570\u636e\u8fd4\u56de\u6a21\u578b"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#3-sqlalchemypaginate","text":"# \u3010db: Session = Depends(get_db)\u3011\uff1a\u6570\u636e\u5e93\u4f9d\u8d56\u9879 @app.get('/users', response_model=Page[User]) async def get_users(db: Session = Depends(get_db)): # \u6b64\u5904\u7684\u53c2\u6570\u4e3a\u3010db.query(models.User)\u3011 # \u3010sqlalchemy.paginate\u3011\u7684\u53c2\u6570\u4e3a\u3010sqlalchemy.orm.query.Query\u3011\u7c7b\u578b return paginate(db.query(models.User))","title":"3\uff09 \u4f7f\u7528\u3010sqlalchemy.paginate\u3011"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#2_2","text":"","title":"2\u3001\u4f7f\u7528\u5f02\u6b65"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#1aiomysql","text":"pip install aiomysql","title":"1\uff09\u5b89\u88c5\u652f\u6301\u5f02\u6b65\u7684aiomysql"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#2sqlalchemy","text":"from sqlalchemy.ext.asyncio import create_async_engine # \u8fd9\u91cc\u8981\u4f7f\u7528\u652f\u6301\u5f02\u6b65\u7684aiomysql SQLALCHEMY_DATABASE_URL = \"mysql+aiomysql://root:123456@127.0.0.1:3306/users?charset=utf8\" # \u6ce8\u610fsqlite\u4e0d\u652f\u6301\u5f02\u6b65 engine = create_async_engine(SQLALCHEMY_DATABASE_URL)","title":"2\uff09sqlalchemy\u5f15\u64ce\u9700\u8981\u5f02\u6b65\u521b\u5efa"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#3","text":"from sqlalchemy.ext.asyncio import AsyncSession SessionLocal = sessionmaker(bind=engine, class_=AsyncSession)","title":"3\uff09\u521b\u5efa\u5f02\u6b65\u7684\u6570\u636e\u5e93\u4f1a\u8bdd"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#4_1","text":"# \u4f9d\u8d56\u9879\u8981\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570 async def get_db(): async with SessionLocal() as session: yield session","title":"4\uff09\u521b\u5efa\u5f02\u6b65\u7684\u6570\u636e\u5e93\u4f9d\u8d56\u9879"},{"location":"FastAPI/003%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/#5paginateasync_sqlalchemy","text":"from fastapi_pagination.ext.async_sqlalchemy import paginate from sqlalchemy.future import select @app.get('/users', response_model=Page[User]) async def get_users(db: Session = Depends(get_db)): # \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6570\u636e\u5e93\u8fde\u63a5 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aSelect\u7c7b\u578b\u7684\u53c2\u6570 # \u8981\u6dfb\u52a0await\u5173\u952e\u5b57 return await paginate(db, select(models.User))","title":"5\uff09paginate\u4f7f\u7528async_sqlalchemy\u6a21\u5757\u4e0b\u7684"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/","text":"\u6302\u8f7dFastAPI\u5e94\u7528\u7a0b\u5e8f \u4e00\u3001\u76ee\u7684 \u5982\u679c\u9700\u8981\u4e24\u4e2a\u72ec\u7acb\u7684FastAPI\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5404\u81ea\u62e5\u6709\u72ec\u7acb\u7684\u6587\u6863\uff0c\u5219\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u4e3b\u5e94\u7528\u7a0b\u5e8f\u5e76 \u88c5\u8f7d \u591a\u4e2a\u5b50\u5e94\u7528\u7a0b\u5e8f\u3002 \u4e8c\u3001\u521b\u5efa\u4e3b\u5e94\u7528\u7a0b\u5e8f from fastapi import FastAPI app = FastAPI() @app.get(\"/app\") def read_main(): return {\"msg\":\"This is main app\"} \u4e09\u3001\u521b\u5efa\u5b50\u5e94\u7528\u7a0b\u5e8f subapp = FastAPI() @subapp.get(\"/sub\") def read_sub(): return {\"msg\":\"This is sub app\"} \u56db\u3001\u628a\u5b50\u5e94\u7528\u6302\u8f7d\u5230\u4e3b\u5e94\u7528\u4e0a \u4e3b\u5e94\u7528\u7a0b\u5e8f\u7684\u5bf9\u8c61 app , \u4f7f\u7528 mount \u65b9\u6cd5\u8fdb\u884c\u88c5\u8f7d\u5b50\u5e94\u7528 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aapi\u8def\u5f84 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5b50\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61 subapp app.mount(\"/subapi\", subapp) \u4e94\u3001\u72ec\u7acb\u6587\u6863 \u4e3b\u5e94\u7528\u6587\u6863\u5730\u5740 http://127.0.0.1:8000/docs \u5b50\u5e94\u7528\u6587\u6863\u5730\u5740 http://127.0.0.1:8000/subapi/docs","title":"\u6302\u8f7dFastAPI\u5e94\u7528\u7a0b\u5e8f"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/#fastapi","text":"","title":"\u6302\u8f7dFastAPI\u5e94\u7528\u7a0b\u5e8f"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/#_1","text":"\u5982\u679c\u9700\u8981\u4e24\u4e2a\u72ec\u7acb\u7684FastAPI\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5404\u81ea\u62e5\u6709\u72ec\u7acb\u7684\u6587\u6863\uff0c\u5219\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u4e3b\u5e94\u7528\u7a0b\u5e8f\u5e76 \u88c5\u8f7d \u591a\u4e2a\u5b50\u5e94\u7528\u7a0b\u5e8f\u3002","title":"\u4e00\u3001\u76ee\u7684"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/#_2","text":"from fastapi import FastAPI app = FastAPI() @app.get(\"/app\") def read_main(): return {\"msg\":\"This is main app\"}","title":"\u4e8c\u3001\u521b\u5efa\u4e3b\u5e94\u7528\u7a0b\u5e8f"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/#_3","text":"subapp = FastAPI() @subapp.get(\"/sub\") def read_sub(): return {\"msg\":\"This is sub app\"}","title":"\u4e09\u3001\u521b\u5efa\u5b50\u5e94\u7528\u7a0b\u5e8f"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/#_4","text":"\u4e3b\u5e94\u7528\u7a0b\u5e8f\u7684\u5bf9\u8c61 app , \u4f7f\u7528 mount \u65b9\u6cd5\u8fdb\u884c\u88c5\u8f7d\u5b50\u5e94\u7528 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aapi\u8def\u5f84 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5b50\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61 subapp app.mount(\"/subapi\", subapp)","title":"\u56db\u3001\u628a\u5b50\u5e94\u7528\u6302\u8f7d\u5230\u4e3b\u5e94\u7528\u4e0a"},{"location":"FastAPI/004%E6%8C%82%E8%BD%BDFastAPI%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/#_5","text":"\u4e3b\u5e94\u7528\u6587\u6863\u5730\u5740 http://127.0.0.1:8000/docs \u5b50\u5e94\u7528\u6587\u6863\u5730\u5740 http://127.0.0.1:8000/subapi/docs","title":"\u4e94\u3001\u72ec\u7acb\u6587\u6863"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/","text":"\u90e8\u7f72FastAPI Uvicorn Uvicorn \u662f\u57fa\u4e8e uvloop \u548c httptools \u6784\u5efa\u7684\u975e\u5e38\u5feb\u901f\u7684 ASGI \u670d\u52a1\u5668\u3002 Uvicorn \u63d0\u4f9b\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u65b9\u6cd5\u6765\u8fd0\u884c\u591a\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u6bd4\u5982 --workers 4 \uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fdb\u884c\u7684\u76d1\u63a7\u3002 Gunicorn Gunicorn \u662f\u6210\u719f\u7684\uff0c\u529f\u80fd\u9f50\u5168\u7684\u670d\u52a1\u5668\uff0c Uvicorn \u5185\u90e8\u5305\u542b\u6709 Gunicorn \u7684 workers \u7c7b\uff0c\u5141\u8bb8\u4f60\u8fd0\u884c ASGI \u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u4e9b workers \u7ee7\u627f\u4e86\u6240\u6709 Uvicorn \u9ad8\u6027\u80fd\u7684\u7279\u70b9\uff0c\u5e76\u4e14\u7ed9\u4f60\u4f7f\u7528 Gunicorn \u6765\u8fdb\u884c\u8fdb\u7a0b\u7ba1\u7406\u3002 \u7528\u6765\u7ba1\u7406 Uvicorn \u4f7f\u7528Gunicorn\u548cUvicorn\u7684worker\u7c7b\u751f\u4ea7\u73af\u5883\u90e8\u7f72 I\u3001Liunx\u547d\u4ee4\u884c\u540e\u53f0\u542f\u52a8 nohup gunicorn -c main:app --host 0.0.0.0 --port 8080 -w 4 -k uvicorn.workers.UvicornWorker II\u3001 docker\u90e8\u7f72 1. Gunicorn\u914d\u7f6e\u6587\u4ef6(gunicorn.conf.py) import multiprocessing # \u662f\u5426\u5f00\u542fdebug debug = True # \u8bbe\u7f6e\u5b88\u62a4\u8fdb\u7a0b # daemon = True # \u7ed1\u5b9aip\u548c\u7aef\u53e3\u53f7 bind = '0.0.0.0:8000' # \u8d85\u65f6\u65f6\u95f4 timeout = 30 # \u5de5\u4f5c\u6a21\u5f0f worker_class = 'uvicorn.workers.UvicornWorker' # \u8fdb\u7a0b\u6570 workers = multiprocessing.cpu_count() * 2 + 1 # \u8bbe\u7f6e\u8bc1\u4e66 # keyfile = '' # certfile = '' # \u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u4e2a\u65e5\u5fd7\u7ea7\u522b\u6307\u7684\u662f\u9519\u8bef\u65e5\u5fd7\u7ea7\u522b\uff0c\u800c\u8bbf\u95ee\u65e5\u5fd7\u7684\u7ea7\u522b\u65e0\u6cd5\u8bbe\u7f6e loglevel = 'debug' # \u65e5\u5fd7\u914d\u7f6e # \u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6 accesslog = \"/tmp/gunicorn_fasttest_access.log\" # \u9519\u8bef\u65e5\u5fd7\u6587\u4ef6 errorlog = \"/tmp/gunicorn_fasttest_error.log\" # OR # \u914d\u7f6e\u6587\u4ef6\u65b9\u5f0f\u914d\u7f6e\u65e5\u5fd7 # logconfig = \"./logger.ini\" 2. Dockerfile\u6587\u4ef6 \u9700\u8981\u5148\u8fdb\u884c\u5b89\u88c5\u6240\u9700\u7cfb\u7edf\u4f9d\u8d56() \u7136\u540e\u5b89\u88c5python\u4f9d\u8d56\u5305 \u6307\u5b9a\u5bb9\u5668\u4e2d\u53ef\u4ee5\u66b4\u9732\u7684\u7aef\u53e3\uff08EXPOSE\uff09 \u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\uff08ENTRYPOINT\uff09 --preload \u6b64\u53c2\u6570\u53ef\u67e5\u770b\u8be6\u7ec6\u7684\u62a5\u9519\u4fe1\u606f FROM python:3.8.5 LABEL author=\"Desire\" LABEL desc=\"web fastapi\" COPY . /app WORKDIR /app RUN apt-get update && apt-get install -y build-essential gcc libc-dev make python3-lxml \\ && pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple EXPOSE 8000 ENTRYPOINT [\"gunicorn\", \"--preload\", \"-c\", \"gunicorn.conf.py\", \"main:app\"] 3. \u6784\u5efa\u955c\u50cf docker build -t fastapi_gunicorn:v1 -f Dockerfile . 4. \u8fd0\u884c\u5bb9\u5668 docker run -di -p 8000:8000 --name fastapi_gunicorn fastapi_gunicorn:v1 5. \u5c0f\u62d3 1\uff09\u5982\u679c gunicorn.conf.py \u6587\u4ef6\u548c main.py \u6ca1\u6709\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b \u76ee\u5f55\u5982\u4e0b\uff1a \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 gunicorn.conf.py \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 start.sh 2\uff09\u542f\u52a8\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 shell\u811a\u672c\uff08start.sh\uff09 \u8fdb\u884c\u542f\u52a8 \u5148\u8fdb\u5165\u5230main.py\u76ee\u5f55 \u6307\u5b9a\u542f\u52a8\u914d\u7f6e\u6587\u4ef6\u65f6\u4f7f\u7528 ../gunicorn.conf.py \u8868\u793a\u4e0a\u4e00\u7ea7\u76ee\u5f55\u4e0b\u7684 gunicorn.conf.py cd app gunicorn --preload -c ../gunicorn.conf.py main:app 3\uff09Dockerfile\u53ea\u9700\u8981\u628a\u542f\u52a8\u547d\u4ee4\u6362\u6210\u6267\u884cshell\u811a\u672c\u5373\u53ef ENTRYPOINT [ \"bash\", \"start.sh\" ] 6. \u5bfc\u5305\u95ee\u9898 \u62a5\u9519\u539f\u56e0\uff1a \u5165\u53e3\u6587\u4ef6\u653e\u5728app\u6587\u4ef6\u5939\u4e2d\uff0c\u542f\u52a8\u65f6\u7684\u5bfb\u5305\u8def\u5f84\u5c31\u4eceapp\u5f00\u59cb\u4e86\uff0c\u6240\u4ee5\u627e\u4e0d\u5230\u5305 \u89e3\u51b3\uff1a \u628a\u5165\u53e3\u6587\u4ef6main.py\u653e\u5230\u9879\u76ee\u6839\u76ee\u5f55\u4e0b","title":"\u90e8\u7f72FastAPI"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#fastapi","text":"","title":"\u90e8\u7f72FastAPI"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#uvicorn","text":"Uvicorn \u662f\u57fa\u4e8e uvloop \u548c httptools \u6784\u5efa\u7684\u975e\u5e38\u5feb\u901f\u7684 ASGI \u670d\u52a1\u5668\u3002 Uvicorn \u63d0\u4f9b\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u65b9\u6cd5\u6765\u8fd0\u884c\u591a\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u6bd4\u5982 --workers 4 \uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fdb\u884c\u7684\u76d1\u63a7\u3002","title":"Uvicorn"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#gunicorn","text":"Gunicorn \u662f\u6210\u719f\u7684\uff0c\u529f\u80fd\u9f50\u5168\u7684\u670d\u52a1\u5668\uff0c Uvicorn \u5185\u90e8\u5305\u542b\u6709 Gunicorn \u7684 workers \u7c7b\uff0c\u5141\u8bb8\u4f60\u8fd0\u884c ASGI \u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u4e9b workers \u7ee7\u627f\u4e86\u6240\u6709 Uvicorn \u9ad8\u6027\u80fd\u7684\u7279\u70b9\uff0c\u5e76\u4e14\u7ed9\u4f60\u4f7f\u7528 Gunicorn \u6765\u8fdb\u884c\u8fdb\u7a0b\u7ba1\u7406\u3002 \u7528\u6765\u7ba1\u7406 Uvicorn","title":"Gunicorn"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#gunicornuvicornworker","text":"","title":"\u4f7f\u7528Gunicorn\u548cUvicorn\u7684worker\u7c7b\u751f\u4ea7\u73af\u5883\u90e8\u7f72"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#iliunx","text":"nohup gunicorn -c main:app --host 0.0.0.0 --port 8080 -w 4 -k uvicorn.workers.UvicornWorker","title":"I\u3001Liunx\u547d\u4ee4\u884c\u540e\u53f0\u542f\u52a8"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#ii-docker","text":"","title":"II\u3001 docker\u90e8\u7f72"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#1-gunicorngunicornconfpy","text":"import multiprocessing # \u662f\u5426\u5f00\u542fdebug debug = True # \u8bbe\u7f6e\u5b88\u62a4\u8fdb\u7a0b # daemon = True # \u7ed1\u5b9aip\u548c\u7aef\u53e3\u53f7 bind = '0.0.0.0:8000' # \u8d85\u65f6\u65f6\u95f4 timeout = 30 # \u5de5\u4f5c\u6a21\u5f0f worker_class = 'uvicorn.workers.UvicornWorker' # \u8fdb\u7a0b\u6570 workers = multiprocessing.cpu_count() * 2 + 1 # \u8bbe\u7f6e\u8bc1\u4e66 # keyfile = '' # certfile = '' # \u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u4e2a\u65e5\u5fd7\u7ea7\u522b\u6307\u7684\u662f\u9519\u8bef\u65e5\u5fd7\u7ea7\u522b\uff0c\u800c\u8bbf\u95ee\u65e5\u5fd7\u7684\u7ea7\u522b\u65e0\u6cd5\u8bbe\u7f6e loglevel = 'debug' # \u65e5\u5fd7\u914d\u7f6e # \u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6 accesslog = \"/tmp/gunicorn_fasttest_access.log\" # \u9519\u8bef\u65e5\u5fd7\u6587\u4ef6 errorlog = \"/tmp/gunicorn_fasttest_error.log\" # OR # \u914d\u7f6e\u6587\u4ef6\u65b9\u5f0f\u914d\u7f6e\u65e5\u5fd7 # logconfig = \"./logger.ini\"","title":"1. Gunicorn\u914d\u7f6e\u6587\u4ef6(gunicorn.conf.py)"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#2-dockerfile","text":"\u9700\u8981\u5148\u8fdb\u884c\u5b89\u88c5\u6240\u9700\u7cfb\u7edf\u4f9d\u8d56() \u7136\u540e\u5b89\u88c5python\u4f9d\u8d56\u5305 \u6307\u5b9a\u5bb9\u5668\u4e2d\u53ef\u4ee5\u66b4\u9732\u7684\u7aef\u53e3\uff08EXPOSE\uff09 \u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\uff08ENTRYPOINT\uff09 --preload \u6b64\u53c2\u6570\u53ef\u67e5\u770b\u8be6\u7ec6\u7684\u62a5\u9519\u4fe1\u606f FROM python:3.8.5 LABEL author=\"Desire\" LABEL desc=\"web fastapi\" COPY . /app WORKDIR /app RUN apt-get update && apt-get install -y build-essential gcc libc-dev make python3-lxml \\ && pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple EXPOSE 8000 ENTRYPOINT [\"gunicorn\", \"--preload\", \"-c\", \"gunicorn.conf.py\", \"main:app\"]","title":"2. Dockerfile\u6587\u4ef6"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#3","text":"docker build -t fastapi_gunicorn:v1 -f Dockerfile .","title":"3. \u6784\u5efa\u955c\u50cf"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#4","text":"docker run -di -p 8000:8000 --name fastapi_gunicorn fastapi_gunicorn:v1","title":"4. \u8fd0\u884c\u5bb9\u5668"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#5","text":"1\uff09\u5982\u679c gunicorn.conf.py \u6587\u4ef6\u548c main.py \u6ca1\u6709\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b \u76ee\u5f55\u5982\u4e0b\uff1a \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 gunicorn.conf.py \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 start.sh 2\uff09\u542f\u52a8\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 shell\u811a\u672c\uff08start.sh\uff09 \u8fdb\u884c\u542f\u52a8 \u5148\u8fdb\u5165\u5230main.py\u76ee\u5f55 \u6307\u5b9a\u542f\u52a8\u914d\u7f6e\u6587\u4ef6\u65f6\u4f7f\u7528 ../gunicorn.conf.py \u8868\u793a\u4e0a\u4e00\u7ea7\u76ee\u5f55\u4e0b\u7684 gunicorn.conf.py cd app gunicorn --preload -c ../gunicorn.conf.py main:app 3\uff09Dockerfile\u53ea\u9700\u8981\u628a\u542f\u52a8\u547d\u4ee4\u6362\u6210\u6267\u884cshell\u811a\u672c\u5373\u53ef ENTRYPOINT [ \"bash\", \"start.sh\" ]","title":"5. \u5c0f\u62d3"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#6","text":"","title":"6. \u5bfc\u5305\u95ee\u9898"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#_1","text":"\u5165\u53e3\u6587\u4ef6\u653e\u5728app\u6587\u4ef6\u5939\u4e2d\uff0c\u542f\u52a8\u65f6\u7684\u5bfb\u5305\u8def\u5f84\u5c31\u4eceapp\u5f00\u59cb\u4e86\uff0c\u6240\u4ee5\u627e\u4e0d\u5230\u5305","title":"\u62a5\u9519\u539f\u56e0\uff1a"},{"location":"FastAPI/005%E9%83%A8%E7%BD%B2FastAPI/#_2","text":"\u628a\u5165\u53e3\u6587\u4ef6main.py\u653e\u5230\u9879\u76ee\u6839\u76ee\u5f55\u4e0b","title":"\u89e3\u51b3\uff1a"},{"location":"FastAPI/006FastAPI%E5%90%AF%E5%8A%A8%E5%89%8D%E5%90%8E%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/","text":"FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f \u524d\u8a00 FastAPI\u53ef\u4ee5\u5b9a\u4e49\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u6216\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u9700\u8981\u6267\u884c\u7684\u4e8b\u4ef6\u7a0b\u5e8f\uff08\u51fd\u6570\uff09 startup \u4e8b\u4ef6 \u8981\u6dfb\u52a0\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\u7684\u529f\u80fd\u65f6, \u8981\u4f7f\u7528\u4e8b\u4ef6\u58f0\u660e( on_event )\u542f\u52a8\u4e8b\u4ef6\uff1a startup # \u5728\u542f\u52a8\u7a0b\u5e8f\u4e4b\u524d\u8fd0\u884c\uff0c\u542f\u52a8\u5b9a\u65f6\u4efb\u52a1 @app.on_event(\"startup\") async def start_event(): # scheduler.start() print(\"\u5b9a\u65f6\u4efb\u52a1\u542f\u52a8\u6210\u529f\") shutdown \u4e8b\u4ef6 \u8981\u6dfb\u52a0\u5728\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u8fd0\u884c\u7684\u529f\u80fd\u65f6, \u8981\u4f7f\u7528\u4e8b\u4ef6\u58f0\u660e( on_event )\u5173\u95ed\u4e8b\u4ef6\uff1a shutdown # \u5728\u5173\u95ed\u7a0b\u5e8f\u65f6\u8fd0\u884c\uff0c\u5c06\u5185\u5bb9\u5199\u5165\u5230log.txt\u6587\u4ef6\u4e2d @app.on_event(\"shutdown\") async def shutdown_event(): with open(\"log.txt\", mode=\"a\") as log: log.write(\"Application shutdown\")","title":"FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f"},{"location":"FastAPI/006FastAPI%E5%90%AF%E5%8A%A8%E5%89%8D%E5%90%8E%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/#fastapi","text":"","title":"FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f"},{"location":"FastAPI/006FastAPI%E5%90%AF%E5%8A%A8%E5%89%8D%E5%90%8E%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/#_1","text":"FastAPI\u53ef\u4ee5\u5b9a\u4e49\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u6216\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u9700\u8981\u6267\u884c\u7684\u4e8b\u4ef6\u7a0b\u5e8f\uff08\u51fd\u6570\uff09","title":"\u524d\u8a00"},{"location":"FastAPI/006FastAPI%E5%90%AF%E5%8A%A8%E5%89%8D%E5%90%8E%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/#startup","text":"\u8981\u6dfb\u52a0\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\u7684\u529f\u80fd\u65f6, \u8981\u4f7f\u7528\u4e8b\u4ef6\u58f0\u660e( on_event )\u542f\u52a8\u4e8b\u4ef6\uff1a startup # \u5728\u542f\u52a8\u7a0b\u5e8f\u4e4b\u524d\u8fd0\u884c\uff0c\u542f\u52a8\u5b9a\u65f6\u4efb\u52a1 @app.on_event(\"startup\") async def start_event(): # scheduler.start() print(\"\u5b9a\u65f6\u4efb\u52a1\u542f\u52a8\u6210\u529f\")","title":"startup \u4e8b\u4ef6"},{"location":"FastAPI/006FastAPI%E5%90%AF%E5%8A%A8%E5%89%8D%E5%90%8E%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/#shutdown","text":"\u8981\u6dfb\u52a0\u5728\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u8fd0\u884c\u7684\u529f\u80fd\u65f6, \u8981\u4f7f\u7528\u4e8b\u4ef6\u58f0\u660e( on_event )\u5173\u95ed\u4e8b\u4ef6\uff1a shutdown # \u5728\u5173\u95ed\u7a0b\u5e8f\u65f6\u8fd0\u884c\uff0c\u5c06\u5185\u5bb9\u5199\u5165\u5230log.txt\u6587\u4ef6\u4e2d @app.on_event(\"shutdown\") async def shutdown_event(): with open(\"log.txt\", mode=\"a\") as log: log.write(\"Application shutdown\")","title":"shutdown \u4e8b\u4ef6"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/","text":"FastAPI\u96c6\u6210Redis \u524d\u8a00 FastAPI \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u5f02\u6b65\u6846\u67b6\uff0c\u96c6\u6210 Redis \u65f6\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u5f02\u6b65 Redis -- aioredis aioredis asyncio (PEP 3156) Redis\u5ba2\u6237\u7aef\u5e93\u3002 \u8be5\u5e93\u65e8\u5728\u57fa\u4e8easyncio\u4e3aRedis\u63d0\u4f9b\u7b80\u5355\u800c\u6e05\u6670\u7684\u63a5\u53e3\u3002 \u6587\u6863\u5730\u5740\uff1a https://aioredis.readthedocs.io/en/latest/ \u5b89\u88c5 pip install aioredis \u5728FastAPI\u4e2d\u96c6\u6210aioredis \u4f7f\u7528FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u521b\u5efa\u8fde\u63a5\u548c\u5173\u95ed\u8fde\u63a5 import aioredis 1. \u5728FastAPI\u521b\u5efa\u524d\u521b\u5efaRedis\u8fde\u63a5 \u5728 FastAPI \u521b\u5efa\u524d\u521b\u5efa Redis \u8fde\u63a5 \u7ed9 app.state \u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\u503c redis \uff0c\u7528\u6765\u5b58\u653e Redis \u5b9e\u4f8b \u5168\u5c40\u90fd\u53ef\u4f7f\u7528 app.state.redis \u83b7\u53d6 Redis \u5b9e\u4f8b @app.on_event(\"startup\") async def startup_event(): app.state.redis = await aioredis.create_redis(address=(\"127.0.0.1\", 6379), db=3, encoding=\"utf-8\") print(f\"redis\u6210\u529f--->>{app.state.redis}\") 2. \u5173\u95ed\u8fde\u63a5 \u5728 FastAPI \u5173\u95ed\u65f6\u5173\u95ed Redis \u8fde\u63a5 \u4f7f\u7528 app.state.redis \u76f4\u63a5\u8fdb\u884c\u5173\u95ed\u64cd\u4f5c @app.on_event(\"shutdown\") async def shutdown_event(): app.state.redis.close() await app.state.redis.wait_closed() 3. \u628aRedis\u6302\u8f7d\u5230app\u4e0a 1\uff09\u521b\u5efa\u6ce8\u518cRedis\u7684\u65b9\u6cd5 def register_redis(app: FastAPI): @app.on_event(\"startup\") async def startup_event(): app.state.redis = await aioredis.create_redis(address=(\"127.0.0.1\", 6379), db=3, encoding=\"utf-8\") print(f\"redis\u6210\u529f--->>{app.state.redis}\") @app.on_event(\"shutdown\") async def shutdown_event(): app.state.redis.close() await app.state.redis.wait_closed() 2\uff09\u6302\u8f7d\u5230app\u4e0a from fastapi import FastAPI app = FastAPI() # \u8fdb\u884c\u6302\u8f7d register_redis(app) 4. \u63a5\u53e3\u4e2d\u4f7f\u7528 @app.get(\"/test\") async def test(q: str): key = time.time() await app.state.redis.set(key=key, value=q) # \u6dfb\u52a0\u6570\u636e\uff0c5\u79d2\u540e\u81ea\u52a8\u6e05\u9664 await app.state.redis.setex(key=\"vvv\", seconds=5, value=\"\u4e34\u65f6\u5b58\u5728\") value = await app.state.redis.get(key=key) return {key: value} 5. \u5728\u5b50\u8def\u7531\u4e2d\u4f7f\u7528 \u6dfb\u52a0\u53c2\u6570 request: Request \u901a\u8fc7 request.app.state.redis \u83b7\u53d6 Redis \u5b9e\u4f8b \u901a\u8fc7\u83b7\u53d6\u5230\u7684\u5b9e\u4f8b\uff0c\u8fdb\u884c\u64cd\u4f5c Redis router = APIRouter() @router.get(\"/api/test\") async def test(request: Request, value: str): api_time = f\"api-{time.time()}\" await request.app.state.redis.setex(key=api_time, seconds=5.5, value=value) value = await request.app.state.redis.get(key=api_time) return {api_time: value} app.include_router(router)","title":"FastAPI\u96c6\u6210Redis"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#fastapiredis","text":"","title":"FastAPI\u96c6\u6210Redis"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#_1","text":"FastAPI \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u5f02\u6b65\u6846\u67b6\uff0c\u96c6\u6210 Redis \u65f6\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u5f02\u6b65 Redis -- aioredis","title":"\u524d\u8a00"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#aioredis","text":"asyncio (PEP 3156) Redis\u5ba2\u6237\u7aef\u5e93\u3002 \u8be5\u5e93\u65e8\u5728\u57fa\u4e8easyncio\u4e3aRedis\u63d0\u4f9b\u7b80\u5355\u800c\u6e05\u6670\u7684\u63a5\u53e3\u3002 \u6587\u6863\u5730\u5740\uff1a https://aioredis.readthedocs.io/en/latest/","title":"aioredis"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#_2","text":"pip install aioredis","title":"\u5b89\u88c5"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#fastapiaioredis","text":"\u4f7f\u7528FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u521b\u5efa\u8fde\u63a5\u548c\u5173\u95ed\u8fde\u63a5 import aioredis","title":"\u5728FastAPI\u4e2d\u96c6\u6210aioredis"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#1-fastapiredis","text":"\u5728 FastAPI \u521b\u5efa\u524d\u521b\u5efa Redis \u8fde\u63a5 \u7ed9 app.state \u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\u503c redis \uff0c\u7528\u6765\u5b58\u653e Redis \u5b9e\u4f8b \u5168\u5c40\u90fd\u53ef\u4f7f\u7528 app.state.redis \u83b7\u53d6 Redis \u5b9e\u4f8b @app.on_event(\"startup\") async def startup_event(): app.state.redis = await aioredis.create_redis(address=(\"127.0.0.1\", 6379), db=3, encoding=\"utf-8\") print(f\"redis\u6210\u529f--->>{app.state.redis}\")","title":"1. \u5728FastAPI\u521b\u5efa\u524d\u521b\u5efaRedis\u8fde\u63a5"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#2","text":"\u5728 FastAPI \u5173\u95ed\u65f6\u5173\u95ed Redis \u8fde\u63a5 \u4f7f\u7528 app.state.redis \u76f4\u63a5\u8fdb\u884c\u5173\u95ed\u64cd\u4f5c @app.on_event(\"shutdown\") async def shutdown_event(): app.state.redis.close() await app.state.redis.wait_closed()","title":"2. \u5173\u95ed\u8fde\u63a5"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#3-redisapp","text":"","title":"3. \u628aRedis\u6302\u8f7d\u5230app\u4e0a"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#1redis","text":"def register_redis(app: FastAPI): @app.on_event(\"startup\") async def startup_event(): app.state.redis = await aioredis.create_redis(address=(\"127.0.0.1\", 6379), db=3, encoding=\"utf-8\") print(f\"redis\u6210\u529f--->>{app.state.redis}\") @app.on_event(\"shutdown\") async def shutdown_event(): app.state.redis.close() await app.state.redis.wait_closed()","title":"1\uff09\u521b\u5efa\u6ce8\u518cRedis\u7684\u65b9\u6cd5"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#2app","text":"from fastapi import FastAPI app = FastAPI() # \u8fdb\u884c\u6302\u8f7d register_redis(app)","title":"2\uff09\u6302\u8f7d\u5230app\u4e0a"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#4","text":"@app.get(\"/test\") async def test(q: str): key = time.time() await app.state.redis.set(key=key, value=q) # \u6dfb\u52a0\u6570\u636e\uff0c5\u79d2\u540e\u81ea\u52a8\u6e05\u9664 await app.state.redis.setex(key=\"vvv\", seconds=5, value=\"\u4e34\u65f6\u5b58\u5728\") value = await app.state.redis.get(key=key) return {key: value}","title":"4. \u63a5\u53e3\u4e2d\u4f7f\u7528"},{"location":"FastAPI/007FastAPI%E9%9B%86%E6%88%90Redis/#5","text":"\u6dfb\u52a0\u53c2\u6570 request: Request \u901a\u8fc7 request.app.state.redis \u83b7\u53d6 Redis \u5b9e\u4f8b \u901a\u8fc7\u83b7\u53d6\u5230\u7684\u5b9e\u4f8b\uff0c\u8fdb\u884c\u64cd\u4f5c Redis router = APIRouter() @router.get(\"/api/test\") async def test(request: Request, value: str): api_time = f\"api-{time.time()}\" await request.app.state.redis.setex(key=api_time, seconds=5.5, value=value) value = await request.app.state.redis.get(key=api_time) return {api_time: value} app.include_router(router)","title":"5. \u5728\u5b50\u8def\u7531\u4e2d\u4f7f\u7528"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/","text":"FastAPI\u96c6\u6210APScheduler \u524d\u8a00 APScheduler \u5b9a\u65f6\u4efb\u52a1 \u4f20\u9001\u95e8 \u5728FastAPI\u4e2d\u96c6\u6210aAPScheduler \u4f7f\u7528FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u542f\u52a8\u4efb\u52a1 1. \u5b9a\u65f6\u4efb\u52a1\u914d\u7f6e \u4f7f\u7528 AsyncIOScheduler \u8c03\u5ea6\u5668 \u4f7f\u7528 Redis \u5b58\u50a8\u5668 \u4f7f\u7528 ThreadPoolExecutor \u6267\u884c\u5668 from datetime import datetime from apscheduler.schedulers.asyncio import AsyncIOScheduler from apscheduler.jobstores.redis import RedisJobStore from apscheduler.executors.pool import ThreadPoolExecutor REDIS_DB = { \"db\": 1, \"host\": \"127.0.0.1\" } def func(name): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, {name}\") interval_task = { # \u914d\u7f6e\u5b58\u50a8\u5668 \"jobstores\": { # \u4f7f\u7528Redis\u8fdb\u884c\u5b58\u50a8 'default': RedisJobStore(**REDIS_DB) }, # \u914d\u7f6e\u6267\u884c\u5668 \"executors\": { # \u4f7f\u7528\u8fdb\u7a0b\u6c60\u8fdb\u884c\u8c03\u5ea6\uff0c\u6700\u5927\u7ebf\u7a0b\u6570\u662f20\u4e2a 'default': ThreadPoolExecutor(20) }, # \u521b\u5efajob\u65f6\u7684\u9ed8\u8ba4\u53c2\u6570 \"job_defaults\": { 'coalesce': False, # \u662f\u5426\u5408\u5e76\u6267\u884c 'max_instances': 3, # \u6700\u5927\u5b9e\u4f8b\u6570 } } scheduler = AsyncIOScheduler(**interval_task) # \u6dfb\u52a0\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1 scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"desire_job\", replace_existing=True) 2. \u542f\u52a8FastAPI\u4e4b\u524d\u542f\u52a8\u5b9a\u65f6\u4efb\u52a1 from fastapi import FastAPI # \u5bfc\u5165\u5b9a\u65f6\u4efb\u52a1\u914d\u7f6e from scheduler import scheduler app = FastAPI() @app.on_event(\"startup\") async def start_event(): scheduler.start() print(\"\u5b9a\u65f6\u4efb\u52a1\u542f\u52a8\u6210\u529f\") @app.get(\"/list\") async def jobs(): jobs = scheduler.get_jobs() return [job.id for job in jobs] 3. \u6302\u8f7d\u5230app\u4e0a 1\uff09\u521b\u5efa\u6ce8\u518c\u5b9a\u65f6\u5668\u7684\u65b9\u6cd5 def register_scheduler(app: FastAPI): @app.on_event(\"startup\") async def start_event(): scheduler.start() print(\"\u5b9a\u65f6\u4efb\u52a1\u542f\u52a8\u6210\u529f\") 2\uff09\u6302\u8f7d\u5230app\u4e0a from fastapi import FastAPI app = FastAPI() # \u8fdb\u884c\u6302\u8f7d register_scheduler(app)","title":"FastAPI\u96c6\u6210APScheduler"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#fastapiapscheduler","text":"","title":"FastAPI\u96c6\u6210APScheduler"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#_1","text":"APScheduler \u5b9a\u65f6\u4efb\u52a1 \u4f20\u9001\u95e8","title":"\u524d\u8a00"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#fastapiaapscheduler","text":"\u4f7f\u7528FastAPI\u542f\u52a8\u524d\u540e\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u542f\u52a8\u4efb\u52a1","title":"\u5728FastAPI\u4e2d\u96c6\u6210aAPScheduler"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#1","text":"\u4f7f\u7528 AsyncIOScheduler \u8c03\u5ea6\u5668 \u4f7f\u7528 Redis \u5b58\u50a8\u5668 \u4f7f\u7528 ThreadPoolExecutor \u6267\u884c\u5668 from datetime import datetime from apscheduler.schedulers.asyncio import AsyncIOScheduler from apscheduler.jobstores.redis import RedisJobStore from apscheduler.executors.pool import ThreadPoolExecutor REDIS_DB = { \"db\": 1, \"host\": \"127.0.0.1\" } def func(name): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, {name}\") interval_task = { # \u914d\u7f6e\u5b58\u50a8\u5668 \"jobstores\": { # \u4f7f\u7528Redis\u8fdb\u884c\u5b58\u50a8 'default': RedisJobStore(**REDIS_DB) }, # \u914d\u7f6e\u6267\u884c\u5668 \"executors\": { # \u4f7f\u7528\u8fdb\u7a0b\u6c60\u8fdb\u884c\u8c03\u5ea6\uff0c\u6700\u5927\u7ebf\u7a0b\u6570\u662f20\u4e2a 'default': ThreadPoolExecutor(20) }, # \u521b\u5efajob\u65f6\u7684\u9ed8\u8ba4\u53c2\u6570 \"job_defaults\": { 'coalesce': False, # \u662f\u5426\u5408\u5e76\u6267\u884c 'max_instances': 3, # \u6700\u5927\u5b9e\u4f8b\u6570 } } scheduler = AsyncIOScheduler(**interval_task) # \u6dfb\u52a0\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1 scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"desire_job\", replace_existing=True)","title":"1. \u5b9a\u65f6\u4efb\u52a1\u914d\u7f6e"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#2-fastapi","text":"from fastapi import FastAPI # \u5bfc\u5165\u5b9a\u65f6\u4efb\u52a1\u914d\u7f6e from scheduler import scheduler app = FastAPI() @app.on_event(\"startup\") async def start_event(): scheduler.start() print(\"\u5b9a\u65f6\u4efb\u52a1\u542f\u52a8\u6210\u529f\") @app.get(\"/list\") async def jobs(): jobs = scheduler.get_jobs() return [job.id for job in jobs]","title":"2. \u542f\u52a8FastAPI\u4e4b\u524d\u542f\u52a8\u5b9a\u65f6\u4efb\u52a1"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#3-app","text":"","title":"3. \u6302\u8f7d\u5230app\u4e0a"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#1_1","text":"def register_scheduler(app: FastAPI): @app.on_event(\"startup\") async def start_event(): scheduler.start() print(\"\u5b9a\u65f6\u4efb\u52a1\u542f\u52a8\u6210\u529f\")","title":"1\uff09\u521b\u5efa\u6ce8\u518c\u5b9a\u65f6\u5668\u7684\u65b9\u6cd5"},{"location":"FastAPI/008FastAPI%E9%9B%86%E6%88%90APScheduler/#2app","text":"from fastapi import FastAPI app = FastAPI() # \u8fdb\u884c\u6302\u8f7d register_scheduler(app)","title":"2\uff09\u6302\u8f7d\u5230app\u4e0a"},{"location":"HTTPRunner/HTTPRunner2.x/","text":"HTTPRunner \u4e00\u3001\u7b80\u4ecb 2.x\u7248\u672c\u96c6\u6210\u4e86 3.x\u7248\u672c\u96c6\u6210\u4e86pytest \u4e8c\u3001\u5b89\u88c5 pip install httprunner==2.3.0 \u4e09\u3001\u521b\u5efahttprunner\u5de5\u7a0b hrun --startproject ./hrdemo \u56db\u3001\u76ee\u5f55\u7ed3\u6784 |-hrdemo |--api\uff1a\u4e3b\u8981\u5b58\u653e\u63a5\u53e3\u7684\u6700\u5c0f\u6267\u884c\u5355\u4f4d\uff08\u6b63\u5411\u7528\u4f8b\uff09 |--reports\uff1a\u7528\u4e8e\u5b58\u653e\u6d4b\u8bd5\u62a5\u544a |--testcases\uff1a\u7528\u4e8e\u5904\u7406\u63a5\u53e3\u7684\u8d1f\u8d23\u6267\u884c\u903b\u8f91\uff0c\u5b9e\u73b0\u63a5\u53e3\u95f4\u7684\u4f9d\u8d56 |--testsuites\uff1a\u7528\u4e8e\u6dfb\u52a0\u591a\u6761\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6279\u91cf\u6267\u884c\uff0c\u5904\u7406\u6570\u636e\u9a71\u52a8\u6d4b\u8bd5\uff08\u53c2\u6570\u5316\uff09 |--.env\uff1a\u7528\u4e8e\u81ea\u5b9a\u4e49\u5168\u5c40\u73af\u5883\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u7684\u6d4b\u8bd5\u811a\u672c\u4e2d\u8c03\u7528 |--.gitignore |--debugtalk.py\uff1a\u7528\u4e8e\u5904\u7406\u52a8\u6001\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406\u53c2\u6570\u5316\u52a8\u6001\u6570\u636e \u4e94\u3001\u7b80\u5355\u4f7f\u7528 1\uff09yml\u7528\u4f8b name: get demo request: method: GET url: https://httpbin.org/get validate: - eq: [\"status_code\",200] 2\uff09\u8fd0\u884cyml\u7528\u4f8b hrun api/get_demo.yml --report-dir reports OR httprunner api/get_demo.yml --report-dir reports \u516d\u3001\u7279\u6b8a\u7528\u6cd5 1\uff09\u5c40\u90e8\u53d8\u91cf \u5728yml\u6587\u4ef6\u4e2d\uff0c\u5728variables\u8282\u70b9\u4e0b\u5b9a\u4e49\u7684\u53c2\u6570\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u53ea\u5728\u5f53\u524dyml\u4e0b name: get params variables: value1: value1 value2: value2 \u4f7f\u7528\uff1a \u56fa\u5b9a\u8bed\u6cd5\uff1a $\u53d8\u91cf\u540d name: get params variables: value1: value1 value2: value2 request: method: GET url: 'https://httpbin.org/get' params: value1: $value1 value2: $value2 validate: - eq: ['status_code', 200] 2\uff09base_url \u5728yml\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8282\u70b9base_url(\u540d\u5b57\u4e3a\u56fa\u5b9a\u5199\u6cd5) base_url: 'https://httpbin.org' 3\uff09\u73af\u5883\u53d8\u91cf .env \u6587\u4ef6 \u5728 .env \u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u4e3a\u73af\u5883\u53d8\u91cf USERNAME=leolee PASSWORD=123456 BASE_URL=https://httpbin.org \u4f7f\u7528\uff1a \u56fa\u5b9a\u8bed\u6cd5\uff1a ${ENV(\u5b9a\u4e49\u7684\u73af\u5883\u53d8\u91cf\u540d)} name: get params variables: value1: value1 value2: value2 base_url: ${ENV(BASE_URL)} request: method: GET url: /get params: value1: $value1 value2: $value2 validate: - eq: ['status_code', 200] 4\uff09\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570- debugtalk.py \u5728 debugtalk.py \u4e2d\u5b9a\u4e49\u51fd\u6570 import random def get_agent(): agents = [\"Mozilla/5.0 Desire\", \"Mozilla/5.0 Tommy\", \"Mozilla/5.0 Ronin\", \"Mozilla/5.0 DD\"] return random.choice(agents) \u4f7f\u7528\uff1a \u56fa\u5b9a\u8bed\u6cd5\uff1a ${\u51fd\u6570\u8c03\u7528} name: get params variables: value1: value1 value2: value2 base_url: ${ENV(BASE_URL)} request: method: GET url: /get params: value1: $value1 value2: $value2 headers: User-Agent: ${get_agent()} validate: - eq: ['status_code', 200] 5\uff09\u524d\u7f6e\uff08setup_hooks\uff09 OR \u540e\u7f6e\uff08teardown_hooks\uff09hook(\u4e0d\u53ef\u7528\u4e8etestsuite\u4e2d) name: login api variables: username: desire password: 123456 n_secs: 1 base_url: ${ENV(BASE_URL)} request: url: /user/login/ method: POST headers: Content-Type: \"application/json\" json: username: $username password: $password # \u524d\u7f6e\u6761\u4ef6 setup_hooks: # \u8c03\u7528\u81ea\u5b9a\u4e49\u7684\u524d\u7f6e\u51fd\u6570\uff0c\u4fee\u6539\u8bf7\u6c42\u4fe1\u606fheaders\u4e2d\u7684User-Agent\u4e3aDesire - ${setup_hook_add_kwargs($request)} # \u540e\u7f6e\u6761\u4ef6 teardown_hooks: # \u8c03\u7528\u81ea\u5b9a\u4e49\u7684\u540e\u7f6e\u51fd\u6570\uff0c\u5982\u679c\u54cd\u5e94\u6210\u529f\u5219\u4f11\u77205\u79d2\uff0c\u54cd\u5e94\u975e200\u5219\u4f11\u7720n_secs - ${teardown_hook_sleep_N_secs($response, $n_secs)} validate: - eq: [\"status_code\", 200] debugtalk.py\u81ea\u5b9a\u4e49\u51fd\u6570 import time def setup_hook_add_kwargs(request): request[\"headers\"][\"User-Agent\"] = \"Desire\" def teardown_hook_sleep_N_secs(response, n_secs): \"\"\" sleep n seconds after request \"\"\" if response.status_code == 200: time.sleep(5) else: time.sleep(n_secs) \u4e03\u3001\u65ad\u8a00 validate 1\uff09\u65ad\u8a00\u65b9\u5f0f \u65ad\u8a00\u65b9\u6cd5 \u6e90\u7801\uff08httprunner/built_in.py\uff09 \u8bf4\u660e eq def equals( check_value , expect_value ): \u662f\u5426\u76f8\u7b49 lt def less_than( check_value , expect_value ): \u5c0f\u4e8e le def less_than_or_equals( check_value , expect_value ): \u5c0f\u4e8e\u7b49\u4e8e gt def greater_than( check_value , expect_value ): \u5927\u4e8e ge def greater_than_or_equals( check_value , expect_value ): \u5927\u4e8e\u7b49\u4e8e ne def not_equals( check_value , expect_value ): \u4e0d\u7b49\u4e8e str_eq def string_equals( check_value , expect_value ): \u5b57\u7b26\u4e32\u7b49\u4e8e len_eq def length_equals( check_value , expect_value ): \u957f\u5ea6\u7b49\u4e8e len_gt def length_greater_than( check_value , expect_value ): \u957f\u5ea6\u5927\u4e8e len_ge def length_greater_than_or_equals( check_value , expect_value ): \u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e len_lt def length_less_than( check_value , expect_value ): \u957f\u5ea6\u5c0f\u4e8e len_le def length_less_than_or_equals( check_value , expect_value ): \u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e contains def contains( check_value , expect_value ): \u9884\u671f\u7ed3\u679c\u662f\u5426\u88ab\u5305\u542b\u5728\u9884\u671f\u7ed3\u679c\u4e2d contained_by def contained_by( check_value , expect_value ): \u5b9e\u9645\u7ed3\u679c\u662f\u5426\u88ab\u5305\u542b\u5728\u9884\u671f\u7ed3\u679c\u4e2d type_match def type_match( check_value , expect_value ): \u7c7b\u578b\u662f\u5426\u5339\u914d regex_match def regex_match( check_value , expect_value ): \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5426\u5339\u914d startswith def startswith( check_value , expect_value ): \u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u4ec0\u4e48\u5f00\u5934 endswith def endswith( check_value , expect_value ): \u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u4ec0\u4e48\u7ed3\u5c3e 2\uff09\u65ad\u8a00\u5185\u5bb9- check_value status_code\uff1a\u54cd\u5e94\u72b6\u6001\u7801 encoding\uff1a\u5b57\u7b26\u96c6 ok\uff1a\u662f\u5426OK reason\uff1a url\uff1a\u8bf7\u6c42\u5730\u5740 headers\uff1a\u8bf7\u6c42\u5934 headers.content-type cookies\uff1acookie\u4fe1\u606f content\uff1a\u54cd\u5e94\u4f53 content.person.name.first_name text\uff1a\u54cd\u5e94\u4f53\u6587\u672c\u683c\u5f0f json\uff1a\u54cd\u5e94\u4f53json\u683c\u5f0f \u516b\u3001\u63d0\u53d6\u6570\u636e extract config: name: \"demo testcase\" variables: device_sn: \"ABC\" # username: ${ENV(USERNAME)} # password: ${ENV(PASSWORD)} base_url: ${ENV(BASE_URL)} teststeps: - name: $title api: api\\login.yml variables: user_agent: 'iOS/10.3' device_sn: $device_sn # \u63d0\u53d6\u7528\u4f8b\u6267\u884c\u7684\u7ed3\u679c\uff0c\u5e76\u7ed9\u8d4b\u503c\u7ed9token extract: - token: content.token validate: - eq: [\"status_code\", $status_code] - contains: [\"content\", $msg] \u4e5d\u3001\u6574\u4e2aHttpRunner\u9879\u76ee\u76ee\u5f55\u6587\u4ef6\u89e3\u6790 1\uff09api\\login.yml # \u7528\u4f8b\u7684\u540d\u79f0 name: login api # \u5c40\u90e8\u53d8\u91cf variables: username: desire password: 123456 # base url \u6307\u5b9a\u7528\u6cd5 base_url: ${ENV(BASE_URL)} # \u8bf7\u6c42\u6570\u636e request: # \u8bf7\u6c42url\uff0c\u5982\u679c\u6709base_url\u4f1a\u81ea\u52a8\u8fdb\u884c\u62fc\u63a5url url: /user/login/ # \u8bf7\u6c42\u65b9\u5f0f method: POST # \u8bf7\u6c42\u5934\u4fe1\u606f headers: Content-Type: \"application/json\" # \u8bf7\u6c42\u53c2\u6570\uff08data/json/params\uff09 json: username: $username password: $password # \u65ad\u8a00\u4fe1\u606f validate: - eq: [\"status_code\", 200] 2\uff09api\\projects.yml name: projects api variables: page: 1 size: 3 base_url: ${ENV(BASE_URL)} request: url: /projects/ method: GET headers: Content-Type: \"application/json\" params: page: $page size: $size headers: # \u6b64\u63a5\u53e3\u9700\u8981token\u9274\u6743\uff0c\u8981\u6dfb\u52a0\u6b64\u8bf7\u6c42\u5934\uff0c\u5e76\u4e14token\u662f\u4ece\u767b\u9646\u63a5\u53e3\u4e2d\u83b7\u53d6\u7684 Authorization: \"JWT $token\" validate: - eq: [\"status_code\", 200] 3\uff09testcases\\login_testcase.yml config: name: \"demo testcase\" # \u5c40\u90e8\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u5728\u6574\u4e2atestcases\u4e2d variables: device_sn: \"ABC\" title: \u767b\u5f55\u7528\u4f8b status_code: 200 msg: token base_url: ${ENV(BASE_URL)} teststeps: - name: $title api: api\\login.yml # \u5b9a\u4e49\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u5728\u672cstep\u4e0b variables: user_agent: 'iOS/10.3' device_sn: $device_sn validate: - eq: [\"status_code\", $status_code] - contains: [\"content\", $msg] 4\uff09testcases\\projects_testcase.yml # \u7528\u4f8b\u96c6\u914d\u7f6e\u4fe1\u606f config: # \u7528\u4f8b\u96c6\u540d\u79f0 name: \"demo testcase\" # \u5c40\u90e8\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u4e3a\u6574\u4e2a\u7528\u4f8b\u96c6\uff08yml\uff09 variables: title: \u83b7\u53d6\u9879\u76ee\u5217\u8868 status_code: 200 # url \u4f7f\u7528\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u53d8\u91cf\uff08.env\uff09 base_url: ${ENV(BASE_URL)} # \u6d4b\u8bd5\u6b65\u9aa4 teststeps: # \u7528\u4f8b\u4e00 - # \u7528\u4f8b\u540d\u79f0 name: \u6b63\u5e38\u767b\u5f55 # \u7528\u4f8b\u63a5\u53e3\u6240\u5728yml\u6587\u4ef6 or \u7528\u4f8b\u63a5\u53e3 api: api\\login.yml # \u63d0\u53d6\u8fd4\u56de\u503c extract: # \u63d0\u53d6\u8fd4\u56de\u503c\uff0c\u4e2d\u7684token\u503c\uff0c\u7136\u540e\u8d4b\u503c\u7ed9\u53d8\u91cftoken # token\u7684\u4f5c\u7528\u57df\u662f\u5728\u6574\u4e2atestcases\uff0c\u7528\u4f8b\u4e8c\u4e2d\u7684projects.yml\u662f\u53ef\u4ee5\u83b7\u53d6\u5230\u7684 - token: content.token # \u65ad\u8a00 validate: - eq: [\"status_code\", 200] # \u7528\u4f8b\u4e8c - name: $title # \u7528\u4f8b\u63a5\u53e3\uff0c api: api\\projects.yml validate: - eq: [\"status_code\", $status_code] 5\uff09testsuites\\testsuite.yml config: # \u5957\u4ef6\u540d\u79f0 name: \"\u63a5\u53e3\u5957\u4ef6\" # \u5957\u4ef6\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49 # \u5982\u679c\u5728\u6d4b\u8bd5\u96c6\u6216\u8005\u63a5\u53e3\u7528\u4f8b\u4e2d\uff0c\u8ddf\u8fd9\u91cc\u7684\u53d8\u91cf\u6709\u4e00\u6837\u7684\uff0c\u8fd9\u91cc\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u6d4b\u8bd5\u96c6\u4e2d\uff0c\u6700\u540e\u662f\u63a5\u53e3\u7528\u4f8b variables: device_sn: \"XYZ\" # \u8fd9\u91cc\u7684base_url\u4f18\u5148\u7ea7\u6700\u9ad8 base_url: \"http://127.0.0.1:5000\" testcases: - name: \u767b\u5f55\u63a5\u53e3\u5957\u4ef6-$title # \u6d4b\u8bd5\u7528\u4f8b\u96c6 testcase: testcases\\login_testcase.yml # \u8fdb\u884c\u53c2\u6570\u5316\uff0c\u8fd9\u91cc\u7684\u53d8\u91cf\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4f5c\u7528\u57df\u53ea\u5728\u5f53\u524d\u7684\u7528\u4f8b\u96c6\u4e2d parameters: # \u53c2\u6570\u5316\u4f7f\u7528\u89c4\u5219\uff1a\u53d8\u91cf\u4e4b\u95f4\u7528-\u62fc\u63a5\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u8fdb\u884c\u53c2\u6570\u5316\uff0c\u89c1\uff1adebugtalk.py\u6587\u4ef6\u4e2d\u7684get_accounts\u65b9\u6cd5 - title-username-password-status_code-msg: ${get_accounts()} - name: \u9879\u76ee\u63a5\u53e3\u5957\u4ef6-$title testcase: testcases\\projects_testcase.yml parameters: # \u53c2\u6570\u5316\u4f7f\u7528\u89c4\u5219\uff1a\u53d8\u91cf\u4e4b\u95f4\u7528-\u62fc\u63a5\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u7528\u4f8b\u6570\u636e\u5c31\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8ddf\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u4e00\u5bf9\u5e94 - title-page-size-status_code: - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u6bcf\u98752\u6761\uff0c\u7b2c\u4e00\u9875\", \"1\", \"2\", 200] - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u6bcf\u98753\u6761\uff0c\u7b2c2\u9875\", \"2\", \"3\", 200] - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u4e0d\u6307\u5b9a\u6bcf\u9875\u6570\u91cf\uff0c\u7b2c\u4e00\u9875\", \"1\", \"\", 200] - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u6bcf\u98752\u6761\uff0c\uff0c\u4e0d\u6307\u5b9a\u9875\u6570\", \"\", \"2\", 404] 6\uff09debugtalk.py # \u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u521b\u5efa\u5e26\u53c2\u6570\u7684\u51fd\u6570 def get_accounts(): # \u5b9a\u4e49\u53c2\u6570\u5316\u7528\u4f8b\u6570\u636e\uff08\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868\uff09\uff0c\u6bcf\u4e00\u4e2a\u7528\u4f8b\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u6ca1\u4e2a\u5b57\u5178\u7684key\u5bf9\u5e94\u5230\u8bbe\u7f6e\u7684\u53c2\u6570\u5316 accounts = [ {\"title\": \"\u6b63\u5e38\u767b\u5f55\", \"username\": \"desire\", \"password\": \"123456\", \"status_code\": 200, \"msg\": \"token\"}, {\"title\": \"\u5bc6\u7801\u9519\u8bef\", \"username\": \"desire\", \"password\": \"123457\", \"status_code\": 400, \"msg\": \"non_field_errors\"}, {\"title\": \"\u8d26\u53f7\u9519\u8bef\", \"username\": \"desire111\", \"password\": \"123456\", \"status_code\": 400, \"msg\": \"non_field_errors\"}, {\"title\": \"\u7528\u6237\u540d\u4e3a\u7a7a\", \"username\": \"\", \"password\": \"123456\", \"status_code\": 400, \"msg\": \"username\"}, {\"title\": \"\u5bc6\u7801\u4e3a\u7a7a\", \"username\": \"desire\", \"password\": \"\", \"status_code\": 400, \"msg\": \"password\"}, ] # \u628a\u53c2\u6570\u5316\u6570\u636e\u8fd4\u56de return accounts 7\uff09.env # \u73af\u5883\u53d8\u91cf\u540d\uff0c\u4e00\u822c\u662f\u4ee5\u5927\u5199\u5b9a\u4e49\uff0c=\u540e\u9762\u662f\u53d8\u91cf\u503c\uff08\u56fa\u5b9a\u5199\u6cd5\uff09 BASE_URL=http://127.0.0.1:8000/ 7\uff09run.py from httprunner.api import HttpRunner hr = HttpRunner() # \u4f7f\u7528HttpRunner\u63d0\u4f9b\u7684run\u65b9\u6cd5\u8fdb\u884c\u6267\u884c\u7528\u4f8b # \u6307\u5b9a\u6267\u884c\u5355\u4e2a\u7528\u4f8b # hr.run(r\"api\\login.yml\") # \u6307\u5b9a\u6267\u884c\u6d4b\u8bd5\u96c6\uff08\u76f8\u540c\u53d8\u91cf\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u7684\u53d8\u91cf\u4f18\u5148\u7ea7\u6700\u9ad8\uff09 # hr.run(r\"testcases\\projects_testcase.yml\") # \u6307\u5b9a\u6267\u884c\u6d4b\u8bd5\u5957\u4ef6\uff08\u76f8\u540c\u53d8\u91cf\uff0c\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u7684\u53d8\u91cf\u4f18\u5148\u7ea7\u6700\u9ad8\uff09 hr.run(r\"testsuites\\testsuite.yml\") # \u901a\u8fc7HttpRunner\u63d0\u4f9b\u7684summary\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5230\u6267\u884c\u7684\u7ed3\u679c\u4fe1\u606f print(hr.summary)","title":"HTTPRunner2.x"},{"location":"HTTPRunner/HTTPRunner2.x/#httprunner","text":"","title":"HTTPRunner"},{"location":"HTTPRunner/HTTPRunner2.x/#_1","text":"2.x\u7248\u672c\u96c6\u6210\u4e86 3.x\u7248\u672c\u96c6\u6210\u4e86pytest","title":"\u4e00\u3001\u7b80\u4ecb"},{"location":"HTTPRunner/HTTPRunner2.x/#_2","text":"pip install httprunner==2.3.0","title":"\u4e8c\u3001\u5b89\u88c5"},{"location":"HTTPRunner/HTTPRunner2.x/#httprunner_1","text":"hrun --startproject ./hrdemo","title":"\u4e09\u3001\u521b\u5efahttprunner\u5de5\u7a0b"},{"location":"HTTPRunner/HTTPRunner2.x/#_3","text":"|-hrdemo |--api\uff1a\u4e3b\u8981\u5b58\u653e\u63a5\u53e3\u7684\u6700\u5c0f\u6267\u884c\u5355\u4f4d\uff08\u6b63\u5411\u7528\u4f8b\uff09 |--reports\uff1a\u7528\u4e8e\u5b58\u653e\u6d4b\u8bd5\u62a5\u544a |--testcases\uff1a\u7528\u4e8e\u5904\u7406\u63a5\u53e3\u7684\u8d1f\u8d23\u6267\u884c\u903b\u8f91\uff0c\u5b9e\u73b0\u63a5\u53e3\u95f4\u7684\u4f9d\u8d56 |--testsuites\uff1a\u7528\u4e8e\u6dfb\u52a0\u591a\u6761\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6279\u91cf\u6267\u884c\uff0c\u5904\u7406\u6570\u636e\u9a71\u52a8\u6d4b\u8bd5\uff08\u53c2\u6570\u5316\uff09 |--.env\uff1a\u7528\u4e8e\u81ea\u5b9a\u4e49\u5168\u5c40\u73af\u5883\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u7684\u6d4b\u8bd5\u811a\u672c\u4e2d\u8c03\u7528 |--.gitignore |--debugtalk.py\uff1a\u7528\u4e8e\u5904\u7406\u52a8\u6001\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406\u53c2\u6570\u5316\u52a8\u6001\u6570\u636e","title":"\u56db\u3001\u76ee\u5f55\u7ed3\u6784"},{"location":"HTTPRunner/HTTPRunner2.x/#_4","text":"","title":"\u4e94\u3001\u7b80\u5355\u4f7f\u7528"},{"location":"HTTPRunner/HTTPRunner2.x/#1yml","text":"name: get demo request: method: GET url: https://httpbin.org/get validate: - eq: [\"status_code\",200]","title":"1\uff09yml\u7528\u4f8b"},{"location":"HTTPRunner/HTTPRunner2.x/#2yml","text":"hrun api/get_demo.yml --report-dir reports OR httprunner api/get_demo.yml --report-dir reports","title":"2\uff09\u8fd0\u884cyml\u7528\u4f8b"},{"location":"HTTPRunner/HTTPRunner2.x/#_5","text":"","title":"\u516d\u3001\u7279\u6b8a\u7528\u6cd5"},{"location":"HTTPRunner/HTTPRunner2.x/#1","text":"\u5728yml\u6587\u4ef6\u4e2d\uff0c\u5728variables\u8282\u70b9\u4e0b\u5b9a\u4e49\u7684\u53c2\u6570\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u53ea\u5728\u5f53\u524dyml\u4e0b name: get params variables: value1: value1 value2: value2 \u4f7f\u7528\uff1a \u56fa\u5b9a\u8bed\u6cd5\uff1a $\u53d8\u91cf\u540d name: get params variables: value1: value1 value2: value2 request: method: GET url: 'https://httpbin.org/get' params: value1: $value1 value2: $value2 validate: - eq: ['status_code', 200]","title":"1\uff09\u5c40\u90e8\u53d8\u91cf"},{"location":"HTTPRunner/HTTPRunner2.x/#2base_url","text":"\u5728yml\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8282\u70b9base_url(\u540d\u5b57\u4e3a\u56fa\u5b9a\u5199\u6cd5) base_url: 'https://httpbin.org'","title":"2\uff09base_url"},{"location":"HTTPRunner/HTTPRunner2.x/#3env","text":"\u5728 .env \u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u4e3a\u73af\u5883\u53d8\u91cf USERNAME=leolee PASSWORD=123456 BASE_URL=https://httpbin.org \u4f7f\u7528\uff1a \u56fa\u5b9a\u8bed\u6cd5\uff1a ${ENV(\u5b9a\u4e49\u7684\u73af\u5883\u53d8\u91cf\u540d)} name: get params variables: value1: value1 value2: value2 base_url: ${ENV(BASE_URL)} request: method: GET url: /get params: value1: $value1 value2: $value2 validate: - eq: ['status_code', 200]","title":"3\uff09\u73af\u5883\u53d8\u91cf.env\u6587\u4ef6"},{"location":"HTTPRunner/HTTPRunner2.x/#4-debugtalkpy","text":"\u5728 debugtalk.py \u4e2d\u5b9a\u4e49\u51fd\u6570 import random def get_agent(): agents = [\"Mozilla/5.0 Desire\", \"Mozilla/5.0 Tommy\", \"Mozilla/5.0 Ronin\", \"Mozilla/5.0 DD\"] return random.choice(agents) \u4f7f\u7528\uff1a \u56fa\u5b9a\u8bed\u6cd5\uff1a ${\u51fd\u6570\u8c03\u7528} name: get params variables: value1: value1 value2: value2 base_url: ${ENV(BASE_URL)} request: method: GET url: /get params: value1: $value1 value2: $value2 headers: User-Agent: ${get_agent()} validate: - eq: ['status_code', 200]","title":"4\uff09\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570-debugtalk.py"},{"location":"HTTPRunner/HTTPRunner2.x/#5setup_hooks-or-teardown_hookshooktestsuite","text":"name: login api variables: username: desire password: 123456 n_secs: 1 base_url: ${ENV(BASE_URL)} request: url: /user/login/ method: POST headers: Content-Type: \"application/json\" json: username: $username password: $password # \u524d\u7f6e\u6761\u4ef6 setup_hooks: # \u8c03\u7528\u81ea\u5b9a\u4e49\u7684\u524d\u7f6e\u51fd\u6570\uff0c\u4fee\u6539\u8bf7\u6c42\u4fe1\u606fheaders\u4e2d\u7684User-Agent\u4e3aDesire - ${setup_hook_add_kwargs($request)} # \u540e\u7f6e\u6761\u4ef6 teardown_hooks: # \u8c03\u7528\u81ea\u5b9a\u4e49\u7684\u540e\u7f6e\u51fd\u6570\uff0c\u5982\u679c\u54cd\u5e94\u6210\u529f\u5219\u4f11\u77205\u79d2\uff0c\u54cd\u5e94\u975e200\u5219\u4f11\u7720n_secs - ${teardown_hook_sleep_N_secs($response, $n_secs)} validate: - eq: [\"status_code\", 200] debugtalk.py\u81ea\u5b9a\u4e49\u51fd\u6570 import time def setup_hook_add_kwargs(request): request[\"headers\"][\"User-Agent\"] = \"Desire\" def teardown_hook_sleep_N_secs(response, n_secs): \"\"\" sleep n seconds after request \"\"\" if response.status_code == 200: time.sleep(5) else: time.sleep(n_secs)","title":"5\uff09\u524d\u7f6e\uff08setup_hooks\uff09 OR \u540e\u7f6e\uff08teardown_hooks\uff09hook(\u4e0d\u53ef\u7528\u4e8etestsuite\u4e2d)"},{"location":"HTTPRunner/HTTPRunner2.x/#validate","text":"","title":"\u4e03\u3001\u65ad\u8a00 validate"},{"location":"HTTPRunner/HTTPRunner2.x/#1_1","text":"\u65ad\u8a00\u65b9\u6cd5 \u6e90\u7801\uff08httprunner/built_in.py\uff09 \u8bf4\u660e eq def equals( check_value , expect_value ): \u662f\u5426\u76f8\u7b49 lt def less_than( check_value , expect_value ): \u5c0f\u4e8e le def less_than_or_equals( check_value , expect_value ): \u5c0f\u4e8e\u7b49\u4e8e gt def greater_than( check_value , expect_value ): \u5927\u4e8e ge def greater_than_or_equals( check_value , expect_value ): \u5927\u4e8e\u7b49\u4e8e ne def not_equals( check_value , expect_value ): \u4e0d\u7b49\u4e8e str_eq def string_equals( check_value , expect_value ): \u5b57\u7b26\u4e32\u7b49\u4e8e len_eq def length_equals( check_value , expect_value ): \u957f\u5ea6\u7b49\u4e8e len_gt def length_greater_than( check_value , expect_value ): \u957f\u5ea6\u5927\u4e8e len_ge def length_greater_than_or_equals( check_value , expect_value ): \u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e len_lt def length_less_than( check_value , expect_value ): \u957f\u5ea6\u5c0f\u4e8e len_le def length_less_than_or_equals( check_value , expect_value ): \u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e contains def contains( check_value , expect_value ): \u9884\u671f\u7ed3\u679c\u662f\u5426\u88ab\u5305\u542b\u5728\u9884\u671f\u7ed3\u679c\u4e2d contained_by def contained_by( check_value , expect_value ): \u5b9e\u9645\u7ed3\u679c\u662f\u5426\u88ab\u5305\u542b\u5728\u9884\u671f\u7ed3\u679c\u4e2d type_match def type_match( check_value , expect_value ): \u7c7b\u578b\u662f\u5426\u5339\u914d regex_match def regex_match( check_value , expect_value ): \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5426\u5339\u914d startswith def startswith( check_value , expect_value ): \u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u4ec0\u4e48\u5f00\u5934 endswith def endswith( check_value , expect_value ): \u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u4ec0\u4e48\u7ed3\u5c3e","title":"1\uff09\u65ad\u8a00\u65b9\u5f0f"},{"location":"HTTPRunner/HTTPRunner2.x/#2-check_value","text":"status_code\uff1a\u54cd\u5e94\u72b6\u6001\u7801 encoding\uff1a\u5b57\u7b26\u96c6 ok\uff1a\u662f\u5426OK reason\uff1a url\uff1a\u8bf7\u6c42\u5730\u5740 headers\uff1a\u8bf7\u6c42\u5934 headers.content-type cookies\uff1acookie\u4fe1\u606f content\uff1a\u54cd\u5e94\u4f53 content.person.name.first_name text\uff1a\u54cd\u5e94\u4f53\u6587\u672c\u683c\u5f0f json\uff1a\u54cd\u5e94\u4f53json\u683c\u5f0f","title":"2\uff09\u65ad\u8a00\u5185\u5bb9-check_value"},{"location":"HTTPRunner/HTTPRunner2.x/#extract","text":"config: name: \"demo testcase\" variables: device_sn: \"ABC\" # username: ${ENV(USERNAME)} # password: ${ENV(PASSWORD)} base_url: ${ENV(BASE_URL)} teststeps: - name: $title api: api\\login.yml variables: user_agent: 'iOS/10.3' device_sn: $device_sn # \u63d0\u53d6\u7528\u4f8b\u6267\u884c\u7684\u7ed3\u679c\uff0c\u5e76\u7ed9\u8d4b\u503c\u7ed9token extract: - token: content.token validate: - eq: [\"status_code\", $status_code] - contains: [\"content\", $msg]","title":"\u516b\u3001\u63d0\u53d6\u6570\u636e extract"},{"location":"HTTPRunner/HTTPRunner2.x/#httprunner_2","text":"","title":"\u4e5d\u3001\u6574\u4e2aHttpRunner\u9879\u76ee\u76ee\u5f55\u6587\u4ef6\u89e3\u6790"},{"location":"HTTPRunner/HTTPRunner2.x/#1apiloginyml","text":"# \u7528\u4f8b\u7684\u540d\u79f0 name: login api # \u5c40\u90e8\u53d8\u91cf variables: username: desire password: 123456 # base url \u6307\u5b9a\u7528\u6cd5 base_url: ${ENV(BASE_URL)} # \u8bf7\u6c42\u6570\u636e request: # \u8bf7\u6c42url\uff0c\u5982\u679c\u6709base_url\u4f1a\u81ea\u52a8\u8fdb\u884c\u62fc\u63a5url url: /user/login/ # \u8bf7\u6c42\u65b9\u5f0f method: POST # \u8bf7\u6c42\u5934\u4fe1\u606f headers: Content-Type: \"application/json\" # \u8bf7\u6c42\u53c2\u6570\uff08data/json/params\uff09 json: username: $username password: $password # \u65ad\u8a00\u4fe1\u606f validate: - eq: [\"status_code\", 200]","title":"1\uff09api\\login.yml"},{"location":"HTTPRunner/HTTPRunner2.x/#2apiprojectsyml","text":"name: projects api variables: page: 1 size: 3 base_url: ${ENV(BASE_URL)} request: url: /projects/ method: GET headers: Content-Type: \"application/json\" params: page: $page size: $size headers: # \u6b64\u63a5\u53e3\u9700\u8981token\u9274\u6743\uff0c\u8981\u6dfb\u52a0\u6b64\u8bf7\u6c42\u5934\uff0c\u5e76\u4e14token\u662f\u4ece\u767b\u9646\u63a5\u53e3\u4e2d\u83b7\u53d6\u7684 Authorization: \"JWT $token\" validate: - eq: [\"status_code\", 200]","title":"2\uff09api\\projects.yml"},{"location":"HTTPRunner/HTTPRunner2.x/#3testcaseslogin_testcaseyml","text":"config: name: \"demo testcase\" # \u5c40\u90e8\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u5728\u6574\u4e2atestcases\u4e2d variables: device_sn: \"ABC\" title: \u767b\u5f55\u7528\u4f8b status_code: 200 msg: token base_url: ${ENV(BASE_URL)} teststeps: - name: $title api: api\\login.yml # \u5b9a\u4e49\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u5728\u672cstep\u4e0b variables: user_agent: 'iOS/10.3' device_sn: $device_sn validate: - eq: [\"status_code\", $status_code] - contains: [\"content\", $msg]","title":"3\uff09testcases\\login_testcase.yml"},{"location":"HTTPRunner/HTTPRunner2.x/#4testcasesprojects_testcaseyml","text":"# \u7528\u4f8b\u96c6\u914d\u7f6e\u4fe1\u606f config: # \u7528\u4f8b\u96c6\u540d\u79f0 name: \"demo testcase\" # \u5c40\u90e8\u53d8\u91cf\uff0c\u4f5c\u7528\u57df\u4e3a\u6574\u4e2a\u7528\u4f8b\u96c6\uff08yml\uff09 variables: title: \u83b7\u53d6\u9879\u76ee\u5217\u8868 status_code: 200 # url \u4f7f\u7528\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u53d8\u91cf\uff08.env\uff09 base_url: ${ENV(BASE_URL)} # \u6d4b\u8bd5\u6b65\u9aa4 teststeps: # \u7528\u4f8b\u4e00 - # \u7528\u4f8b\u540d\u79f0 name: \u6b63\u5e38\u767b\u5f55 # \u7528\u4f8b\u63a5\u53e3\u6240\u5728yml\u6587\u4ef6 or \u7528\u4f8b\u63a5\u53e3 api: api\\login.yml # \u63d0\u53d6\u8fd4\u56de\u503c extract: # \u63d0\u53d6\u8fd4\u56de\u503c\uff0c\u4e2d\u7684token\u503c\uff0c\u7136\u540e\u8d4b\u503c\u7ed9\u53d8\u91cftoken # token\u7684\u4f5c\u7528\u57df\u662f\u5728\u6574\u4e2atestcases\uff0c\u7528\u4f8b\u4e8c\u4e2d\u7684projects.yml\u662f\u53ef\u4ee5\u83b7\u53d6\u5230\u7684 - token: content.token # \u65ad\u8a00 validate: - eq: [\"status_code\", 200] # \u7528\u4f8b\u4e8c - name: $title # \u7528\u4f8b\u63a5\u53e3\uff0c api: api\\projects.yml validate: - eq: [\"status_code\", $status_code]","title":"4\uff09testcases\\projects_testcase.yml"},{"location":"HTTPRunner/HTTPRunner2.x/#5testsuitestestsuiteyml","text":"config: # \u5957\u4ef6\u540d\u79f0 name: \"\u63a5\u53e3\u5957\u4ef6\" # \u5957\u4ef6\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49 # \u5982\u679c\u5728\u6d4b\u8bd5\u96c6\u6216\u8005\u63a5\u53e3\u7528\u4f8b\u4e2d\uff0c\u8ddf\u8fd9\u91cc\u7684\u53d8\u91cf\u6709\u4e00\u6837\u7684\uff0c\u8fd9\u91cc\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u6d4b\u8bd5\u96c6\u4e2d\uff0c\u6700\u540e\u662f\u63a5\u53e3\u7528\u4f8b variables: device_sn: \"XYZ\" # \u8fd9\u91cc\u7684base_url\u4f18\u5148\u7ea7\u6700\u9ad8 base_url: \"http://127.0.0.1:5000\" testcases: - name: \u767b\u5f55\u63a5\u53e3\u5957\u4ef6-$title # \u6d4b\u8bd5\u7528\u4f8b\u96c6 testcase: testcases\\login_testcase.yml # \u8fdb\u884c\u53c2\u6570\u5316\uff0c\u8fd9\u91cc\u7684\u53d8\u91cf\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4f5c\u7528\u57df\u53ea\u5728\u5f53\u524d\u7684\u7528\u4f8b\u96c6\u4e2d parameters: # \u53c2\u6570\u5316\u4f7f\u7528\u89c4\u5219\uff1a\u53d8\u91cf\u4e4b\u95f4\u7528-\u62fc\u63a5\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u8fdb\u884c\u53c2\u6570\u5316\uff0c\u89c1\uff1adebugtalk.py\u6587\u4ef6\u4e2d\u7684get_accounts\u65b9\u6cd5 - title-username-password-status_code-msg: ${get_accounts()} - name: \u9879\u76ee\u63a5\u53e3\u5957\u4ef6-$title testcase: testcases\\projects_testcase.yml parameters: # \u53c2\u6570\u5316\u4f7f\u7528\u89c4\u5219\uff1a\u53d8\u91cf\u4e4b\u95f4\u7528-\u62fc\u63a5\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u7528\u4f8b\u6570\u636e\u5c31\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8ddf\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u4e00\u5bf9\u5e94 - title-page-size-status_code: - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u6bcf\u98752\u6761\uff0c\u7b2c\u4e00\u9875\", \"1\", \"2\", 200] - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u6bcf\u98753\u6761\uff0c\u7b2c2\u9875\", \"2\", \"3\", 200] - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u4e0d\u6307\u5b9a\u6bcf\u9875\u6570\u91cf\uff0c\u7b2c\u4e00\u9875\", \"1\", \"\", 200] - [\"\u83b7\u53d6\u9879\u76ee\u5217\u8868\u6570\u636e\uff0c\u6bcf\u98752\u6761\uff0c\uff0c\u4e0d\u6307\u5b9a\u9875\u6570\", \"\", \"2\", 404]","title":"5\uff09testsuites\\testsuite.yml"},{"location":"HTTPRunner/HTTPRunner2.x/#6debugtalkpy","text":"# \u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u521b\u5efa\u5e26\u53c2\u6570\u7684\u51fd\u6570 def get_accounts(): # \u5b9a\u4e49\u53c2\u6570\u5316\u7528\u4f8b\u6570\u636e\uff08\u5d4c\u5957\u5b57\u5178\u7684\u5217\u8868\uff09\uff0c\u6bcf\u4e00\u4e2a\u7528\u4f8b\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u6ca1\u4e2a\u5b57\u5178\u7684key\u5bf9\u5e94\u5230\u8bbe\u7f6e\u7684\u53c2\u6570\u5316 accounts = [ {\"title\": \"\u6b63\u5e38\u767b\u5f55\", \"username\": \"desire\", \"password\": \"123456\", \"status_code\": 200, \"msg\": \"token\"}, {\"title\": \"\u5bc6\u7801\u9519\u8bef\", \"username\": \"desire\", \"password\": \"123457\", \"status_code\": 400, \"msg\": \"non_field_errors\"}, {\"title\": \"\u8d26\u53f7\u9519\u8bef\", \"username\": \"desire111\", \"password\": \"123456\", \"status_code\": 400, \"msg\": \"non_field_errors\"}, {\"title\": \"\u7528\u6237\u540d\u4e3a\u7a7a\", \"username\": \"\", \"password\": \"123456\", \"status_code\": 400, \"msg\": \"username\"}, {\"title\": \"\u5bc6\u7801\u4e3a\u7a7a\", \"username\": \"desire\", \"password\": \"\", \"status_code\": 400, \"msg\": \"password\"}, ] # \u628a\u53c2\u6570\u5316\u6570\u636e\u8fd4\u56de return accounts","title":"6\uff09debugtalk.py"},{"location":"HTTPRunner/HTTPRunner2.x/#7env","text":"# \u73af\u5883\u53d8\u91cf\u540d\uff0c\u4e00\u822c\u662f\u4ee5\u5927\u5199\u5b9a\u4e49\uff0c=\u540e\u9762\u662f\u53d8\u91cf\u503c\uff08\u56fa\u5b9a\u5199\u6cd5\uff09 BASE_URL=http://127.0.0.1:8000/","title":"7\uff09.env"},{"location":"HTTPRunner/HTTPRunner2.x/#7runpy","text":"from httprunner.api import HttpRunner hr = HttpRunner() # \u4f7f\u7528HttpRunner\u63d0\u4f9b\u7684run\u65b9\u6cd5\u8fdb\u884c\u6267\u884c\u7528\u4f8b # \u6307\u5b9a\u6267\u884c\u5355\u4e2a\u7528\u4f8b # hr.run(r\"api\\login.yml\") # \u6307\u5b9a\u6267\u884c\u6d4b\u8bd5\u96c6\uff08\u76f8\u540c\u53d8\u91cf\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u7684\u53d8\u91cf\u4f18\u5148\u7ea7\u6700\u9ad8\uff09 # hr.run(r\"testcases\\projects_testcase.yml\") # \u6307\u5b9a\u6267\u884c\u6d4b\u8bd5\u5957\u4ef6\uff08\u76f8\u540c\u53d8\u91cf\uff0c\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u7684\u53d8\u91cf\u4f18\u5148\u7ea7\u6700\u9ad8\uff09 hr.run(r\"testsuites\\testsuite.yml\") # \u901a\u8fc7HttpRunner\u63d0\u4f9b\u7684summary\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5230\u6267\u884c\u7684\u7ed3\u679c\u4fe1\u606f print(hr.summary)","title":"7\uff09run.py"},{"location":"ORM/001SQLAlchemy/","text":"SQLAlchemy ORM \u6846\u67b6 \u4e00\u3001\u5b89\u88c5 pip install sqlalchemy==1.4.7 pip install pymysql # \u8fde\u63a5mysql\u6570\u636e\u5e93\u6240\u9700\u5e93 \u4e8c\u3001\u8fde\u63a5\u6570\u636e\u5e93 from sqlalchemy import create_engine engine = create_engine(f\"mysql+pymysql://{\u6570\u636e\u5e93\u8d26\u53f7}:{\u5bc6\u7801}@{\u6570\u636e\u5e93\u5730\u5740}:3306/{\u6570\u636e\u5e93}\", echo=True) print(engine) ------\u6253\u5370\u7ed3\u679c------ Engine(mysql+pymysql://root:***@127.0.0.1:3306/scrapy) \u4e09\u3001\u521b\u5efa\u4f1a\u8bdd\u901a\u9053 from sqlalchemy.orm import sessionmaker maker = sessionmaker(bind=engine) session = maker() print(session) ------\u6253\u5370\u7ed3\u679c---------------- <sqlalchemy.orm.session.Session object at 0x03BB4400> \u56db\u3001\u5173\u95ed\u4f1a\u8bdd\u901a\u9053 session.close_all() \u4e94\u3001\u521b\u5efa\u6570\u636e\u8868\u6a21\u578b \u521b\u5efamodels\u6a21\u5757\uff0c\u5b58\u653e\u6a21\u578b\u5bf9\u8c61 \u521b\u5efa\u8868\u7684\u6a21\u578b\u5bf9\u8c61\uff0c\u8981\u7ee7\u627f declarative_base \u5bf9\u8c61 __tablename__ \uff1a\u6570\u636e\u5e93\u4e2d\u8868\u7684\u540d\u79f0 \u5b57\u6bb5\u8981\u4e0e\u6570\u636e\u5e93\u4e2d\u5b57\u6bb5\u5bf9\u5e94 from sqlalchemy import Column, Integer, String from sqlalchemy.ext.declarative import declarative_base Base = declarative_base() class User(Base): __tablename__ = 'users' id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String(20)) fullname = Column(String(32)) password = Column(String(32)) def __repr__(self): # \u5f53\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u6a21\u578b\u7ed3\u679c\u6570\u636e\u65f6\u8c03\u7528 return f\"<User(name='{self.name}', fullname='{self.fullname}', password='{self.password}')>\" \u516d\u3001\u81ea\u52a8\u751f\u6210\u6570\u636e\u8868\uff08\u5728\u6ca1\u6709\u8868\u7684\u60c5\u51b5\u4e0b\uff09 Base.metadata.create_all(engine, checkfirst=True) \u4e03\u3001\u6570\u636e\u5e93\u64cd\u4f5c 1\u3001\u6dfb\u52a0 1\uff09add: \u5355\u6761\u6dfb\u52a0 # \u5b9e\u4f8b\u5316\u6a21\u578b\u7c7b ed_user = User(name=\"desire\", fullname=\"asdfasdf\", password=\"123123\") # \u6dfb\u52a0 session.add(ed_user) # \u63d0\u4ea4 session.commit() ====> sql INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [generated in 0.00054s] {'name': 'desire', 'fullname': 'asdfasdf', 'password': '123123'} 2\uff09add_all: \u6279\u91cf\u6dfb\u52a0\uff08\u5185\u90e8\u8fd8\u662f\u4f7f\u7528\u7684add\uff09 # \u5217\u8868\u6bcf\u4e2a\u5143\u7d20\u4e3a\u6a21\u578b\u7c7b\u5b9e\u4f8b session.add_all([ User(name='wendy', fullname='Wendy Williams', password='windy'), User(name='mary', fullname='Mary Contrary', password='mary'), User(name='fred', fullname='Fred Flintstone', password='freddy')]) session.commit() ==> sql INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [cached since 0.005862s ago] {'name': 'wendy', 'fullname': 'Wendy Williams', 'password': 'windy'} INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [cached since 0.01483s ago] {'name': 'mary', 'fullname': 'Mary Contrary', 'password': 'mary'} INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [cached since 0.01808s ago] {'name': 'fred', 'fullname': 'Fred Flintstone', 'password': 'freddy'} 2\u3001\u4fee\u6539 1\uff09\u65b9\u5f0f\u4e00 \u6839\u636eID\u67e5\u8be2\u51fa\u6765\u6570\u636e\u5b9e\u4f53\u7c7b \u7136\u540e\u76f4\u63a5\u4fee\u6539\u6570\u636e\u5b9e\u4f53\u7c7b\u4e2d\u7684\u6570\u636e \u8fdb\u884ccommit\u63d0\u4ea4\uff0c user = session.get(User, 8) user.password = \"123456\" session.commit() ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id = %(pk_1)s -- [generated in 0.00105s] {'pk_1': 8} UPDATE users SET password=%(password)s WHERE users.id = %(users_id)s -- [generated in 0.00042s] {'password': '123456', 'users_id': 8} 2\uff09\u65b9\u5f0f\u4e8c \u901a\u8fc7\u94fe\u5f0f\u8c03\u7528\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c update\u53c2\u6570\u4e3a\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u7684key\u8981\u8ddf\u5217\u540d\u5bf9\u5e94 \u66f4\u65b0\u6210\u529f\u8fd4\u56de1\uff0c\u66f4\u65b0\u5931\u8d25\u8fd4\u56de0 session.query(User).filter(User.id==8).update({\"password\":\"654321\"}) session.commit() ==> sql UPDATE users SET password=%(password)s WHERE users.id = %(id_1)s -- [generated in 0.00195s] {'password': '654321', 'id_1': 8} 3\u3001\u67e5\u8be2 1\uff09\u67e5\u8be2\u6240\u6709\u6570\u636e \u901a\u8fc7query\u8fdb\u884c\u67e5\u8be2\uff0c\u4f7f\u7528all()\u67e5\u8be2\u6240\u6709\u6570\u636e\uff0c\u8fd4\u56de\u6570\u636e\u4e3a\u5217\u8868\u5d4c\u5957\u6a21\u578b\u7c7b \u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u904d\u5386\u83b7\u53d6 \u53ef\u4ee5\u901a\u8fc7\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e users = session.query(User).all() for user in users: print(user, user.name) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> desire <User(name='wendy', fullname='Wendy Williams', password='windy')> wendy <User(name='mary', fullname='Mary Contrary', password='mary')> mary <User(name='fred', fullname='Fred Flintstone', password='freddy')> fred 2\uff09\u67e5\u8be2\u7b2c\u4e00\u6761\u6570\u636e \u4f7f\u7528first\u67e5\u8be2\u7b2c\u4e00\u6761\u6570\u636e \u8fd4\u56de\u7684\u662f\u6a21\u578b\u7c7b\uff0c\u53ef\u4ee5\u901a\u8fc7\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e user = session.query(User).first() print(user, user.name) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users LIMIT %(param_1)s -- [generated in 0.00076s] {'param_1': 1} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> desire 3\uff09\u67e5\u8be2\u6307\u5b9a\u5217\u6570\u636e \u5728query\u4e2d\u6dfb\u52a0\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u53ef\u4ee5\u4e3a\u6a21\u578b\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u5217\u540d\uff0c\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u5217\u8868\u5d4c\u5957\u5143\u7ec4 \u901a\u8fc7\u5faa\u73af\u904d\u5386\u83b7\u53d6 \u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e users = session.query(User.name, User.fullname).all() for user in users: print(user, user.name,user.fullname) ==> sql SELECT users.name AS users_name, users.fullname AS users_fullname FROM users ==> \u6253\u5370\u7ed3\u679c ('desire', 'asdfasdf') desire asdfasdf ('wendy', 'Wendy Williams') wendy Wendy Williams ('mary', 'Mary Contrary') mary Mary Contrary ('fred', 'Fred Flintstone') fred Fred Flintstone 4\uff09\u6761\u4ef6\u67e5\u8be2 1. filter\u6761\u4ef6\u67e5\u8be2 \u4f7f\u7528filter\u8fdb\u884c\u6761\u4ef6\u67e5\u8be2\uff0c\u67e5\u8be2\u6761\u4ef6\u4e3a\u3010User.fullname==Wendy Williams\u3011 \u4f7f\u7528filter\u6307\u5b9a\u5217\u4e3a\u6761\u4ef6\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u5f53\u505a\u6761\u4ef6 users = session.query(User).filter(User.fullname == \"Wendy Williams\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname = %(fullname_1)s -- [generated in 0.00043s] {'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')> 2. filter_by\u6761\u4ef6\u67e5\u8be2 \u4f7f\u7528filter_by\u8fdb\u884c\u6761\u4ef6\u67e5\u8be2\uff0c\u53ef\u4ee5\u628a\u6a21\u578b\u7c7b\u5c5e\u6027\u5f53\u505afilter_by\u53c2\u6570\u8fdb\u884c\u6761\u4ef6\u67e5\u8be2\u3010fullname=\"Wendy Williams\"\u3011 \u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\u590d\u6742\u5ea6 users = session.query(User).filter_by(fullname=\"Wendy Williams\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname = %(fullname_1)s -- [generated in 0.00053s] {'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')> 3.\u591a\u6761\u4ef6\u67e5\u8be2 \u53ef\u4ee5\u4f7f\u7528\u94fe\u5f0f\u8c03\u7528\uff0c\u6dfb\u52a0\u591a\u4e2a filter / filter_by \u4e5f\u53ef\u4ee5\u5728 filter / filter_by \u6dfb\u52a0\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u591a\u6761\u4ef6\u67e5\u8be2 users = session.query(User).filter_by(fullname=\"Wendy Williams\", name=\"wendy\").all() # users = session.query(User).filter_by(fullname=\"Wendy Williams\").filter_by(name=\"wendy\").all() # users = session.query(User).filter(User.fullname==\"Wendy Williams\", User.name==\"wendy\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname = %(fullname_1)s AND users.name = %(name_1)s -- [generated in 0.00053s] {'fullname_1': 'Wendy Williams', 'name_1': 'wendy'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')> 5\uff09\u6a21\u7cca\u67e5\u8be2 like \u6a21\u7cca\u67e5\u8be2\uff0c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u540e\u7aef\u533a\u5206\u5927\u5c0f\u5199\uff08\u6682\u65f6\u6ca1\u9047\u5230\u8fc7\uff09 ilike \u6a21\u7cca\u67e5\u8be2\uff0c\u5bf9\u4e8e\u4fdd\u8bc1\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u6bd4\u8f83\uff0c\u63a8\u8350\u4f7f\u7528\u8fd9\u4e2a users = session.query(User).filter(User.fullname.like('%F%')).all() # users = session.query(User).filter(User.fullname.ilike('%F%')).all() for user in users: print(user) ==> sql -- like>> SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname LIKE %(fullname_1)s -- [generated in 0.00051s] {'fullname_1': '%F%'} -- ilike>> SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE lower(users.fullname) LIKE lower(%(fullname_1)s) -- [generated in 0.00061s] {'fullname_1': '%F%'} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> <User(name='fred', fullname='Fred Flintstone', password='freddy')> 6\uff09IN\u67e5\u8be2 1. IN\u67e5\u8be2 \u67e5\u8be2\u591a\u4e2aid\u7684\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528IN\u67e5\u8be2 \u53ef\u4ee5\u4f7f\u7528\u3010\u7c7b\u540d.\u5c5e\u6027\u540d.in_()\u3011\u8fdb\u884cIN\u67e5\u8be2 IN\u67e5\u8be2\u53c2\u6570\u4e3a\u5217\u8868 \u8fd4\u56de\u503c\u4e3a\u5217\u8868 users = session.query(User).filter(User.id.in_([1,2,3])).all() for user in users: print(user) sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id IN (%(id_1_1)s, %(id_1_2)s, %(id_1_3)s) -- [generated in 0.00055s] {'id_1_1': 1, 'id_1_2': 2, 'id_1_3': 3} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> <User(name='wendy', fullname='Wendy Williams', password='windy')> <User(name='mary', fullname='Mary Contrary', password='mary')> 2. not IN\u67e5\u8be2 \u53ea\u9700\u5728IN\u67e5\u8be2\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 ~ \u3010~\u7c7b\u540d.\u5c5e\u6027\u540d.in_()\u3011\u8fdb\u884cnot IN\u67e5\u8be2 users = session.query(User).filter(~User.id.in_([1,2,3])).all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id NOT IN (%(id_1_1)s, %(id_1_2)s, %(id_1_3)s) -- [generated in 0.00086s] {'id_1_1': 1, 'id_1_2': 2, 'id_1_3': 3} ==> \u6253\u5370\u7ed3\u679c <User(name='fred', fullname='Fred Flintstone', password='freddy')> 7\uff09and\u67e5\u8be2 \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 filter \u8fdb\u884c and \u591a\u6761\u4ef6\u67e5\u8be2 \u4e5f\u53ef\u4ee5\u4f7f\u7528 and_ \u8fdb\u884c\u591a\u6761\u4ef6\u67e5\u8be2 from sqlalchemy import and_ users = session.query(User).filter(and_(User.name == \"wendy\",User.fullname == \"Wendy Williams\")).all() # users = session.query(User).filter(User.name == \"wendy\",User.fullname == \"Wendy Williams\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.name = %(name_1)s AND users.fullname = %(fullname_1)s -- [generated in 0.00065s] {'name_1': 'wendy', 'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')> 8\uff09or\u67e5\u8be2 \u518d\u8fdb\u884c\u8fc7\u6ee4\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7 or_ \u8fdb\u884c\u591a\u4e2a\u6761\u4ef6\u6ee1\u8db3\u5176\u4e00\u5373\u53ef\u67e5\u8be2\u51fa\u6765 from sqlalchemy import or_ users = session.query(User).filter(or_(User.name == \"wendy1\",User.fullname == \"Wendy Williams\")).all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.name = %(name_1)s OR users.fullname = %(fullname_1)s -- [generated in 0.00045s] {'name_1': 'wendy1', 'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')> 9\uff09\u4e3b\u952e\u67e5\u8be2 \u53ef\u4ee5\u4f7f\u7528 get \u8fdb\u884c\u4e3b\u952e\u67e5\u8be2 \u76f4\u63a5\u4f7f\u7528 session.get \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6a21\u578b\u7c7b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aid\u503c \u4f7f\u7528\u94fe\u5f0f\u8c03\u7528 session.query(User).get(1) user = session.get(User, 1) # user = session.query(User).get(1) print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id = %(pk_1)s -- [generated in 0.00083s] {'pk_1': 1} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> 10\uff09\u8303\u56f4\u67e5\u8be2 1. BETWEEN ... AND ... between \u8303\u56f4\u67e5\u8be2 \u67e5\u8be2\u786e\u5b9a\u8303\u56f4\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u53ef\u4ee5\u662f\u6570\u5b57\uff0c\u6587\u672c\u6216\u65e5\u671f \u8303\u56f4\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u503c q = session.query(User).filter(User.id.between(2,4)).all() for user in q: print(user.id, user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id BETWEEN %(id_1)s AND %(id_2)s -- [generated in 0.00053s] {'id_1': 2, 'id_2': 4} ==> \u6253\u5370\u7ed3\u679c 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')> 2. NOT BETWEEN ... AND ... \u53ea\u9700\u5728 between \u67e5\u8be2\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 ~ q = session.query(User).filter(~User.id.between(2,4)).all() for user in q: print(user.id,user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id NOT BETWEEN %(id_1)s AND %(id_2)s -- [generated in 0.00042s] {'id_1': 2, 'id_2': 4} ==> \u6253\u5370\u7ed3\u679c 1 <User(name='desire', fullname='asdfasdf', password='123123')> 7 <User(name='mary', fullname='Mary Contrary', password='mary')> 8 <User(name='fred', fullname='Fred Flintstone', password='654321')> 11\uff09\u5206\u7ec4\u67e5\u8be2 group_by \u5206\u7ec4\u67e5\u8be2 q = session.query(User).group_by(User.name).all() for user in q: print(user.id,user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users GROUP BY users.name -- [generated in 0.00048s] {} ==> \u6253\u5370\u7ed3\u679c 1 <User(name='desire', fullname='asdfasdf', password='123123')> 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')> having \u805a\u5408\u64cd\u4f5c\uff08\u4f7f\u7528\u805a\u5408\u64cd\u4f5c \u9700\u8981\u5bfc\u5165 func \u5e93\uff09 from sqlalchemy.sql import func q = session.query(User).group_by(User.name).having(func.min(User.id)>3).all() for user in q: print(user.id,user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users GROUP BY users.name HAVING min(users.id) > %(min_1)s -- [generated in 0.00083s] {'min_1': 3} ==> \u6253\u5370\u7ed3\u679c 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')> \u7edf\u8ba1\u5206\u7ec4\u540e\u7684\u6570\u636e\u91cf from sqlalchemy.sql import func q = session.query(User.name, func.count(User.name)) \\ .group_by(User.name).all() print(q) ==> sql SELECT users.name AS users_name, count(users.name) AS count_1 FROM users GROUP BY users.name -- [generated in 0.00184s] {} ==> \u6253\u5370\u7ed3\u679c [('desire', 1), ('wendy', 1), ('mary', 2), ('fred', 2)] 4\u3001\u5220\u9664 delete \u5220\u9664\u64cd\u4f5c \u5220\u9664\u64cd\u4f5c\u540e\uff0c\u8981\u8fdb\u884c\u63d0\u4ea4 commit \u8fd4\u56de\uff1a\u5220\u9664\u6210\u529f 1\uff0c\u5220\u9664\u5931\u8d25 0 result = session.query(User).filter_by(id=5).delete() print(result) session.commit() ==> sql DELETE FROM users WHERE users.id = %(id_1)s -- [generated in 0.00052s] {'id_1': 5} ==> \u6253\u5370\u7ed3\u679c 1 5\u3001\u4f7f\u7528\u6587\u672cSQL \u53ef\u4ee5\u4f7f\u7528 text() \u8fdb\u884c\u6587\u672cSQL\u6267\u884c from sqlalchemy import text users = session.query(User).filter(text(\"id < 3\")).all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE id < 3 ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> <User(name='wendy', fullname='Wendy Williams', password='windy')> 6\u3001\u7edf\u8ba1 count \u7edf\u8ba1\u7ed3\u679c\u6570 num = session.query(User).count() print(num) ==> sql SELECT count(*) AS count_1 FROM (SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users) AS anon_1 ==> \u6253\u5370\u7ed3\u679c 4 7\u3001\u53bb\u91cd distinct \u53bb\u91cd users = session.query(User).distinct().all() print(users) ==> sql SELECT DISTINCT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ==> \u6253\u5370\u7ed3\u679c [ <User(name='desire', fullname='asdfasdf', password='123123')>, <User(name='wendy', fullname='Wendy Williams', password='windy')>, <User(name='mary', fullname='Mary Contrary', password='mary')>, <User(name='fred', fullname='Fred Flintstone', password='freddy')> ] 8\u3001\u6392\u5e8f order_by \u6392\u5e8f 1. \u9ed8\u8ba4\u6392\u5e8f\uff0c\u5347\u5e8f users = session.query(User).order_by(User.id).all() for user in users: print(user.id, user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ORDER BY users.id ==> \u6253\u5370\u7ed3\u679c 1 <User(name='desire', fullname='asdfasdf', password='123123')> 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')> 2. \u964d\u5e8f users = session.query(User).order_by(User.id.desc()) for user in users: print(user.id, user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ORDER BY users.id DESC ==> \u6253\u5370\u7ed3\u679c 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 1 <User(name='desire', fullname='asdfasdf', password='123123')> 9\u3001\u522b\u540d 1. \u4e3a\u5b9e\u4f53\u7c7b\u6307\u5b9a\u522b\u540d \u4f7f\u7528 aliased \u5bf9\u5b9e\u4f53\u7c7b\u6307\u5b9a\u522b\u540d \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\uff1a\u5b9e\u4f53\u7c7b\u540d \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\uff1a\u522b\u540d \u6dfb\u52a0\u5217\u65f6\uff0c\u8981\u4f7f\u7528\u3010\u522b\u540d.\u5c5e\u6027\u3011 user_alias = aliased(User, name='user_alias') users = session.query(user_alias, user_alias.name).all() for instance in users: print(instance.user_alias, instance.name) ==> sql SELECT user_alias.id AS user_alias_id, user_alias.name AS user_alias_name, user_alias.fullname AS user_alias_fullname, user_alias.password AS user_alias_password FROM users AS user_alias ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> desire <User(name='wendy', fullname='Wendy Williams', password='windy')> wendy <User(name='mary', fullname='Mary Contrary', password='mary')> mary <User(name='fred', fullname='Fred Flintstone', password='freddy')> fred 2. \u4e3a\u5217\u6307\u5b9a\u522b\u540d label \u4e3a\u5217\u6307\u5b9a\u522b\u540d \u83b7\u53d6\u503c\u5f97\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u522b\u540d\u8fdb\u884c\u83b7\u53d6\uff0c\u5426\u5219\u4f1a\u62a5\u9519 users = session.query(User.name.label('name_label')).all() for user in users: print(user.name_label) ==> sql SELECT users.name AS name_label FROM users ==> \u6253\u5370\u7ed3\u679c desire wendy mary fred","title":"SQLAlchemy ORM \u6846\u67b6"},{"location":"ORM/001SQLAlchemy/#sqlalchemy-orm","text":"","title":"SQLAlchemy ORM \u6846\u67b6"},{"location":"ORM/001SQLAlchemy/#_1","text":"pip install sqlalchemy==1.4.7 pip install pymysql # \u8fde\u63a5mysql\u6570\u636e\u5e93\u6240\u9700\u5e93","title":"\u4e00\u3001\u5b89\u88c5"},{"location":"ORM/001SQLAlchemy/#_2","text":"from sqlalchemy import create_engine engine = create_engine(f\"mysql+pymysql://{\u6570\u636e\u5e93\u8d26\u53f7}:{\u5bc6\u7801}@{\u6570\u636e\u5e93\u5730\u5740}:3306/{\u6570\u636e\u5e93}\", echo=True) print(engine) ------\u6253\u5370\u7ed3\u679c------ Engine(mysql+pymysql://root:***@127.0.0.1:3306/scrapy)","title":"\u4e8c\u3001\u8fde\u63a5\u6570\u636e\u5e93"},{"location":"ORM/001SQLAlchemy/#_3","text":"from sqlalchemy.orm import sessionmaker maker = sessionmaker(bind=engine) session = maker() print(session) ------\u6253\u5370\u7ed3\u679c---------------- <sqlalchemy.orm.session.Session object at 0x03BB4400>","title":"\u4e09\u3001\u521b\u5efa\u4f1a\u8bdd\u901a\u9053"},{"location":"ORM/001SQLAlchemy/#_4","text":"session.close_all()","title":"\u56db\u3001\u5173\u95ed\u4f1a\u8bdd\u901a\u9053"},{"location":"ORM/001SQLAlchemy/#_5","text":"\u521b\u5efamodels\u6a21\u5757\uff0c\u5b58\u653e\u6a21\u578b\u5bf9\u8c61 \u521b\u5efa\u8868\u7684\u6a21\u578b\u5bf9\u8c61\uff0c\u8981\u7ee7\u627f declarative_base \u5bf9\u8c61 __tablename__ \uff1a\u6570\u636e\u5e93\u4e2d\u8868\u7684\u540d\u79f0 \u5b57\u6bb5\u8981\u4e0e\u6570\u636e\u5e93\u4e2d\u5b57\u6bb5\u5bf9\u5e94 from sqlalchemy import Column, Integer, String from sqlalchemy.ext.declarative import declarative_base Base = declarative_base() class User(Base): __tablename__ = 'users' id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String(20)) fullname = Column(String(32)) password = Column(String(32)) def __repr__(self): # \u5f53\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u6a21\u578b\u7ed3\u679c\u6570\u636e\u65f6\u8c03\u7528 return f\"<User(name='{self.name}', fullname='{self.fullname}', password='{self.password}')>\"","title":"\u4e94\u3001\u521b\u5efa\u6570\u636e\u8868\u6a21\u578b"},{"location":"ORM/001SQLAlchemy/#_6","text":"Base.metadata.create_all(engine, checkfirst=True)","title":"\u516d\u3001\u81ea\u52a8\u751f\u6210\u6570\u636e\u8868\uff08\u5728\u6ca1\u6709\u8868\u7684\u60c5\u51b5\u4e0b\uff09"},{"location":"ORM/001SQLAlchemy/#_7","text":"","title":"\u4e03\u3001\u6570\u636e\u5e93\u64cd\u4f5c"},{"location":"ORM/001SQLAlchemy/#1","text":"","title":"1\u3001\u6dfb\u52a0"},{"location":"ORM/001SQLAlchemy/#1add","text":"# \u5b9e\u4f8b\u5316\u6a21\u578b\u7c7b ed_user = User(name=\"desire\", fullname=\"asdfasdf\", password=\"123123\") # \u6dfb\u52a0 session.add(ed_user) # \u63d0\u4ea4 session.commit() ====> sql INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [generated in 0.00054s] {'name': 'desire', 'fullname': 'asdfasdf', 'password': '123123'}","title":"1\uff09add: \u5355\u6761\u6dfb\u52a0"},{"location":"ORM/001SQLAlchemy/#2add_all-add","text":"# \u5217\u8868\u6bcf\u4e2a\u5143\u7d20\u4e3a\u6a21\u578b\u7c7b\u5b9e\u4f8b session.add_all([ User(name='wendy', fullname='Wendy Williams', password='windy'), User(name='mary', fullname='Mary Contrary', password='mary'), User(name='fred', fullname='Fred Flintstone', password='freddy')]) session.commit() ==> sql INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [cached since 0.005862s ago] {'name': 'wendy', 'fullname': 'Wendy Williams', 'password': 'windy'} INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [cached since 0.01483s ago] {'name': 'mary', 'fullname': 'Mary Contrary', 'password': 'mary'} INSERT INTO users (name, fullname, password) VALUES (%(name)s, %(fullname)s, %(password)s) [cached since 0.01808s ago] {'name': 'fred', 'fullname': 'Fred Flintstone', 'password': 'freddy'}","title":"2\uff09add_all: \u6279\u91cf\u6dfb\u52a0\uff08\u5185\u90e8\u8fd8\u662f\u4f7f\u7528\u7684add\uff09"},{"location":"ORM/001SQLAlchemy/#2","text":"","title":"2\u3001\u4fee\u6539"},{"location":"ORM/001SQLAlchemy/#1_1","text":"\u6839\u636eID\u67e5\u8be2\u51fa\u6765\u6570\u636e\u5b9e\u4f53\u7c7b \u7136\u540e\u76f4\u63a5\u4fee\u6539\u6570\u636e\u5b9e\u4f53\u7c7b\u4e2d\u7684\u6570\u636e \u8fdb\u884ccommit\u63d0\u4ea4\uff0c user = session.get(User, 8) user.password = \"123456\" session.commit() ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id = %(pk_1)s -- [generated in 0.00105s] {'pk_1': 8} UPDATE users SET password=%(password)s WHERE users.id = %(users_id)s -- [generated in 0.00042s] {'password': '123456', 'users_id': 8}","title":"1\uff09\u65b9\u5f0f\u4e00"},{"location":"ORM/001SQLAlchemy/#2_1","text":"\u901a\u8fc7\u94fe\u5f0f\u8c03\u7528\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c update\u53c2\u6570\u4e3a\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u7684key\u8981\u8ddf\u5217\u540d\u5bf9\u5e94 \u66f4\u65b0\u6210\u529f\u8fd4\u56de1\uff0c\u66f4\u65b0\u5931\u8d25\u8fd4\u56de0 session.query(User).filter(User.id==8).update({\"password\":\"654321\"}) session.commit() ==> sql UPDATE users SET password=%(password)s WHERE users.id = %(id_1)s -- [generated in 0.00195s] {'password': '654321', 'id_1': 8}","title":"2\uff09\u65b9\u5f0f\u4e8c"},{"location":"ORM/001SQLAlchemy/#3","text":"","title":"3\u3001\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#1_2","text":"\u901a\u8fc7query\u8fdb\u884c\u67e5\u8be2\uff0c\u4f7f\u7528all()\u67e5\u8be2\u6240\u6709\u6570\u636e\uff0c\u8fd4\u56de\u6570\u636e\u4e3a\u5217\u8868\u5d4c\u5957\u6a21\u578b\u7c7b \u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u904d\u5386\u83b7\u53d6 \u53ef\u4ee5\u901a\u8fc7\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e users = session.query(User).all() for user in users: print(user, user.name) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> desire <User(name='wendy', fullname='Wendy Williams', password='windy')> wendy <User(name='mary', fullname='Mary Contrary', password='mary')> mary <User(name='fred', fullname='Fred Flintstone', password='freddy')> fred","title":"1\uff09\u67e5\u8be2\u6240\u6709\u6570\u636e"},{"location":"ORM/001SQLAlchemy/#2_2","text":"\u4f7f\u7528first\u67e5\u8be2\u7b2c\u4e00\u6761\u6570\u636e \u8fd4\u56de\u7684\u662f\u6a21\u578b\u7c7b\uff0c\u53ef\u4ee5\u901a\u8fc7\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e user = session.query(User).first() print(user, user.name) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users LIMIT %(param_1)s -- [generated in 0.00076s] {'param_1': 1} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> desire","title":"2\uff09\u67e5\u8be2\u7b2c\u4e00\u6761\u6570\u636e"},{"location":"ORM/001SQLAlchemy/#3_1","text":"\u5728query\u4e2d\u6dfb\u52a0\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u53ef\u4ee5\u4e3a\u6a21\u578b\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u5217\u540d\uff0c\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u5217\u8868\u5d4c\u5957\u5143\u7ec4 \u901a\u8fc7\u5faa\u73af\u904d\u5386\u83b7\u53d6 \u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u83b7\u53d6\u6307\u5b9a\u7684\u6570\u636e users = session.query(User.name, User.fullname).all() for user in users: print(user, user.name,user.fullname) ==> sql SELECT users.name AS users_name, users.fullname AS users_fullname FROM users ==> \u6253\u5370\u7ed3\u679c ('desire', 'asdfasdf') desire asdfasdf ('wendy', 'Wendy Williams') wendy Wendy Williams ('mary', 'Mary Contrary') mary Mary Contrary ('fred', 'Fred Flintstone') fred Fred Flintstone","title":"3\uff09\u67e5\u8be2\u6307\u5b9a\u5217\u6570\u636e"},{"location":"ORM/001SQLAlchemy/#4","text":"","title":"4\uff09\u6761\u4ef6\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#1-filter","text":"\u4f7f\u7528filter\u8fdb\u884c\u6761\u4ef6\u67e5\u8be2\uff0c\u67e5\u8be2\u6761\u4ef6\u4e3a\u3010User.fullname==Wendy Williams\u3011 \u4f7f\u7528filter\u6307\u5b9a\u5217\u4e3a\u6761\u4ef6\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u3010\u7c7b\u540d.\u5c5e\u6027\u540d\u3011\u5f53\u505a\u6761\u4ef6 users = session.query(User).filter(User.fullname == \"Wendy Williams\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname = %(fullname_1)s -- [generated in 0.00043s] {'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')>","title":"1. filter\u6761\u4ef6\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#2-filter_by","text":"\u4f7f\u7528filter_by\u8fdb\u884c\u6761\u4ef6\u67e5\u8be2\uff0c\u53ef\u4ee5\u628a\u6a21\u578b\u7c7b\u5c5e\u6027\u5f53\u505afilter_by\u53c2\u6570\u8fdb\u884c\u6761\u4ef6\u67e5\u8be2\u3010fullname=\"Wendy Williams\"\u3011 \u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\u590d\u6742\u5ea6 users = session.query(User).filter_by(fullname=\"Wendy Williams\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname = %(fullname_1)s -- [generated in 0.00053s] {'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')>","title":"2. filter_by\u6761\u4ef6\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#3_2","text":"\u53ef\u4ee5\u4f7f\u7528\u94fe\u5f0f\u8c03\u7528\uff0c\u6dfb\u52a0\u591a\u4e2a filter / filter_by \u4e5f\u53ef\u4ee5\u5728 filter / filter_by \u6dfb\u52a0\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u591a\u6761\u4ef6\u67e5\u8be2 users = session.query(User).filter_by(fullname=\"Wendy Williams\", name=\"wendy\").all() # users = session.query(User).filter_by(fullname=\"Wendy Williams\").filter_by(name=\"wendy\").all() # users = session.query(User).filter(User.fullname==\"Wendy Williams\", User.name==\"wendy\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname = %(fullname_1)s AND users.name = %(name_1)s -- [generated in 0.00053s] {'fullname_1': 'Wendy Williams', 'name_1': 'wendy'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')>","title":"3.\u591a\u6761\u4ef6\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#5","text":"like \u6a21\u7cca\u67e5\u8be2\uff0c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u540e\u7aef\u533a\u5206\u5927\u5c0f\u5199\uff08\u6682\u65f6\u6ca1\u9047\u5230\u8fc7\uff09 ilike \u6a21\u7cca\u67e5\u8be2\uff0c\u5bf9\u4e8e\u4fdd\u8bc1\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u6bd4\u8f83\uff0c\u63a8\u8350\u4f7f\u7528\u8fd9\u4e2a users = session.query(User).filter(User.fullname.like('%F%')).all() # users = session.query(User).filter(User.fullname.ilike('%F%')).all() for user in users: print(user) ==> sql -- like>> SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.fullname LIKE %(fullname_1)s -- [generated in 0.00051s] {'fullname_1': '%F%'} -- ilike>> SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE lower(users.fullname) LIKE lower(%(fullname_1)s) -- [generated in 0.00061s] {'fullname_1': '%F%'} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> <User(name='fred', fullname='Fred Flintstone', password='freddy')>","title":"5\uff09\u6a21\u7cca\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#6in","text":"","title":"6\uff09IN\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#1-in","text":"\u67e5\u8be2\u591a\u4e2aid\u7684\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528IN\u67e5\u8be2 \u53ef\u4ee5\u4f7f\u7528\u3010\u7c7b\u540d.\u5c5e\u6027\u540d.in_()\u3011\u8fdb\u884cIN\u67e5\u8be2 IN\u67e5\u8be2\u53c2\u6570\u4e3a\u5217\u8868 \u8fd4\u56de\u503c\u4e3a\u5217\u8868 users = session.query(User).filter(User.id.in_([1,2,3])).all() for user in users: print(user) sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id IN (%(id_1_1)s, %(id_1_2)s, %(id_1_3)s) -- [generated in 0.00055s] {'id_1_1': 1, 'id_1_2': 2, 'id_1_3': 3} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> <User(name='wendy', fullname='Wendy Williams', password='windy')> <User(name='mary', fullname='Mary Contrary', password='mary')>","title":"1. IN\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#2-not-in","text":"\u53ea\u9700\u5728IN\u67e5\u8be2\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 ~ \u3010~\u7c7b\u540d.\u5c5e\u6027\u540d.in_()\u3011\u8fdb\u884cnot IN\u67e5\u8be2 users = session.query(User).filter(~User.id.in_([1,2,3])).all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id NOT IN (%(id_1_1)s, %(id_1_2)s, %(id_1_3)s) -- [generated in 0.00086s] {'id_1_1': 1, 'id_1_2': 2, 'id_1_3': 3} ==> \u6253\u5370\u7ed3\u679c <User(name='fred', fullname='Fred Flintstone', password='freddy')>","title":"2. not IN\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#7and","text":"\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 filter \u8fdb\u884c and \u591a\u6761\u4ef6\u67e5\u8be2 \u4e5f\u53ef\u4ee5\u4f7f\u7528 and_ \u8fdb\u884c\u591a\u6761\u4ef6\u67e5\u8be2 from sqlalchemy import and_ users = session.query(User).filter(and_(User.name == \"wendy\",User.fullname == \"Wendy Williams\")).all() # users = session.query(User).filter(User.name == \"wendy\",User.fullname == \"Wendy Williams\").all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.name = %(name_1)s AND users.fullname = %(fullname_1)s -- [generated in 0.00065s] {'name_1': 'wendy', 'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')>","title":"7\uff09and\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#8or","text":"\u518d\u8fdb\u884c\u8fc7\u6ee4\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7 or_ \u8fdb\u884c\u591a\u4e2a\u6761\u4ef6\u6ee1\u8db3\u5176\u4e00\u5373\u53ef\u67e5\u8be2\u51fa\u6765 from sqlalchemy import or_ users = session.query(User).filter(or_(User.name == \"wendy1\",User.fullname == \"Wendy Williams\")).all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.name = %(name_1)s OR users.fullname = %(fullname_1)s -- [generated in 0.00045s] {'name_1': 'wendy1', 'fullname_1': 'Wendy Williams'} ==> \u6253\u5370\u7ed3\u679c <User(name='wendy', fullname='Wendy Williams', password='windy')>","title":"8\uff09or\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#9","text":"\u53ef\u4ee5\u4f7f\u7528 get \u8fdb\u884c\u4e3b\u952e\u67e5\u8be2 \u76f4\u63a5\u4f7f\u7528 session.get \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6a21\u578b\u7c7b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aid\u503c \u4f7f\u7528\u94fe\u5f0f\u8c03\u7528 session.query(User).get(1) user = session.get(User, 1) # user = session.query(User).get(1) print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id = %(pk_1)s -- [generated in 0.00083s] {'pk_1': 1} ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')>","title":"9\uff09\u4e3b\u952e\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#10","text":"","title":"10\uff09\u8303\u56f4\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#1-between-and","text":"between \u8303\u56f4\u67e5\u8be2 \u67e5\u8be2\u786e\u5b9a\u8303\u56f4\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u53ef\u4ee5\u662f\u6570\u5b57\uff0c\u6587\u672c\u6216\u65e5\u671f \u8303\u56f4\u5305\u542b\u5f00\u59cb\u548c\u7ed3\u675f\u503c q = session.query(User).filter(User.id.between(2,4)).all() for user in q: print(user.id, user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id BETWEEN %(id_1)s AND %(id_2)s -- [generated in 0.00053s] {'id_1': 2, 'id_2': 4} ==> \u6253\u5370\u7ed3\u679c 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')>","title":"1. BETWEEN ... AND ..."},{"location":"ORM/001SQLAlchemy/#2-not-between-and","text":"\u53ea\u9700\u5728 between \u67e5\u8be2\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 ~ q = session.query(User).filter(~User.id.between(2,4)).all() for user in q: print(user.id,user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE users.id NOT BETWEEN %(id_1)s AND %(id_2)s -- [generated in 0.00042s] {'id_1': 2, 'id_2': 4} ==> \u6253\u5370\u7ed3\u679c 1 <User(name='desire', fullname='asdfasdf', password='123123')> 7 <User(name='mary', fullname='Mary Contrary', password='mary')> 8 <User(name='fred', fullname='Fred Flintstone', password='654321')>","title":"2. NOT BETWEEN ... AND ..."},{"location":"ORM/001SQLAlchemy/#11","text":"","title":"11\uff09\u5206\u7ec4\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#group_by","text":"q = session.query(User).group_by(User.name).all() for user in q: print(user.id,user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users GROUP BY users.name -- [generated in 0.00048s] {} ==> \u6253\u5370\u7ed3\u679c 1 <User(name='desire', fullname='asdfasdf', password='123123')> 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')>","title":"group_by \u5206\u7ec4\u67e5\u8be2"},{"location":"ORM/001SQLAlchemy/#having-func","text":"from sqlalchemy.sql import func q = session.query(User).group_by(User.name).having(func.min(User.id)>3).all() for user in q: print(user.id,user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users GROUP BY users.name HAVING min(users.id) > %(min_1)s -- [generated in 0.00083s] {'min_1': 3} ==> \u6253\u5370\u7ed3\u679c 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')>","title":"having \u805a\u5408\u64cd\u4f5c\uff08\u4f7f\u7528\u805a\u5408\u64cd\u4f5c \u9700\u8981\u5bfc\u5165 func \u5e93\uff09"},{"location":"ORM/001SQLAlchemy/#_8","text":"from sqlalchemy.sql import func q = session.query(User.name, func.count(User.name)) \\ .group_by(User.name).all() print(q) ==> sql SELECT users.name AS users_name, count(users.name) AS count_1 FROM users GROUP BY users.name -- [generated in 0.00184s] {} ==> \u6253\u5370\u7ed3\u679c [('desire', 1), ('wendy', 1), ('mary', 2), ('fred', 2)]","title":"\u7edf\u8ba1\u5206\u7ec4\u540e\u7684\u6570\u636e\u91cf"},{"location":"ORM/001SQLAlchemy/#4_1","text":"delete \u5220\u9664\u64cd\u4f5c \u5220\u9664\u64cd\u4f5c\u540e\uff0c\u8981\u8fdb\u884c\u63d0\u4ea4 commit \u8fd4\u56de\uff1a\u5220\u9664\u6210\u529f 1\uff0c\u5220\u9664\u5931\u8d25 0 result = session.query(User).filter_by(id=5).delete() print(result) session.commit() ==> sql DELETE FROM users WHERE users.id = %(id_1)s -- [generated in 0.00052s] {'id_1': 5} ==> \u6253\u5370\u7ed3\u679c 1","title":"4\u3001\u5220\u9664"},{"location":"ORM/001SQLAlchemy/#5sql","text":"\u53ef\u4ee5\u4f7f\u7528 text() \u8fdb\u884c\u6587\u672cSQL\u6267\u884c from sqlalchemy import text users = session.query(User).filter(text(\"id < 3\")).all() for user in users: print(user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users WHERE id < 3 ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> <User(name='wendy', fullname='Wendy Williams', password='windy')>","title":"5\u3001\u4f7f\u7528\u6587\u672cSQL"},{"location":"ORM/001SQLAlchemy/#6","text":"count \u7edf\u8ba1\u7ed3\u679c\u6570 num = session.query(User).count() print(num) ==> sql SELECT count(*) AS count_1 FROM (SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users) AS anon_1 ==> \u6253\u5370\u7ed3\u679c 4","title":"6\u3001\u7edf\u8ba1"},{"location":"ORM/001SQLAlchemy/#7","text":"distinct \u53bb\u91cd users = session.query(User).distinct().all() print(users) ==> sql SELECT DISTINCT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ==> \u6253\u5370\u7ed3\u679c [ <User(name='desire', fullname='asdfasdf', password='123123')>, <User(name='wendy', fullname='Wendy Williams', password='windy')>, <User(name='mary', fullname='Mary Contrary', password='mary')>, <User(name='fred', fullname='Fred Flintstone', password='freddy')> ]","title":"7\u3001\u53bb\u91cd"},{"location":"ORM/001SQLAlchemy/#8","text":"order_by \u6392\u5e8f","title":"8\u3001\u6392\u5e8f"},{"location":"ORM/001SQLAlchemy/#1_3","text":"users = session.query(User).order_by(User.id).all() for user in users: print(user.id, user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ORDER BY users.id ==> \u6253\u5370\u7ed3\u679c 1 <User(name='desire', fullname='asdfasdf', password='123123')> 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')>","title":"1. \u9ed8\u8ba4\u6392\u5e8f\uff0c\u5347\u5e8f"},{"location":"ORM/001SQLAlchemy/#2_3","text":"users = session.query(User).order_by(User.id.desc()) for user in users: print(user.id, user) ==> sql SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users ORDER BY users.id DESC ==> \u6253\u5370\u7ed3\u679c 4 <User(name='fred', fullname='Fred Flintstone', password='freddy')> 3 <User(name='mary', fullname='Mary Contrary', password='mary')> 2 <User(name='wendy', fullname='Wendy Williams', password='windy')> 1 <User(name='desire', fullname='asdfasdf', password='123123')>","title":"2. \u964d\u5e8f"},{"location":"ORM/001SQLAlchemy/#9_1","text":"","title":"9\u3001\u522b\u540d"},{"location":"ORM/001SQLAlchemy/#1_4","text":"\u4f7f\u7528 aliased \u5bf9\u5b9e\u4f53\u7c7b\u6307\u5b9a\u522b\u540d \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\uff1a\u5b9e\u4f53\u7c7b\u540d \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\uff1a\u522b\u540d \u6dfb\u52a0\u5217\u65f6\uff0c\u8981\u4f7f\u7528\u3010\u522b\u540d.\u5c5e\u6027\u3011 user_alias = aliased(User, name='user_alias') users = session.query(user_alias, user_alias.name).all() for instance in users: print(instance.user_alias, instance.name) ==> sql SELECT user_alias.id AS user_alias_id, user_alias.name AS user_alias_name, user_alias.fullname AS user_alias_fullname, user_alias.password AS user_alias_password FROM users AS user_alias ==> \u6253\u5370\u7ed3\u679c <User(name='desire', fullname='asdfasdf', password='123123')> desire <User(name='wendy', fullname='Wendy Williams', password='windy')> wendy <User(name='mary', fullname='Mary Contrary', password='mary')> mary <User(name='fred', fullname='Fred Flintstone', password='freddy')> fred","title":"1. \u4e3a\u5b9e\u4f53\u7c7b\u6307\u5b9a\u522b\u540d"},{"location":"ORM/001SQLAlchemy/#2_4","text":"label \u4e3a\u5217\u6307\u5b9a\u522b\u540d \u83b7\u53d6\u503c\u5f97\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u522b\u540d\u8fdb\u884c\u83b7\u53d6\uff0c\u5426\u5219\u4f1a\u62a5\u9519 users = session.query(User.name.label('name_label')).all() for user in users: print(user.name_label) ==> sql SELECT users.name AS name_label FROM users ==> \u6253\u5370\u7ed3\u679c desire wendy mary fred","title":"2. \u4e3a\u5217\u6307\u5b9a\u522b\u540d"},{"location":"ORM/002%E6%A0%B9%E6%8D%AE%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E7%B1%BB/","text":"\u6839\u636e\u73b0\u6709\u8868\u751f\u6210\u6570\u636e\u6a21\u578bsqlacodegen sqlacodegen \u8fd9\u4e2a\u5de5\u5177\u8bfb\u53d6\u73b0\u6709\u6570\u636e\u5e93\u7684\u7ed3\u6784\u5e76\u751f\u6210\u76f8\u5e94\u7684SQLAlchemy\u6a21\u578b\u4ee3\u7801 pip install sqlacodegen \u4f7f\u7528 \u76f4\u63a5\u547d\u4ee4\u884c\u4f7f\u7528 \u53c2\u6570\u8bf4\u660e\uff1a --outfile \uff1a\u6307\u5b9a\u751f\u6210\u7684\u6570\u636e\u6a21\u578b\u5b58\u653e\u7684\u6587\u4ef6\u8def\u5f84 url MySQL\uff1a mysql+pymysql://username:password@ip:port/db sqlite\uff1a sqlite:///database.db postgresql\uff1a postgresql:///some_local_db --table \uff1a\u53ea\u751f\u6210\u5355\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b --tables \uff1a\u540c\u65f6\u751f\u6210\u591a\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b\uff0c\u8868\u4e4b\u95f4\u7528 , \u9694\u5f00 \u540c\u65f6\u751f\u6210\u591a\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b sqlacodegen --outfile=models.py url --tables table1,table2 \u53ea\u9700\u8981\u751f\u6210\u4e00\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b sqlacodegen --outfile=models.py url --table table \u6ce8\u610f \u6bcf\u6b21\u6267\u884c\u5982\u679c\u4e0d\u66f4\u6539\u5b58\u653e\u6a21\u578b\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u5c31\u4f1a\u8986\u76d6\u539f\u6709\u7684\u6587\u4ef6\uff0c\u5efa\u8bae\u751f\u6210\u540e\u7684\u6570\u636e\u6a21\u578b\uff0c\u53ca\u65f6\u7684\u653e\u5165\u5230\u5bf9\u5e94\u7684\u6a21\u578b\u6a21\u5757\u4e2d\uff0c\u6216\u8005\u6bcf\u6b21\u6267\u884c\u751f\u6210\u7684\u65f6\u5019\u66f4\u6539\u5b58\u653e\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u79f0\uff08\u4e0d\u8981\u6709\u91cd\u540d\u7684\uff09","title":"\u6839\u636e\u73b0\u6709\u8868\u751f\u6210\u6570\u636e\u6a21\u578bsqlacodegen"},{"location":"ORM/002%E6%A0%B9%E6%8D%AE%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E7%B1%BB/#sqlacodegen","text":"","title":"\u6839\u636e\u73b0\u6709\u8868\u751f\u6210\u6570\u636e\u6a21\u578bsqlacodegen"},{"location":"ORM/002%E6%A0%B9%E6%8D%AE%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E7%B1%BB/#sqlacodegen_1","text":"\u8fd9\u4e2a\u5de5\u5177\u8bfb\u53d6\u73b0\u6709\u6570\u636e\u5e93\u7684\u7ed3\u6784\u5e76\u751f\u6210\u76f8\u5e94\u7684SQLAlchemy\u6a21\u578b\u4ee3\u7801 pip install sqlacodegen","title":"sqlacodegen"},{"location":"ORM/002%E6%A0%B9%E6%8D%AE%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E7%B1%BB/#_1","text":"\u76f4\u63a5\u547d\u4ee4\u884c\u4f7f\u7528 \u53c2\u6570\u8bf4\u660e\uff1a --outfile \uff1a\u6307\u5b9a\u751f\u6210\u7684\u6570\u636e\u6a21\u578b\u5b58\u653e\u7684\u6587\u4ef6\u8def\u5f84 url MySQL\uff1a mysql+pymysql://username:password@ip:port/db sqlite\uff1a sqlite:///database.db postgresql\uff1a postgresql:///some_local_db --table \uff1a\u53ea\u751f\u6210\u5355\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b --tables \uff1a\u540c\u65f6\u751f\u6210\u591a\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b\uff0c\u8868\u4e4b\u95f4\u7528 , \u9694\u5f00 \u540c\u65f6\u751f\u6210\u591a\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b sqlacodegen --outfile=models.py url --tables table1,table2 \u53ea\u9700\u8981\u751f\u6210\u4e00\u5f20\u8868\u7684\u6570\u636e\u6a21\u578b sqlacodegen --outfile=models.py url --table table","title":"\u4f7f\u7528"},{"location":"ORM/002%E6%A0%B9%E6%8D%AE%E7%8E%B0%E6%9C%89%E8%A1%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E7%B1%BB/#_2","text":"\u6bcf\u6b21\u6267\u884c\u5982\u679c\u4e0d\u66f4\u6539\u5b58\u653e\u6a21\u578b\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u5c31\u4f1a\u8986\u76d6\u539f\u6709\u7684\u6587\u4ef6\uff0c\u5efa\u8bae\u751f\u6210\u540e\u7684\u6570\u636e\u6a21\u578b\uff0c\u53ca\u65f6\u7684\u653e\u5165\u5230\u5bf9\u5e94\u7684\u6a21\u578b\u6a21\u5757\u4e2d\uff0c\u6216\u8005\u6bcf\u6b21\u6267\u884c\u751f\u6210\u7684\u65f6\u5019\u66f4\u6539\u5b58\u653e\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u79f0\uff08\u4e0d\u8981\u6709\u91cd\u540d\u7684\uff09","title":"\u6ce8\u610f"},{"location":"Other/001%20CentOS%208%20%E5%AE%89%E8%A3%85%E6%97%A0%E5%A4%B4%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/","text":"CentOS 8 \u5b89\u88c5\u65e0\u5934\u8c37\u6b4c\u6d4f\u89c8\u5668 \u7b2c\u4e00\u6b65\uff1a\u4e0b\u8f7d\u5b89\u88c5\u5305 wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u5b89\u88c5 yum install -y google-chrome-stable_current_x86_64.rpm \u7b2c\u4e09\u6b65\uff1a\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f google-chrome -version","title":"CentOS 8 \u5b89\u88c5\u65e0\u5934\u8c37\u6b4c\u6d4f\u89c8\u5668"},{"location":"Other/001%20CentOS%208%20%E5%AE%89%E8%A3%85%E6%97%A0%E5%A4%B4%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/#centos-8","text":"","title":"CentOS 8 \u5b89\u88c5\u65e0\u5934\u8c37\u6b4c\u6d4f\u89c8\u5668"},{"location":"Other/001%20CentOS%208%20%E5%AE%89%E8%A3%85%E6%97%A0%E5%A4%B4%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/#_1","text":"wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm","title":"\u7b2c\u4e00\u6b65\uff1a\u4e0b\u8f7d\u5b89\u88c5\u5305"},{"location":"Other/001%20CentOS%208%20%E5%AE%89%E8%A3%85%E6%97%A0%E5%A4%B4%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/#_2","text":"yum install -y google-chrome-stable_current_x86_64.rpm","title":"\u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u5b89\u88c5"},{"location":"Other/001%20CentOS%208%20%E5%AE%89%E8%A3%85%E6%97%A0%E5%A4%B4%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/#_3","text":"google-chrome -version","title":"\u7b2c\u4e09\u6b65\uff1a\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/","text":"helium(selenium-python-helium)\u7b14\u8bb0 \u4e00\u3001\u524d\u8a00 1. \u8d44\u6599 Github\uff1ahttps://github.com/mherrmann/selenium-python-helium Docs\uff1ahttps://selenium-python-helium.readthedocs.io/en/latest/ 2. \u4f18\u70b9 \u7b80\u5316\u4e86Selenium\u64cd\u4f5c\uff0c\u5bf9Selenium\u8fdb\u884c\u5c01\u88c5\uff0c\u63d0\u4f9b\u4e86\u7b80\u5355\u7684API \u53ef\u4ee5\u548cSelenium\u8fdb\u884c\u6df7\u7528 \u53bb\u9664\u4e86\u9a71\u52a8\u7684\u4e0b\u8f7d\u5b89\u88c5\uff0c\u81ea\u52a8\u914d\u7f6e\u9a71\u52a8 \u652f\u6301Chrome\u548cFirefox \u4e8c\u3001\u5b89\u88c5helium pip install helium \u4e09\u3001\u6d4f\u89c8\u5668\u5e38\u7528\u64cd\u4f5c 1. \u5bfc\u5305 import helium 2. \u542f\u52a8\u6d4f\u89c8\u5668 helium.start_chrome(url=None, headless=None, options=None) helium.start_firefox(url=None, headless=None, options=None) \u53c2\u6570 url: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6253\u5f00\u7f51\u5740 headless: \u9ed8\u8ba4\u4e3aFalse\uff0c\u662f\u5426\u4f7f\u7528\u65e0\u5934\u6a21\u5f0f\u6253\u5f00\u6d4f\u89c8\u5668 options: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u542f\u52a8\u6d4f\u89c8\u5668\u7684\u9ad8\u7ea7\u914d\u7f6e # 1\u3001\u53ea\u6253\u5f00\u6d4f\u89c8\u5668 helium.start_chrome() # 2\u3001\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6253\u5f00\u7f51\u5740 helium.start_chrome(\"https://www.baidu.com/\") # 3\u3001\u65e0\u5934\u6a21\u5f0f\u64cd\u4f5c(\u90e8\u7f72\u5230\u670d\u52a1\u5668\u4e0a\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e) helium.start_chrome(\"https://www.baidu.com/\",headless=True) # 4\u3001\u9ad8\u7ea7\u914d\u7f6e from selenium import webdriver options = webdriver.ChromeOptions() # \u914d\u7f6e\u89e6\u5c4f\u65b9\u5f0f options.add_experimental_option('mobileEmulation', {'deviceName': 'iPhone X'}) # \u90e8\u7f72\u5230\u6d4f\u89c8\u5668\u7684\u65f6\u5019\u9700\u8981\u6dfb\u52a0\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5426\u5219\u4f1a\u62a5\u9519 options.add_argument('--no-sandbox') # \u5f7b\u5e95\u505c\u7528\u6c99\u7bb1 options.add_argument('--disable-gpu') options.add_argument('--disable-dev-shm-usage') # \u65e0\u5934\u6a21\u5f0f\u8fd0\u884c\uff0c\u8ddf headless=True \u4e00\u6837 options.add_argument('--headless') # \u4ee5\u6700\u5927\u5316\u6253\u5f00\u6d4f\u89c8\u5668\u7a97\u53e3 options.add_argument('--start-maximized') helium.start_chrome(\"https://www.baidu.com/\",options=options) 3. \u6253\u5f00\u7f51\u5740 helium.go_to(url) \u53c2\u6570 url: \u8981\u6253\u5f00\u7684\u7f51\u5740 helium.go_to(\"https://www.baidu.com/\") 4. driver\u64cd\u4f5c helium.set_driver(driver) \u8bbe\u7f6edriver\u5bf9\u8c61 helium.get_driver() \u83b7\u53d6driver\u5bf9\u8c61 helium.start_chrome() driver= helium.get_driver() print(driver) # <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d684039be5714229ef2921f14dec310\")> 5. \u8f93\u5165 helium.write(text, into=None) \u53c2\u6570 text: \u5199\u5165\u7684\u5185\u5bb9 into: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8f93\u5165\u7684\u7c7b\u578b\u4e3a\uff1a HTMLElement / selenium.webdriver.remote.webelement.WebElement / Alert # \u4f7f\u7528into\u9ed8\u8ba4\u503c\uff0c helium.write(\"Python\") # \u4f7f\u7528WebElement\u7c7b\u578binto\u53c2\u6570 driver = helium.get_driver() busin_name = driver.find_element_by_xpath(\"\u5143\u7d20\u5b9a\u4f4d\") helium.write(\"Python\", into=busin_name) # \u4f7f\u7528Alert\u7c7b\u578binto\u53c2\u6570 helium.write(\"Michael\", into=Alert(\"Please enter your name\")) 6. \u4f7f\u7528\u952e\u76d8\u6309\u952e helium.press(key) \u53c2\u6570 key: \u8981\u6309\u4e0b\u7684\u6309\u952e\u6216\u6309\u952e\u7ec4\u5408 helium.start_chrome(\"https://www.baidu.com/\") helium.press(\"Python\") # \u6309\u4e0b Python \u6309\u952e helium.press('a') # \u6309\u4e0b a \u6309\u952e helium.press('A') # \u6309\u4e0b A \u6309\u952e helium.press(helium.ENTER) # \u6309\u4e0b \u56de\u8f66 \u6309\u952e helium.press(helium.CONTROL + 'a') # \u6309\u4e0b Ctrl+a \u5168\u9009 \u6309\u952e 7. \u70b9\u51fb helium.click(element) \u53c2\u6570 element: \u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point helium.start_chrome(\"https://www.baidu.com/\") helium.press(\"Python\") helium.click(\"\u767e\u5ea6\u4e00\u4e0b\") # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u4e00(str) # helium.click(helium.Button(\"\u767e\u5ea6\u4e00\u4e0b\")) # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u4e8c(HTMLElement) # helium.click(driver.find_element_by_xpath(\"xpath\u5143\u7d20\u5b9a\u4f4d\")) # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u4e09(WebElement) # helium.click(helium.Point(200,300)) # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u56db(Point) helium.click(\"Welcome to Python.org\") # \u70b9\u51fb\u94fe\u63a5 8. \u53cc\u51fb helium.doubleclick(element) \u53c2\u6570 element: \u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point helium.doubleclick(\"Double click here\") helium.doubleclick(helium.Image(\"Directories\")) helium.doubleclick(helium.Point(200, 300)) helium.doubleclick(helium.TextField(\"Username\").top_left - (0, 20)) 9. \u62d6\u52a8 helium.drag(element, to) \u53c2\u6570 element\uff1a\u8981\u62d6\u52a8\u7684\u5143\u7d20\uff0c\u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point to: \u8981\u62d6\u52a8\u5230\u7684\u5143\u7d20\uff0c\u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point helium.drag(\"Drag me!\", to=\"Drop here.\") 10. Alert\u5f39\u7a97\u5904\u7406 helium.Alert(search_text=None) \u53c2\u6570 text: Alert\u5f39\u7a97\u5185\u5bb9 \u65b9\u6cd5 accept(): \u786e\u5b9a dismiss(): \u53d6\u6d88 alert = helium.Alert() alert.accept() # \u786e\u5b9a alert.dismiss() # \u53d6\u6d88 11. \u7a97\u53e3\u5207\u6362 helium.switch_to(window) 12. \u6eda\u52a8 helium.scroll_down(num_pixels=100) \u5411\u4e0b\u6eda\u52a8 helium.scroll_up(num_pixels=100) \u5411\u4e0a\u6eda\u52a8 helium.scroll_right(num_pixels=100) \u5411\u53f3\u6eda\u52a8 helium.scroll_left(num_pixels=100) \u5411\u5de6\u6eda\u52a8 13. \u60ac\u505c helium.hover(element) 14. \u5237\u65b0 helium.refresh() 15. \u7b49\u5f85\u5143\u7d20\u51fa\u73fe helium.wait_until(condition_fn, timeout_secs=10, interval_secs=0.5) \u53c2\u6570 condition_fn: \u5143\u7d20\u8868\u8fbe\u5f0f\uff0c\u5143\u7d20\u662f\u5426\u5b58\u5728 timeout_secs\uff1a\u8d85\u65f6\u65f6\u95f4 interval_secs\uff1a\u8f6e\u8bad\u65f6\u95f4 helium.start_chrome(\"https://www.baidu.com/\") helium.write(\"Python\") try: # \u901a\u8fc7\u663e\u793a\u7b49\u5f85\uff0c\u67e5\u8be2\u5143\u7d20\u662f\u5426\u5b58\u5728 helium.wait_until(helium.S('//input[@id=\"s22\"]').exists) # \u5982\u679c\u5b58\u5728\u5c31\u8fdb\u884c\u70b9\u51fb helium.click(helium.S('//input[@id=\"s22\"]')) except: # \u5f53\u67e5\u8be2\u5143\u7d20\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38 print('\u5143\u7d20\u672a\u627e\u5230') 16. \u5173\u95ed\u6d4f\u89c8\u5668 helium.kill_browser() 17. S\u8868\u8fbe\u5f0f helium.S(selector, below=None, to_right_of=None, above=None, to_left_of=None) \u53c2\u6570 selector: jQuery\u6837\u5f0f\u9009\u62e9\u5668\uff08ID\u3001NAME\u3001CSS\u3001XPATH\uff09 helium.start_chrome(\"https://www.baidu.com/\") helium.write(\"Python\") helium.click(helium.S('//input[@id=\"su\"]')) 18. \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u6807\u7b7e helium.find_all(predicate) helium.start_chrome(\"https://www.baidu.com/\") eles = helium.find_all(helium.S('//input[@id=\"su\"]')) print(eles) # [<input type=\"submit\" id=\"su\" value=\"\u767e\u5ea6\u4e00\u4e0b\" class=\"bg s_btn\">]","title":"helium(selenium-python-helium)\u7b14\u8bb0"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#heliumselenium-python-helium","text":"","title":"helium(selenium-python-helium)\u7b14\u8bb0"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#_1","text":"","title":"\u4e00\u3001\u524d\u8a00"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#1","text":"Github\uff1ahttps://github.com/mherrmann/selenium-python-helium Docs\uff1ahttps://selenium-python-helium.readthedocs.io/en/latest/","title":"1. \u8d44\u6599"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#2","text":"\u7b80\u5316\u4e86Selenium\u64cd\u4f5c\uff0c\u5bf9Selenium\u8fdb\u884c\u5c01\u88c5\uff0c\u63d0\u4f9b\u4e86\u7b80\u5355\u7684API \u53ef\u4ee5\u548cSelenium\u8fdb\u884c\u6df7\u7528 \u53bb\u9664\u4e86\u9a71\u52a8\u7684\u4e0b\u8f7d\u5b89\u88c5\uff0c\u81ea\u52a8\u914d\u7f6e\u9a71\u52a8 \u652f\u6301Chrome\u548cFirefox","title":"2. \u4f18\u70b9"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#helium","text":"pip install helium","title":"\u4e8c\u3001\u5b89\u88c5helium"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#_2","text":"","title":"\u4e09\u3001\u6d4f\u89c8\u5668\u5e38\u7528\u64cd\u4f5c"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#1_1","text":"import helium","title":"1. \u5bfc\u5305"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#2_1","text":"helium.start_chrome(url=None, headless=None, options=None) helium.start_firefox(url=None, headless=None, options=None) \u53c2\u6570 url: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6253\u5f00\u7f51\u5740 headless: \u9ed8\u8ba4\u4e3aFalse\uff0c\u662f\u5426\u4f7f\u7528\u65e0\u5934\u6a21\u5f0f\u6253\u5f00\u6d4f\u89c8\u5668 options: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u542f\u52a8\u6d4f\u89c8\u5668\u7684\u9ad8\u7ea7\u914d\u7f6e # 1\u3001\u53ea\u6253\u5f00\u6d4f\u89c8\u5668 helium.start_chrome() # 2\u3001\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6253\u5f00\u7f51\u5740 helium.start_chrome(\"https://www.baidu.com/\") # 3\u3001\u65e0\u5934\u6a21\u5f0f\u64cd\u4f5c(\u90e8\u7f72\u5230\u670d\u52a1\u5668\u4e0a\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e) helium.start_chrome(\"https://www.baidu.com/\",headless=True) # 4\u3001\u9ad8\u7ea7\u914d\u7f6e from selenium import webdriver options = webdriver.ChromeOptions() # \u914d\u7f6e\u89e6\u5c4f\u65b9\u5f0f options.add_experimental_option('mobileEmulation', {'deviceName': 'iPhone X'}) # \u90e8\u7f72\u5230\u6d4f\u89c8\u5668\u7684\u65f6\u5019\u9700\u8981\u6dfb\u52a0\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5426\u5219\u4f1a\u62a5\u9519 options.add_argument('--no-sandbox') # \u5f7b\u5e95\u505c\u7528\u6c99\u7bb1 options.add_argument('--disable-gpu') options.add_argument('--disable-dev-shm-usage') # \u65e0\u5934\u6a21\u5f0f\u8fd0\u884c\uff0c\u8ddf headless=True \u4e00\u6837 options.add_argument('--headless') # \u4ee5\u6700\u5927\u5316\u6253\u5f00\u6d4f\u89c8\u5668\u7a97\u53e3 options.add_argument('--start-maximized') helium.start_chrome(\"https://www.baidu.com/\",options=options)","title":"2. \u542f\u52a8\u6d4f\u89c8\u5668"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#3","text":"helium.go_to(url) \u53c2\u6570 url: \u8981\u6253\u5f00\u7684\u7f51\u5740 helium.go_to(\"https://www.baidu.com/\")","title":"3. \u6253\u5f00\u7f51\u5740"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#4-driver","text":"helium.set_driver(driver) \u8bbe\u7f6edriver\u5bf9\u8c61 helium.get_driver() \u83b7\u53d6driver\u5bf9\u8c61 helium.start_chrome() driver= helium.get_driver() print(driver) # <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d684039be5714229ef2921f14dec310\")>","title":"4. driver\u64cd\u4f5c"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#5","text":"helium.write(text, into=None) \u53c2\u6570 text: \u5199\u5165\u7684\u5185\u5bb9 into: \u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u8f93\u5165\u7684\u7c7b\u578b\u4e3a\uff1a HTMLElement / selenium.webdriver.remote.webelement.WebElement / Alert # \u4f7f\u7528into\u9ed8\u8ba4\u503c\uff0c helium.write(\"Python\") # \u4f7f\u7528WebElement\u7c7b\u578binto\u53c2\u6570 driver = helium.get_driver() busin_name = driver.find_element_by_xpath(\"\u5143\u7d20\u5b9a\u4f4d\") helium.write(\"Python\", into=busin_name) # \u4f7f\u7528Alert\u7c7b\u578binto\u53c2\u6570 helium.write(\"Michael\", into=Alert(\"Please enter your name\"))","title":"5. \u8f93\u5165"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#6","text":"helium.press(key) \u53c2\u6570 key: \u8981\u6309\u4e0b\u7684\u6309\u952e\u6216\u6309\u952e\u7ec4\u5408 helium.start_chrome(\"https://www.baidu.com/\") helium.press(\"Python\") # \u6309\u4e0b Python \u6309\u952e helium.press('a') # \u6309\u4e0b a \u6309\u952e helium.press('A') # \u6309\u4e0b A \u6309\u952e helium.press(helium.ENTER) # \u6309\u4e0b \u56de\u8f66 \u6309\u952e helium.press(helium.CONTROL + 'a') # \u6309\u4e0b Ctrl+a \u5168\u9009 \u6309\u952e","title":"6. \u4f7f\u7528\u952e\u76d8\u6309\u952e"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#7","text":"helium.click(element) \u53c2\u6570 element: \u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point helium.start_chrome(\"https://www.baidu.com/\") helium.press(\"Python\") helium.click(\"\u767e\u5ea6\u4e00\u4e0b\") # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u4e00(str) # helium.click(helium.Button(\"\u767e\u5ea6\u4e00\u4e0b\")) # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u4e8c(HTMLElement) # helium.click(driver.find_element_by_xpath(\"xpath\u5143\u7d20\u5b9a\u4f4d\")) # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u4e09(WebElement) # helium.click(helium.Point(200,300)) # \u70b9\u51fb\u6309\u94ae \u65b9\u5f0f\u56db(Point) helium.click(\"Welcome to Python.org\") # \u70b9\u51fb\u94fe\u63a5","title":"7. \u70b9\u51fb"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#8","text":"helium.doubleclick(element) \u53c2\u6570 element: \u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point helium.doubleclick(\"Double click here\") helium.doubleclick(helium.Image(\"Directories\")) helium.doubleclick(helium.Point(200, 300)) helium.doubleclick(helium.TextField(\"Username\").top_left - (0, 20))","title":"8. \u53cc\u51fb"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#9","text":"helium.drag(element, to) \u53c2\u6570 element\uff1a\u8981\u62d6\u52a8\u7684\u5143\u7d20\uff0c\u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point to: \u8981\u62d6\u52a8\u5230\u7684\u5143\u7d20\uff0c\u7c7b\u578b\u53ef\u4e3a\uff1a str / HTMLElement / selenium.webdriver.remote.webelement.WebElement / Point helium.drag(\"Drag me!\", to=\"Drop here.\")","title":"9. \u62d6\u52a8"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#10-alert","text":"helium.Alert(search_text=None) \u53c2\u6570 text: Alert\u5f39\u7a97\u5185\u5bb9 \u65b9\u6cd5 accept(): \u786e\u5b9a dismiss(): \u53d6\u6d88 alert = helium.Alert() alert.accept() # \u786e\u5b9a alert.dismiss() # \u53d6\u6d88","title":"10. Alert\u5f39\u7a97\u5904\u7406"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#11","text":"helium.switch_to(window)","title":"11. \u7a97\u53e3\u5207\u6362"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#12","text":"helium.scroll_down(num_pixels=100) \u5411\u4e0b\u6eda\u52a8 helium.scroll_up(num_pixels=100) \u5411\u4e0a\u6eda\u52a8 helium.scroll_right(num_pixels=100) \u5411\u53f3\u6eda\u52a8 helium.scroll_left(num_pixels=100) \u5411\u5de6\u6eda\u52a8","title":"12. \u6eda\u52a8"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#13","text":"helium.hover(element)","title":"13. \u60ac\u505c"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#14","text":"helium.refresh()","title":"14. \u5237\u65b0"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#15","text":"helium.wait_until(condition_fn, timeout_secs=10, interval_secs=0.5) \u53c2\u6570 condition_fn: \u5143\u7d20\u8868\u8fbe\u5f0f\uff0c\u5143\u7d20\u662f\u5426\u5b58\u5728 timeout_secs\uff1a\u8d85\u65f6\u65f6\u95f4 interval_secs\uff1a\u8f6e\u8bad\u65f6\u95f4 helium.start_chrome(\"https://www.baidu.com/\") helium.write(\"Python\") try: # \u901a\u8fc7\u663e\u793a\u7b49\u5f85\uff0c\u67e5\u8be2\u5143\u7d20\u662f\u5426\u5b58\u5728 helium.wait_until(helium.S('//input[@id=\"s22\"]').exists) # \u5982\u679c\u5b58\u5728\u5c31\u8fdb\u884c\u70b9\u51fb helium.click(helium.S('//input[@id=\"s22\"]')) except: # \u5f53\u67e5\u8be2\u5143\u7d20\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38 print('\u5143\u7d20\u672a\u627e\u5230')","title":"15. \u7b49\u5f85\u5143\u7d20\u51fa\u73fe"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#16","text":"helium.kill_browser()","title":"16. \u5173\u95ed\u6d4f\u89c8\u5668"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#17-s","text":"helium.S(selector, below=None, to_right_of=None, above=None, to_left_of=None) \u53c2\u6570 selector: jQuery\u6837\u5f0f\u9009\u62e9\u5668\uff08ID\u3001NAME\u3001CSS\u3001XPATH\uff09 helium.start_chrome(\"https://www.baidu.com/\") helium.write(\"Python\") helium.click(helium.S('//input[@id=\"su\"]'))","title":"17. S\u8868\u8fbe\u5f0f"},{"location":"Other/002%20helium%E7%AC%94%E8%AE%B0/#18","text":"helium.find_all(predicate) helium.start_chrome(\"https://www.baidu.com/\") eles = helium.find_all(helium.S('//input[@id=\"su\"]')) print(eles) # [<input type=\"submit\" id=\"su\" value=\"\u767e\u5ea6\u4e00\u4e0b\" class=\"bg s_btn\">]","title":"18. \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u6807\u7b7e"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","text":"APScheduler \u5b9a\u65f6\u4efb\u52a1 \u4e00\u3001APScheduler APScheduler \u5168\u79f0 Advanced Python Scheduler \u4f5c\u7528\u4e3a\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u89c4\u5219\u6267\u884c\u6307\u5b9a\u7684\u4f5c\u4e1a\u3002 \u6307\u5b9a\u65f6\u95f4\u89c4\u5219\u7684\u65b9\u5f0f\u53ef\u4ee5\u662f\u95f4\u9694\u591a\u4e45\u6267\u884c\uff0c\u53ef\u4ee5\u662f\u6307\u5b9a\u65e5\u671f\u65f6\u95f4\u7684\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u7c7b\u4f3cLinux\u7cfb\u7edf\u4e2dCrontab\u4e2d\u7684\u65b9\u5f0f\u6267\u884c\u4efb\u52a1\u3002 \u6307\u5b9a\u7684\u4efb\u52a1\u5c31\u662f\u4e00\u4e2aPython\u51fd\u6570\u3002 \u4e8c\u3001\u5b89\u88c5 pip install apscheduler \u4e09\u3001\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1 \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1 func \u4e00\u4e2a\u4efb\u52a1\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u6216\u8005\u5f02\u6b65\u51fd\u6570 \u521b\u5efa\u8c03\u5ea6\u5668 BlockingScheduler BlockingScheduler \u662f\u6700\u57fa\u672c\u7684\u8c03\u5ea6\u5668\uff0c\u963b\u585e\u578b\u7684\u8c03\u5ea6\u5668 \u628a\u4efb\u52a1\u6dfb\u52a0\u5230\u8c03\u5ea6\u5668\u4e2d add_job \u53c2\u6570\u4e00\uff1a\u4efb\u52a1\u540d \u53c2\u6570\u4e8c\uff1a\u89e6\u53d1\u5668\uff0c\u4f7f\u7528\u7684\u662f interval \u95f4\u9694\u89e6\u53d1\u5668 seconds \uff1a\u95f4\u9694\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\uff0c\u6ca1\u4e2a\u51e0\u79d2\u6267\u884c\u4e00\u6b21 args \uff1a\u6240\u6dfb\u52a0\u7684\u4efb\u52a1\u7684\u4f20\u5165\u53c2\u6570 \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1 start from datetime import datetime from apscheduler.schedulers.blocking import BlockingScheduler def func(name): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, {name}\") scheduler = BlockingScheduler() scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"]) scheduler.start() \u6267\u884c\u7ed3\u679c\uff1a 2021-05-25 15:04:36 Hello world, desire 2021-05-25 15:04:39 Hello world, desire 2021-05-25 15:04:42 Hello world, desire 2021-05-25 15:04:45 Hello world, desire \u56db\u3001\u8c03\u5ea6\u5668\uff08schedulers\uff09 BlockingScheduler \u963b\u585e\u578b\u8c03\u5ea6\u5668\uff0c\u6700\u57fa\u672c\u7684\u8c03\u5ea6\u5668\uff0c\u8c03\u7528 start \u51fd\u6570\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u4e0d\u80fd\u7acb\u5373\u8fd4\u56de \u9002\u7528\u4e8e\u8c03\u5ea6\u7a0b\u5e8f\u65f6\u8fdb\u7a0b\u4e2d\u552f\u4e00\u8fd0\u884c\u7684\u8fdb\u7a0b from apscheduler.schedulers.blocking import BlockingScheduler BackgroundScheduler \u540e\u53f0\u8fd0\u884c\u8c03\u5ea6\u5668\uff0c\u8c03\u7528 start \u540e\u4e3b\u7ebf\u7a0b\u4e0d\u4f1a\u963b\u585e \u9002\u7528\u4e8e\u8c03\u5ea6\u7a0b\u5e8f\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u540e\u53f0\u8fd0\u884c from apscheduler.schedulers.background import BackgroundScheduler AsyncIOScheduler \u9002\u7528\u4e8e\u4f7f\u7528\u4e86 asyncio \u6a21\u5757\u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.asyncio import AsyncIOScheduler GeventScheduler \u9002\u7528\u4e8e\u4f7f\u7528 gevent \u6a21\u5757\u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.gevent import GeventScheduler TwistedScheduler \u9002\u7528\u4e8e\u6784\u5efa Twisted \u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.twisted import TwistedScheduler QtScheduler \uff1a \u9002\u7528\u4e8e\u6784\u5efa Qt \u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.qt import QtScheduler TornadoScheduler \u9002\u7528\u4e8e\u6784\u5efa Tornado \u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.tornado import TornadoScheduler \u4e94\u3001\u89e6\u53d1\u5668\uff08triggers\uff09 1\u3001date\u89e6\u53d1\u5668 \u5728\u67d0\u4e2a\u65e5\u671f\u65f6\u95f4\u53ea\u89e6\u53d1\u4e00\u6b21\u4e8b\u4ef6 run_date \uff1a\u53c2\u6570\u4e3a\u6307\u5b9a\u89e6\u53d1\u4e8b\u4ef6\u7684\u65e5\u671f from datetime import datetime from apscheduler.schedulers.blocking import BlockingScheduler def func(name): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, {name}\") scheduler = BlockingScheduler() # \u6307\u5b9a\u57282021/05/25 15:43 \u8fdb\u884c\u6267\u884c\u4efb\u52a1 scheduler.add_job(func, 'date', run_date=datetime(2021, 5, 25, 15, 43), args=[\"desire\"]) scheduler.start() \u8fd0\u884c\u7ed3\u679c\uff1a 2021-05-25 15:43:00 Hello world, desire 2\u3001interval\u89e6\u53d1\u5668 \u5728\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u89e6\u53d1\u4e8b\u4ef6 interval \u89e6\u53d1\u5668\u53ef\u4ee5\u8bbe\u7f6e\u7684\u89e6\u53d1\u53c2\u6570\uff1a weeks \uff1a\u5468\uff0cint days \uff1a\u4e00\u4e2a\u6708\u4e2d\u7684\u5929\uff0cint hours \uff1a\u5c0f\u65f6\uff0cint minutes \uff1a\u5206\u949f\uff0cint seconds \uff1a\u79d2\uff0cint start_date \uff1a\u95f4\u9694\u89e6\u53d1\u7684\u8d77\u59cb\u65f6\u95f4 end_date \uff1a\u95f4\u9694\u89e6\u53d1\u7684\u7ed3\u675f\u65f6\u95f4 jitter \uff1a\u89e6\u53d1\u7684\u65f6\u95f4\u8bef\u5dee # \u4e09\u79d2\u6267\u884c\u4e00\u6b21 scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"]) 3\u3001cron\u89e6\u53d1\u5668 \u5728\u67d0\u4e2a\u786e\u5207\u7684\u65f6\u95f4\u5468\u671f\u6027\u7684\u89e6\u53d1\u65f6\u95f4 \u53c2\u6570\uff1a year \uff1a4\u4f4d\u6570\u7684\u5e74\u4efd month \uff1a1-12\u6708\u4efd day \uff1a1-31\u65e5 week \uff1a1-53\u5468 day_of_week \uff1a\u4e00\u4e2a\u793c\u62dc\u4e2d\u7684\u7b2c\u51e0\u5929 0-6 mon\u3001tue\u3001wed\u3001thu\u3001fri\u3001sat\u3001sun hour \uff1a0-23\u5c0f\u65f6 minute \uff1a0-59\u5206\u949f second \uff1a0-59\u79d2 start_date \uff1adatetime\u7c7b\u578b\u6216\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u8d77\u59cb\u65f6\u95f4 end_date \uff1adatetime\u7c7b\u578b\u6216\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u7ed3\u675f\u65f6\u95f4 timezone \uff1a\u65f6\u533a jitter \uff1a\u4efb\u52a1\u89e6\u53d1\u7684\u8bef\u5dee\u65f6\u95f4 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f\u7c7b\u578b * \u4efb\u4f55 \u5728\u6bcf\u4e2a\u503c\u90fd\u89e6\u53d1 */a \u4efb\u4f55 \u6bcf\u9694 a \u89e6\u53d1\u4e00\u6b21 a-b \u4efb\u4f55 \u5728 a-b \u533a\u95f4\u5185\u4efb\u4f55\u4e00\u4e2a\u65f6\u95f4\u89e6\u53d1(a<b) a-b/c \u4efb\u4f55 \u5728 a-b \u533a\u95f4\u5185\u6bcf\u9694 c \u89e6\u53d1\u4e00\u6b21 xth y day \u7b2c x \u4e2a\u661f\u671f y \u89e6\u53d1 last y day \u6700\u540e\u4e00\u4e2a\u661f\u671f x \u89e6\u53d1 last day \u4e00\u4e2a\u6708\u4e2d\u7684\u6700\u540e\u4e00\u5929\u89e6\u53d1 x,y,z \u4efb\u4f55 \u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u8fdb\u884c\u7ec4\u5408 # \u5728\u6bcf\u4e2a50\u79d2\u7684\u65f6\u5019\u89e6\u53d1 scheduler.add_job(func, 'cron', second=50, args=[\"desire\"]) # \u5728\u7b2c4\u4e2a\u661f\u671f\u65e5\u89e6\u53d1 scheduler.add_job(func, 'cron', day=\"4th sun\", args=[\"desire\"]) \u516d\u3001\u4efb\u52a1\u5b58\u50a8\u5668\uff08job stores\uff09 MemoryJobStore \u6ca1\u6709\u5e8f\u5217\u5316\uff0c\u4efb\u52a1\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u589e\u5220\u6539\u67e5\u90fd\u5728\u5185\u5b58\u4e2d\u5b8c\u6210 from apscheduler.jobstores.memory import MemoryJobStore SQLAlchemyJobStore \u4f7f\u7528 SQLAlchemy \u8fd9\u4e2aORM\u6846\u67b6\u4f5c\u4e3a\u5b58\u50a8\u65b9\u5f0f from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore MongoDBJobStore \u4f7f\u7528 mongodb \u4f5c\u4e3a\u5b58\u50a8\u5668 from apscheduler.jobstores.mongodb import MongoDBJobStore RedisJobStore \u4f7f\u7528 redis \u4f5c\u4e3a\u5b58\u50a8\u5668 from apscheduler.jobstores.redis import RedisJobStore \u4e03\u3001\u6267\u884c\u5668\uff08executors\uff09 ThreadPoolExecutor \u9ed8\u8ba4\u6267\u884c\u5668 \u7ebf\u7a0b\u6c60\u6267\u884c\u5668 from apscheduler.executors.pool import ThreadPoolExecutor ProcessPoolExecutor \u8fdb\u7a0b\u6c60\u6267\u884c\u5668 \u9002\u7528\u4e8e\u6d89\u53ca\u5230\u4e00\u4e9bCPU\u5bc6\u96c6\u8ba1\u7b97\u7684\u64cd\u4f5c from apscheduler.executors.pool import ProcessPoolExecutor GeventExecutor Gevent \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.gevent import GeventExecutor TornadoExecutor Tornado \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.tornado import TornadoExecutor TwistedExecutor Twisted \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.twisted import TwistedExecutor AsyncIOExecutor asyncio \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.asyncio import AsyncIOExecutor \u516b\u3001\u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6\u914d\u7f6e jobstores \u7528\u6765\u914d\u7f6e\u5b58\u50a8\u5668 \u4f7f\u7528SQLAlchemy\u8fdb\u884c\u5b58\u50a8 \u4f7f\u7528sqlite\u6570\u636e\u5e93\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5e76\u521b\u5efaapscheduler_jobs\u8868 executors \u7528\u6765\u914d\u7f6e\u6267\u884c\u5668 \u4f7f\u7528\u7ebf\u7a0b\u6c60\u8fdb\u884c\u6267\u884c \u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\u4e3a20\u4e2a job_defaults \u521b\u5efajob\u65f6\u7684\u9ed8\u8ba4\u53c2\u6570 coalesce \u662f\u5426\u5408\u5e76\u6267\u884c \u6bd4\u5982\u7531\u4e8e\u67d0\u4e2a\u539f\u56e0\u5bfc\u81f4\u67d0\u4e2a\u4efb\u52a1\u79ef\u6512\u4e86\u5f88\u591a\u6b21\u6ca1\u6709\u6267\u884c\uff08\u6bd4\u5982\u6709\u4e00\u4e2a\u4efb\u52a1\u662f1\u5206\u949f\u8dd1\u4e00\u6b21\uff0c\u4f46\u662f\u7cfb\u7edf\u539f\u56e0\u65ad\u4e865\u5206\u949f\uff09 \u5982\u679c coalesce=True\uff0c\u90a3\u4e48\u4e0b\u6b21\u6062\u590d\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u53ea\u6267\u884c\u4e00\u6b21\uff0c \u800c\u5982\u679c\u8bbe\u7f6e coalesce=False\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u5408\u5e76\uff0c\u4f1a5\u6b21\u5168\u90e8\u6267\u884c\u3002 max_instances \u6700\u5927\u5b9e\u4f8b\u6570, \u540c\u4e00\u4e2a\u4efb\u52a1\u540c\u4e00\u65f6\u95f4\u6700\u591a\u53ea\u80fd\u6709n\u4e2a\u5b9e\u4f8b\u5728\u8fd0\u884c\u3002 \u6bd4\u5982\u4e00\u4e2a\u8017\u65f610\u5206\u949f\u7684job\uff0c\u88ab\u6307\u5b9a\u6bcf\u5206\u949f\u8fd0\u884c1\u6b21\uff0c\u5982\u679c\u6211 max_instance\u503c5\uff0c\u90a3\u4e48\u5728\u7b2c6~10\u5206\u949f\u4e0a\uff0c\u65b0\u7684\u8fd0\u884c\u5b9e\u4f8b\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u56e0\u4e3a\u5df2\u7ecf\u67095\u4e2a\u5b9e\u4f8b\u5728\u8dd1\u4e86\u3002 from apscheduler.schedulers.blocking import BlockingScheduler from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore from apscheduler.executors.pool import ThreadPoolExecutor interval_task = { # \u914d\u7f6e\u5b58\u50a8\u5668 \"jobstores\": { # \u4f7f\u7528SQLAlchemy\u8fdb\u884c\u5b58\u50a8,\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5e76\u521b\u5efaapscheduler_jobs\u8868 'default': SQLAlchemyJobStore(url=\"sqlite:///jobs.db\") }, # \u914d\u7f6e\u6267\u884c\u5668 \"executors\": { # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u8fdb\u884c\u6267\u884c\uff0c\u6700\u5927\u7ebf\u7a0b\u6570\u662f20\u4e2a 'default': ThreadPoolExecutor(20) }, # \u521b\u5efajob\u65f6\u7684\u9ed8\u8ba4\u53c2\u6570 \"job_defaults\": { 'coalesce': False, # \u662f\u5426\u5408\u5e76\u6267\u884c 'max_instances': 3 # \u6700\u5927\u5b9e\u4f8b\u6570 } } scheduler = BlockingScheduler(**interval_task) \u4e5d\u3001\u4efb\u52a1\u64cd\u4f5c 1\u3001\u6dfb\u52a0job 1\uff09\u8c03\u7528 add_job() \u65b9\u6cd5 \u6700\u5e38\u7528\u7684\u65b9\u5f0f \u8fd4\u56de\u4e00\u4e2a apscheduler.job.Job \u5b9e\u4f8b\uff0c\u53ef\u4ee5\u7528\u5b83\u5728\u4e4b\u540e\u4fee\u6539\u6216\u79fb\u9664job \u5982\u679c\u8c03\u5ea6\u7684job\u5728\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u5b58\u50a8\u5668\u91cc\uff0c\u5f53\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5fc5\u987b\u8981\u4e3ajob\u5b9a\u4e49\u4e00\u4e2a\u663e\u793a\u7684ID\u5e76\u4f7f\u7528 replace_existing=True , \u5426\u5219\u6bcf\u6b21\u5e94\u7528\u7a0b\u5e8f\u91cd\u542f\u65f6\u90fd\u4f1a\u5f97\u5230\u90a3\u4e2ajob\u7684\u4e00\u4e2a\u65b0\u526f\u672c 2\uff09\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528 scheduled_job() \u88c5\u9970\u5668 \u901a\u8fc7\u58f0\u660ejob\u800c\u4e0d\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u662f\u6700\u4e3a\u65b9\u4fbf\u7684 # \u6700\u5e38\u7528\u7684\u65b9\u5f0f scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"desire_job\", replace_existing=True) # \u4f7f\u7528\u88c5\u9970\u5668 @scheduler.scheduled_job(\"interval\", seconds=5, id=\"job2222222\") def test_task(): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, \u4f7f\u7528\u88c5\u9970\u5668\") 2\u3001\u79fb\u9664job 1\uff09\u901a\u8fc7job\u7684ID\u6765\u8c03\u7528 remove_job \u65b9\u6cd5 2\uff09\u901a\u8fc7\u5728 add_job() \u4e2d\u5f97\u5230\u7684job\u5b9e\u4f8b\u8c03\u7528 remove() \u65b9\u6cd5 \u5982\u679c\u4e00\u4e2ajob\u5b8c\u6210\u4e86\u8c03\u5ea6\uff08\u4f8b\u5982\u4ed6\u7684\u89e6\u53d1\u5668\u4e0d\u4f1a\u518d\u88ab\u89e6\u53d1\uff09, \u5b83\u4f1a\u81ea\u52a8\u88ab\u79fb\u9664 # remove job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") job.remove() # remove_job scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") scheduler.remove_job(job_id=\"job_remove\") 3\u3001\u6682\u505c\u548c\u6062\u590djob \u901a\u8fc7job\u5b9e\u4f8b\u6216\u8005schedule\u672c\u8eab\u53ef\u4ee5\u8f7b\u6613\u5730\u6682\u505c\u548c\u6062\u590djob \u5f53\u4e00\u4e2ajob\u88ab\u6682\u505c\uff0c\u4ed6\u7684\u4e0b\u4e00\u6b21\u8fd0\u884c\u65f6\u95f4\u5c06\u4f1a\u88ab\u6e05\u7a7a\uff0c\u540c\u65f6\u4e0d\u518d\u8ba1\u7b97\u4e4b\u540e\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u76f4\u5230\u8fd9\u4e2ajob\u88ab\u6062\u590d # \u6682\u505c\u4e00\u4e2ajob # \u65b9\u5f0f\u4e00\uff1a job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") job.pause() # \u65b9\u5f0f\u4e8c\uff1a scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") scheduler.pause_job(job_id=\"job_remove\") # \u6062\u590d\u4e00\u4e2ajob # \u65b9\u5f0f\u4e00\uff1a job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") job.resume() # \u65b9\u5f0f\u4e8c\uff1a scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") scheduler.resume_job(job_id=\"job_remove\") 4\u3001\u83b7\u53d6\u4f5c\u4e1a\u8c03\u5ea6\u5217\u8868 get_jobs \u83b7\u53d6\u673a\u5668\u4e0a\u53ef\u5904\u7406\u7684\u4f5c\u4e1a\u8c03\u5ea6\u5217\u8868 \u8fd4\u56de\u4e00\u4e2aJob\u5b9e\u4f8b\u5217\u8868 \u5982\u679c\u53ea\u5bf9\u7279\u5b9a\u7684\u5b58\u50a8\u5668\u4e2d\u7684job\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u5c06\u5b58\u50a8\u5668\u7684\u522b\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570 print_jobs \u683c\u5f0f\u5316\u8f93\u51fa\u4f5c\u4e1a\u5217\u8868\u4ee5\u53ca\u4ed6\u4eec\u7684\u89e6\u53d1\u5668\u548c\u4e0b\u4e00\u6b21\u7684\u8fd0\u884c\u65f6\u95f4 5\u3001\u4fee\u6539job modify() \u901a\u8fc7job\u5b9e\u4f8b\u8fdb\u884c\u4fee\u6539\u5c5e\u6027 modify_job \u901a\u8fc7job\u7684ID\u8fdb\u884c\u4fee\u6539\u5c5e\u6027 job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_modify\") # modify job.modify(name=\"job222\") # modify_job scheduler.modify_job(job_id=\"job_modify\", name=\"job2222\") reschedule \u901a\u8fc7job\u5b9e\u4f8b\u91cd\u65b0\u8c03\u5ea6job reschedule_job \u901a\u8fc7job\u7684ID\u8fdb\u884c\u91cd\u65b0\u8c03\u5ea6job job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_modify\") # reschedule job.reschedule(trigger='cron', minute='*/5') # reschedule_job scheduler.reschedule_job(job_id=\"job_modify\", trigger='cron', minute='*/5') \u5341\u3001\u8c03\u5ea6\u5668\u64cd\u4f5c 1\u3001\u7ec8\u6b62\u8c03\u5ea6\u5668 shutdown() \u9ed8\u8ba4\u60c5\u51b5\uff0c\u4f1a\u7ec8\u6b62\u4efb\u52a1\u5b58\u50a8\u5668\u4ee5\u53ca\u6267\u884c\u5668\uff0c\u7136\u540e\u7b49\u5f85\u6240\u6709\u76ee\u524d\u6267\u884c\u7684job\u5b8c\u6210\u540e\uff08\u81ea\u52a8\u7ec8\u6b62\uff09 wait=False \u6b64\u53c2\u6570\u4e0d\u4f1a\u7b49\u5f85\u4efb\u4f55\u8fd0\u884c\u4e2d\u7684\u4efb\u52a1\u5b8c\u6210\uff0c\u76f4\u63a5\u7ec8\u6b62 scheduler.shutdown() scheduler.shutdown(wait=False) 2\u3001\u6682\u505c/\u6062\u590d job \u7684\u8fd0\u884c scheduler.pause() \u6682\u505c\u88ab\u8c03\u5ea6\u7684job\u7684\u8fd0\u884c scheduler.resume() \u6062\u590djob\u7684\u8fd0\u884c\uff0c\u4f1a\u5bfc\u81f4\u8c03\u5ea6\u5668\u5728\u88ab\u6062\u590d\u4e4b\u524d\u4e00\u81f4\u5904\u4e8e\u4f11\u7720\u72b6\u6001 scheduler.start(paused=True) \u5982\u679c\u6ca1\u6709\u8fdb\u884c\u8fc7\u5524\u9192\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u5904\u4e8e\u6682\u505c\u72b6\u6001\u7684\u8c03\u5ea6\u5668\u6267\u884c start \u64cd\u4f5c \u53ef\u4ee5\u6709\u673a\u4f1a\u5728\u4e0d\u60f3\u8981\u7684job\u8fd0\u884c\u4e4b\u524d\u5c06\u5b83\u4eec\u6392\u9664\u6389 \u5341\u4e00\u3001\u8c03\u5ea6\u5668\u4e8b\u4ef6\u64cd\u4f5c add_listener \u901a\u8fc7\u6b64\u65b9\u6cd5\u5bf9\u8c03\u5ea6\u5668\u7ed1\u5b9a\u4e8b\u4ef6\u76d1\u542c\u5668 def my_listener(event): if event.exception: print(\"\u4efb\u52a1\u51fa\u9519\u4e86\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\") else: print(\"\u4efb\u52a1\u6b63\u5e38\u8fd0\u884c\u3002\u3002\u3002\u3002\u3002\") # \u7ed1\u5b9a\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u5f53\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u9519\u8bef\u7684\u65f6\uff0c\u8fdb\u884c\u76d1\u542c scheduler.add_listener(my_listener, mask=EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)","title":"APScheduler \u5b9a\u65f6\u4efb\u52a1"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#apscheduler","text":"","title":"APScheduler \u5b9a\u65f6\u4efb\u52a1"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#apscheduler_1","text":"APScheduler \u5168\u79f0 Advanced Python Scheduler \u4f5c\u7528\u4e3a\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u89c4\u5219\u6267\u884c\u6307\u5b9a\u7684\u4f5c\u4e1a\u3002 \u6307\u5b9a\u65f6\u95f4\u89c4\u5219\u7684\u65b9\u5f0f\u53ef\u4ee5\u662f\u95f4\u9694\u591a\u4e45\u6267\u884c\uff0c\u53ef\u4ee5\u662f\u6307\u5b9a\u65e5\u671f\u65f6\u95f4\u7684\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u7c7b\u4f3cLinux\u7cfb\u7edf\u4e2dCrontab\u4e2d\u7684\u65b9\u5f0f\u6267\u884c\u4efb\u52a1\u3002 \u6307\u5b9a\u7684\u4efb\u52a1\u5c31\u662f\u4e00\u4e2aPython\u51fd\u6570\u3002","title":"\u4e00\u3001APScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_1","text":"pip install apscheduler","title":"\u4e8c\u3001\u5b89\u88c5"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_2","text":"\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1 func \u4e00\u4e2a\u4efb\u52a1\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u6216\u8005\u5f02\u6b65\u51fd\u6570 \u521b\u5efa\u8c03\u5ea6\u5668 BlockingScheduler BlockingScheduler \u662f\u6700\u57fa\u672c\u7684\u8c03\u5ea6\u5668\uff0c\u963b\u585e\u578b\u7684\u8c03\u5ea6\u5668 \u628a\u4efb\u52a1\u6dfb\u52a0\u5230\u8c03\u5ea6\u5668\u4e2d add_job \u53c2\u6570\u4e00\uff1a\u4efb\u52a1\u540d \u53c2\u6570\u4e8c\uff1a\u89e6\u53d1\u5668\uff0c\u4f7f\u7528\u7684\u662f interval \u95f4\u9694\u89e6\u53d1\u5668 seconds \uff1a\u95f4\u9694\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\uff0c\u6ca1\u4e2a\u51e0\u79d2\u6267\u884c\u4e00\u6b21 args \uff1a\u6240\u6dfb\u52a0\u7684\u4efb\u52a1\u7684\u4f20\u5165\u53c2\u6570 \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1 start from datetime import datetime from apscheduler.schedulers.blocking import BlockingScheduler def func(name): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, {name}\") scheduler = BlockingScheduler() scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"]) scheduler.start() \u6267\u884c\u7ed3\u679c\uff1a 2021-05-25 15:04:36 Hello world, desire 2021-05-25 15:04:39 Hello world, desire 2021-05-25 15:04:42 Hello world, desire 2021-05-25 15:04:45 Hello world, desire","title":"\u4e09\u3001\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#schedulers","text":"","title":"\u56db\u3001\u8c03\u5ea6\u5668\uff08schedulers\uff09"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#blockingscheduler","text":"\u963b\u585e\u578b\u8c03\u5ea6\u5668\uff0c\u6700\u57fa\u672c\u7684\u8c03\u5ea6\u5668\uff0c\u8c03\u7528 start \u51fd\u6570\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u4e0d\u80fd\u7acb\u5373\u8fd4\u56de \u9002\u7528\u4e8e\u8c03\u5ea6\u7a0b\u5e8f\u65f6\u8fdb\u7a0b\u4e2d\u552f\u4e00\u8fd0\u884c\u7684\u8fdb\u7a0b from apscheduler.schedulers.blocking import BlockingScheduler","title":"BlockingScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#backgroundscheduler","text":"\u540e\u53f0\u8fd0\u884c\u8c03\u5ea6\u5668\uff0c\u8c03\u7528 start \u540e\u4e3b\u7ebf\u7a0b\u4e0d\u4f1a\u963b\u585e \u9002\u7528\u4e8e\u8c03\u5ea6\u7a0b\u5e8f\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u540e\u53f0\u8fd0\u884c from apscheduler.schedulers.background import BackgroundScheduler","title":"BackgroundScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#asyncioscheduler","text":"\u9002\u7528\u4e8e\u4f7f\u7528\u4e86 asyncio \u6a21\u5757\u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.asyncio import AsyncIOScheduler","title":"AsyncIOScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#geventscheduler","text":"\u9002\u7528\u4e8e\u4f7f\u7528 gevent \u6a21\u5757\u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.gevent import GeventScheduler","title":"GeventScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#twistedscheduler","text":"\u9002\u7528\u4e8e\u6784\u5efa Twisted \u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.twisted import TwistedScheduler","title":"TwistedScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#qtscheduler","text":"\u9002\u7528\u4e8e\u6784\u5efa Qt \u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.qt import QtScheduler","title":"QtScheduler\uff1a"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#tornadoscheduler","text":"\u9002\u7528\u4e8e\u6784\u5efa Tornado \u7684\u5e94\u7528\u7a0b\u5e8f from apscheduler.schedulers.tornado import TornadoScheduler","title":"TornadoScheduler"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#triggers","text":"","title":"\u4e94\u3001\u89e6\u53d1\u5668\uff08triggers\uff09"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#1date","text":"\u5728\u67d0\u4e2a\u65e5\u671f\u65f6\u95f4\u53ea\u89e6\u53d1\u4e00\u6b21\u4e8b\u4ef6 run_date \uff1a\u53c2\u6570\u4e3a\u6307\u5b9a\u89e6\u53d1\u4e8b\u4ef6\u7684\u65e5\u671f from datetime import datetime from apscheduler.schedulers.blocking import BlockingScheduler def func(name): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, {name}\") scheduler = BlockingScheduler() # \u6307\u5b9a\u57282021/05/25 15:43 \u8fdb\u884c\u6267\u884c\u4efb\u52a1 scheduler.add_job(func, 'date', run_date=datetime(2021, 5, 25, 15, 43), args=[\"desire\"]) scheduler.start() \u8fd0\u884c\u7ed3\u679c\uff1a 2021-05-25 15:43:00 Hello world, desire","title":"1\u3001date\u89e6\u53d1\u5668"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#2interval","text":"","title":"2\u3001interval\u89e6\u53d1\u5668"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_3","text":"","title":"\u5728\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u89e6\u53d1\u4e8b\u4ef6"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#interval","text":"weeks \uff1a\u5468\uff0cint days \uff1a\u4e00\u4e2a\u6708\u4e2d\u7684\u5929\uff0cint hours \uff1a\u5c0f\u65f6\uff0cint minutes \uff1a\u5206\u949f\uff0cint seconds \uff1a\u79d2\uff0cint start_date \uff1a\u95f4\u9694\u89e6\u53d1\u7684\u8d77\u59cb\u65f6\u95f4 end_date \uff1a\u95f4\u9694\u89e6\u53d1\u7684\u7ed3\u675f\u65f6\u95f4 jitter \uff1a\u89e6\u53d1\u7684\u65f6\u95f4\u8bef\u5dee # \u4e09\u79d2\u6267\u884c\u4e00\u6b21 scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"])","title":"interval\u89e6\u53d1\u5668\u53ef\u4ee5\u8bbe\u7f6e\u7684\u89e6\u53d1\u53c2\u6570\uff1a"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#3cron","text":"","title":"3\u3001cron\u89e6\u53d1\u5668"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_4","text":"","title":"\u5728\u67d0\u4e2a\u786e\u5207\u7684\u65f6\u95f4\u5468\u671f\u6027\u7684\u89e6\u53d1\u65f6\u95f4"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_5","text":"year \uff1a4\u4f4d\u6570\u7684\u5e74\u4efd month \uff1a1-12\u6708\u4efd day \uff1a1-31\u65e5 week \uff1a1-53\u5468 day_of_week \uff1a\u4e00\u4e2a\u793c\u62dc\u4e2d\u7684\u7b2c\u51e0\u5929 0-6 mon\u3001tue\u3001wed\u3001thu\u3001fri\u3001sat\u3001sun hour \uff1a0-23\u5c0f\u65f6 minute \uff1a0-59\u5206\u949f second \uff1a0-59\u79d2 start_date \uff1adatetime\u7c7b\u578b\u6216\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u8d77\u59cb\u65f6\u95f4 end_date \uff1adatetime\u7c7b\u578b\u6216\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u7ed3\u675f\u65f6\u95f4 timezone \uff1a\u65f6\u533a jitter \uff1a\u4efb\u52a1\u89e6\u53d1\u7684\u8bef\u5dee\u65f6\u95f4","title":"\u53c2\u6570\uff1a"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_6","text":"* \u4efb\u4f55 \u5728\u6bcf\u4e2a\u503c\u90fd\u89e6\u53d1 */a \u4efb\u4f55 \u6bcf\u9694 a \u89e6\u53d1\u4e00\u6b21 a-b \u4efb\u4f55 \u5728 a-b \u533a\u95f4\u5185\u4efb\u4f55\u4e00\u4e2a\u65f6\u95f4\u89e6\u53d1(a<b) a-b/c \u4efb\u4f55 \u5728 a-b \u533a\u95f4\u5185\u6bcf\u9694 c \u89e6\u53d1\u4e00\u6b21 xth y day \u7b2c x \u4e2a\u661f\u671f y \u89e6\u53d1 last y day \u6700\u540e\u4e00\u4e2a\u661f\u671f x \u89e6\u53d1 last day \u4e00\u4e2a\u6708\u4e2d\u7684\u6700\u540e\u4e00\u5929\u89e6\u53d1 x,y,z \u4efb\u4f55 \u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u8fdb\u884c\u7ec4\u5408 # \u5728\u6bcf\u4e2a50\u79d2\u7684\u65f6\u5019\u89e6\u53d1 scheduler.add_job(func, 'cron', second=50, args=[\"desire\"]) # \u5728\u7b2c4\u4e2a\u661f\u671f\u65e5\u89e6\u53d1 scheduler.add_job(func, 'cron', day=\"4th sun\", args=[\"desire\"])","title":"\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f\u7c7b\u578b"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#job-stores","text":"","title":"\u516d\u3001\u4efb\u52a1\u5b58\u50a8\u5668\uff08job stores\uff09"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#memoryjobstore","text":"\u6ca1\u6709\u5e8f\u5217\u5316\uff0c\u4efb\u52a1\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u589e\u5220\u6539\u67e5\u90fd\u5728\u5185\u5b58\u4e2d\u5b8c\u6210 from apscheduler.jobstores.memory import MemoryJobStore","title":"MemoryJobStore"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#sqlalchemyjobstore","text":"\u4f7f\u7528 SQLAlchemy \u8fd9\u4e2aORM\u6846\u67b6\u4f5c\u4e3a\u5b58\u50a8\u65b9\u5f0f from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore","title":"SQLAlchemyJobStore"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#mongodbjobstore","text":"\u4f7f\u7528 mongodb \u4f5c\u4e3a\u5b58\u50a8\u5668 from apscheduler.jobstores.mongodb import MongoDBJobStore","title":"MongoDBJobStore"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#redisjobstore","text":"\u4f7f\u7528 redis \u4f5c\u4e3a\u5b58\u50a8\u5668 from apscheduler.jobstores.redis import RedisJobStore","title":"RedisJobStore"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#executors","text":"","title":"\u4e03\u3001\u6267\u884c\u5668\uff08executors\uff09"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#threadpoolexecutor","text":"\u9ed8\u8ba4\u6267\u884c\u5668 \u7ebf\u7a0b\u6c60\u6267\u884c\u5668 from apscheduler.executors.pool import ThreadPoolExecutor","title":"ThreadPoolExecutor"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#processpoolexecutor","text":"\u8fdb\u7a0b\u6c60\u6267\u884c\u5668 \u9002\u7528\u4e8e\u6d89\u53ca\u5230\u4e00\u4e9bCPU\u5bc6\u96c6\u8ba1\u7b97\u7684\u64cd\u4f5c from apscheduler.executors.pool import ProcessPoolExecutor","title":"ProcessPoolExecutor"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#geventexecutor","text":"Gevent \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.gevent import GeventExecutor","title":"GeventExecutor"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#tornadoexecutor","text":"Tornado \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.tornado import TornadoExecutor","title":"TornadoExecutor"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#twistedexecutor","text":"Twisted \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.twisted import TwistedExecutor","title":"TwistedExecutor"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#asyncioexecutor","text":"asyncio \u7a0b\u5e8f\u6267\u884c\u5668 from apscheduler.executors.asyncio import AsyncIOExecutor","title":"AsyncIOExecutor"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_7","text":"","title":"\u516b\u3001\u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6\u914d\u7f6e"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#jobstores","text":"\u4f7f\u7528SQLAlchemy\u8fdb\u884c\u5b58\u50a8 \u4f7f\u7528sqlite\u6570\u636e\u5e93\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5e76\u521b\u5efaapscheduler_jobs\u8868","title":"jobstores \u7528\u6765\u914d\u7f6e\u5b58\u50a8\u5668"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#executors_1","text":"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u8fdb\u884c\u6267\u884c \u8bbe\u7f6e\u6700\u5927\u7ebf\u7a0b\u6570\u4e3a20\u4e2a","title":"executors \u7528\u6765\u914d\u7f6e\u6267\u884c\u5668"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#job_defaults-job","text":"coalesce \u662f\u5426\u5408\u5e76\u6267\u884c \u6bd4\u5982\u7531\u4e8e\u67d0\u4e2a\u539f\u56e0\u5bfc\u81f4\u67d0\u4e2a\u4efb\u52a1\u79ef\u6512\u4e86\u5f88\u591a\u6b21\u6ca1\u6709\u6267\u884c\uff08\u6bd4\u5982\u6709\u4e00\u4e2a\u4efb\u52a1\u662f1\u5206\u949f\u8dd1\u4e00\u6b21\uff0c\u4f46\u662f\u7cfb\u7edf\u539f\u56e0\u65ad\u4e865\u5206\u949f\uff09 \u5982\u679c coalesce=True\uff0c\u90a3\u4e48\u4e0b\u6b21\u6062\u590d\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u53ea\u6267\u884c\u4e00\u6b21\uff0c \u800c\u5982\u679c\u8bbe\u7f6e coalesce=False\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u5408\u5e76\uff0c\u4f1a5\u6b21\u5168\u90e8\u6267\u884c\u3002 max_instances \u6700\u5927\u5b9e\u4f8b\u6570, \u540c\u4e00\u4e2a\u4efb\u52a1\u540c\u4e00\u65f6\u95f4\u6700\u591a\u53ea\u80fd\u6709n\u4e2a\u5b9e\u4f8b\u5728\u8fd0\u884c\u3002 \u6bd4\u5982\u4e00\u4e2a\u8017\u65f610\u5206\u949f\u7684job\uff0c\u88ab\u6307\u5b9a\u6bcf\u5206\u949f\u8fd0\u884c1\u6b21\uff0c\u5982\u679c\u6211 max_instance\u503c5\uff0c\u90a3\u4e48\u5728\u7b2c6~10\u5206\u949f\u4e0a\uff0c\u65b0\u7684\u8fd0\u884c\u5b9e\u4f8b\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u56e0\u4e3a\u5df2\u7ecf\u67095\u4e2a\u5b9e\u4f8b\u5728\u8dd1\u4e86\u3002 from apscheduler.schedulers.blocking import BlockingScheduler from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore from apscheduler.executors.pool import ThreadPoolExecutor interval_task = { # \u914d\u7f6e\u5b58\u50a8\u5668 \"jobstores\": { # \u4f7f\u7528SQLAlchemy\u8fdb\u884c\u5b58\u50a8,\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5e76\u521b\u5efaapscheduler_jobs\u8868 'default': SQLAlchemyJobStore(url=\"sqlite:///jobs.db\") }, # \u914d\u7f6e\u6267\u884c\u5668 \"executors\": { # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u8fdb\u884c\u6267\u884c\uff0c\u6700\u5927\u7ebf\u7a0b\u6570\u662f20\u4e2a 'default': ThreadPoolExecutor(20) }, # \u521b\u5efajob\u65f6\u7684\u9ed8\u8ba4\u53c2\u6570 \"job_defaults\": { 'coalesce': False, # \u662f\u5426\u5408\u5e76\u6267\u884c 'max_instances': 3 # \u6700\u5927\u5b9e\u4f8b\u6570 } } scheduler = BlockingScheduler(**interval_task)","title":"job_defaults \u521b\u5efajob\u65f6\u7684\u9ed8\u8ba4\u53c2\u6570"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_8","text":"","title":"\u4e5d\u3001\u4efb\u52a1\u64cd\u4f5c"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#1job","text":"1\uff09\u8c03\u7528 add_job() \u65b9\u6cd5 \u6700\u5e38\u7528\u7684\u65b9\u5f0f \u8fd4\u56de\u4e00\u4e2a apscheduler.job.Job \u5b9e\u4f8b\uff0c\u53ef\u4ee5\u7528\u5b83\u5728\u4e4b\u540e\u4fee\u6539\u6216\u79fb\u9664job \u5982\u679c\u8c03\u5ea6\u7684job\u5728\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u5b58\u50a8\u5668\u91cc\uff0c\u5f53\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5fc5\u987b\u8981\u4e3ajob\u5b9a\u4e49\u4e00\u4e2a\u663e\u793a\u7684ID\u5e76\u4f7f\u7528 replace_existing=True , \u5426\u5219\u6bcf\u6b21\u5e94\u7528\u7a0b\u5e8f\u91cd\u542f\u65f6\u90fd\u4f1a\u5f97\u5230\u90a3\u4e2ajob\u7684\u4e00\u4e2a\u65b0\u526f\u672c 2\uff09\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528 scheduled_job() \u88c5\u9970\u5668 \u901a\u8fc7\u58f0\u660ejob\u800c\u4e0d\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u662f\u6700\u4e3a\u65b9\u4fbf\u7684 # \u6700\u5e38\u7528\u7684\u65b9\u5f0f scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"desire_job\", replace_existing=True) # \u4f7f\u7528\u88c5\u9970\u5668 @scheduler.scheduled_job(\"interval\", seconds=5, id=\"job2222222\") def test_task(): now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') print(now + f\" Hello world, \u4f7f\u7528\u88c5\u9970\u5668\")","title":"1\u3001\u6dfb\u52a0job"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#2job","text":"1\uff09\u901a\u8fc7job\u7684ID\u6765\u8c03\u7528 remove_job \u65b9\u6cd5 2\uff09\u901a\u8fc7\u5728 add_job() \u4e2d\u5f97\u5230\u7684job\u5b9e\u4f8b\u8c03\u7528 remove() \u65b9\u6cd5 \u5982\u679c\u4e00\u4e2ajob\u5b8c\u6210\u4e86\u8c03\u5ea6\uff08\u4f8b\u5982\u4ed6\u7684\u89e6\u53d1\u5668\u4e0d\u4f1a\u518d\u88ab\u89e6\u53d1\uff09, \u5b83\u4f1a\u81ea\u52a8\u88ab\u79fb\u9664 # remove job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") job.remove() # remove_job scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") scheduler.remove_job(job_id=\"job_remove\")","title":"2\u3001\u79fb\u9664job"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#3job","text":"\u901a\u8fc7job\u5b9e\u4f8b\u6216\u8005schedule\u672c\u8eab\u53ef\u4ee5\u8f7b\u6613\u5730\u6682\u505c\u548c\u6062\u590djob \u5f53\u4e00\u4e2ajob\u88ab\u6682\u505c\uff0c\u4ed6\u7684\u4e0b\u4e00\u6b21\u8fd0\u884c\u65f6\u95f4\u5c06\u4f1a\u88ab\u6e05\u7a7a\uff0c\u540c\u65f6\u4e0d\u518d\u8ba1\u7b97\u4e4b\u540e\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u76f4\u5230\u8fd9\u4e2ajob\u88ab\u6062\u590d # \u6682\u505c\u4e00\u4e2ajob # \u65b9\u5f0f\u4e00\uff1a job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") job.pause() # \u65b9\u5f0f\u4e8c\uff1a scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") scheduler.pause_job(job_id=\"job_remove\") # \u6062\u590d\u4e00\u4e2ajob # \u65b9\u5f0f\u4e00\uff1a job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") job.resume() # \u65b9\u5f0f\u4e8c\uff1a scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_remove\") scheduler.resume_job(job_id=\"job_remove\")","title":"3\u3001\u6682\u505c\u548c\u6062\u590djob"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#4","text":"get_jobs \u83b7\u53d6\u673a\u5668\u4e0a\u53ef\u5904\u7406\u7684\u4f5c\u4e1a\u8c03\u5ea6\u5217\u8868 \u8fd4\u56de\u4e00\u4e2aJob\u5b9e\u4f8b\u5217\u8868 \u5982\u679c\u53ea\u5bf9\u7279\u5b9a\u7684\u5b58\u50a8\u5668\u4e2d\u7684job\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u5c06\u5b58\u50a8\u5668\u7684\u522b\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570 print_jobs \u683c\u5f0f\u5316\u8f93\u51fa\u4f5c\u4e1a\u5217\u8868\u4ee5\u53ca\u4ed6\u4eec\u7684\u89e6\u53d1\u5668\u548c\u4e0b\u4e00\u6b21\u7684\u8fd0\u884c\u65f6\u95f4","title":"4\u3001\u83b7\u53d6\u4f5c\u4e1a\u8c03\u5ea6\u5217\u8868"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#5job","text":"modify() \u901a\u8fc7job\u5b9e\u4f8b\u8fdb\u884c\u4fee\u6539\u5c5e\u6027 modify_job \u901a\u8fc7job\u7684ID\u8fdb\u884c\u4fee\u6539\u5c5e\u6027 job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_modify\") # modify job.modify(name=\"job222\") # modify_job scheduler.modify_job(job_id=\"job_modify\", name=\"job2222\") reschedule \u901a\u8fc7job\u5b9e\u4f8b\u91cd\u65b0\u8c03\u5ea6job reschedule_job \u901a\u8fc7job\u7684ID\u8fdb\u884c\u91cd\u65b0\u8c03\u5ea6job job = scheduler.add_job(func, 'interval', seconds=3, args=[\"desire\"], id=\"job_modify\") # reschedule job.reschedule(trigger='cron', minute='*/5') # reschedule_job scheduler.reschedule_job(job_id=\"job_modify\", trigger='cron', minute='*/5')","title":"5\u3001\u4fee\u6539job"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_9","text":"","title":"\u5341\u3001\u8c03\u5ea6\u5668\u64cd\u4f5c"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#1","text":"shutdown() \u9ed8\u8ba4\u60c5\u51b5\uff0c\u4f1a\u7ec8\u6b62\u4efb\u52a1\u5b58\u50a8\u5668\u4ee5\u53ca\u6267\u884c\u5668\uff0c\u7136\u540e\u7b49\u5f85\u6240\u6709\u76ee\u524d\u6267\u884c\u7684job\u5b8c\u6210\u540e\uff08\u81ea\u52a8\u7ec8\u6b62\uff09 wait=False \u6b64\u53c2\u6570\u4e0d\u4f1a\u7b49\u5f85\u4efb\u4f55\u8fd0\u884c\u4e2d\u7684\u4efb\u52a1\u5b8c\u6210\uff0c\u76f4\u63a5\u7ec8\u6b62 scheduler.shutdown() scheduler.shutdown(wait=False)","title":"1\u3001\u7ec8\u6b62\u8c03\u5ea6\u5668"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#2-job","text":"scheduler.pause() \u6682\u505c\u88ab\u8c03\u5ea6\u7684job\u7684\u8fd0\u884c scheduler.resume() \u6062\u590djob\u7684\u8fd0\u884c\uff0c\u4f1a\u5bfc\u81f4\u8c03\u5ea6\u5668\u5728\u88ab\u6062\u590d\u4e4b\u524d\u4e00\u81f4\u5904\u4e8e\u4f11\u7720\u72b6\u6001 scheduler.start(paused=True) \u5982\u679c\u6ca1\u6709\u8fdb\u884c\u8fc7\u5524\u9192\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u5904\u4e8e\u6682\u505c\u72b6\u6001\u7684\u8c03\u5ea6\u5668\u6267\u884c start \u64cd\u4f5c \u53ef\u4ee5\u6709\u673a\u4f1a\u5728\u4e0d\u60f3\u8981\u7684job\u8fd0\u884c\u4e4b\u524d\u5c06\u5b83\u4eec\u6392\u9664\u6389","title":"2\u3001\u6682\u505c/\u6062\u590d job \u7684\u8fd0\u884c"},{"location":"Other/003%20APScheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/#_10","text":"add_listener \u901a\u8fc7\u6b64\u65b9\u6cd5\u5bf9\u8c03\u5ea6\u5668\u7ed1\u5b9a\u4e8b\u4ef6\u76d1\u542c\u5668 def my_listener(event): if event.exception: print(\"\u4efb\u52a1\u51fa\u9519\u4e86\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\") else: print(\"\u4efb\u52a1\u6b63\u5e38\u8fd0\u884c\u3002\u3002\u3002\u3002\u3002\") # \u7ed1\u5b9a\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u5f53\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u9519\u8bef\u7684\u65f6\uff0c\u8fdb\u884c\u76d1\u542c scheduler.add_listener(my_listener, mask=EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)","title":"\u5341\u4e00\u3001\u8c03\u5ea6\u5668\u4e8b\u4ef6\u64cd\u4f5c"},{"location":"Other/004%20MySQL%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85/","text":"MySQL\u4fee\u6539\u5b57\u7b26\u96c6\u652f\u6301emoji\u8868\u60c5 utf8mb4 \u4e00\u822c\u6211\u4eec\u6570\u636e\u7f16\u7801\u683c\u5f0f\u9ed8\u8ba4\u8bbe\u7f6e\u4e3autf-8, \u4f46\u662futf-8\u5e76\u4e0d\u652f\u6301\u8868\u60c5,\u800c\u8868\u60c5\u9700\u8981utf8mb4\u5b57\u6bb5(\u5411\u4e0b\u517c\u5bb9utf-8) \u4e00\u3001\u5355\u4e2a\u5b57\u6bb5\u4fee\u6539\u5b57\u7b26\u96c6 ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; OR \u4e8c\u3001\u6574\u5f20\u8868\u4fee\u6539\u5b57\u7b26\u96c6 ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; OR \u4e09\u3001\u6574\u4e2a\u6570\u636e\u5e93\u4fee\u6539\u5b57\u7b26\u96c6 ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; OR","title":"MySQL\u4fee\u6539\u5b57\u7b26\u96c6\u652f\u6301emoji\u8868\u60c5"},{"location":"Other/004%20MySQL%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85/#mysqlemoji","text":"","title":"MySQL\u4fee\u6539\u5b57\u7b26\u96c6\u652f\u6301emoji\u8868\u60c5"},{"location":"Other/004%20MySQL%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85/#utf8mb4","text":"\u4e00\u822c\u6211\u4eec\u6570\u636e\u7f16\u7801\u683c\u5f0f\u9ed8\u8ba4\u8bbe\u7f6e\u4e3autf-8, \u4f46\u662futf-8\u5e76\u4e0d\u652f\u6301\u8868\u60c5,\u800c\u8868\u60c5\u9700\u8981utf8mb4\u5b57\u6bb5(\u5411\u4e0b\u517c\u5bb9utf-8)","title":"utf8mb4"},{"location":"Other/004%20MySQL%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85/#_1","text":"ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; OR","title":"\u4e00\u3001\u5355\u4e2a\u5b57\u6bb5\u4fee\u6539\u5b57\u7b26\u96c6"},{"location":"Other/004%20MySQL%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85/#_2","text":"ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; OR","title":"\u4e8c\u3001\u6574\u5f20\u8868\u4fee\u6539\u5b57\u7b26\u96c6"},{"location":"Other/004%20MySQL%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85/#_3","text":"ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; OR","title":"\u4e09\u3001\u6574\u4e2a\u6570\u636e\u5e93\u4fee\u6539\u5b57\u7b26\u96c6"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/","text":"Faker-\u4e13\u4e1a\u9020\u6570\u636e \u6765\u6e90\uff1ahttps://mp.weixin.qq.com/s/sTX_75dX9LLDNi1WfkGlLQ \u5b89\u88c5 pip install Faker \u4f7f\u7528 from faker import Faker fake = Faker(locale='zh_CN') locale:\u4e3a\u751f\u6210\u6570\u636e\u7684\u6587\u5316\u9009\u9879\uff08\u8bed\u79cd\uff09\uff0c\u9ed8\u8ba4\u4e3a en_US\uff0c\u53ea\u6709\u4f7f\u7528\u4e86\u76f8\u5173\u6587\u5316\uff0c\u624d\u80fd\u751f\u6210\u76f8\u5bf9\u5e94\u7684\u968f\u673a\u4fe1\u606f zh_CN - Chinese (China Mainland) zh_TW - Chinese (China Taiwan) en_US - English (United States) \u65b9\u6cd5 1.\u5730\u7406\u4fe1\u606f\u7c7b city_suffix()\uff1a\u5e02\uff0c\u53bf country()\uff1a\u56fd\u5bb6 country_code()\uff1a\u56fd\u5bb6\u7f16\u7801 district()\uff1a\u533a geo_coordinate()\uff1a\u5730\u7406\u5750\u6807 latitude()\uff1a\u5730\u7406\u5750\u6807(\u7eac\u5ea6) longitude()\uff1a\u5730\u7406\u5750\u6807(\u7ecf\u5ea6) postcode()\uff1a\u90ae\u7f16 province()\uff1a\u7701\u4efd address()\uff1a\u8be6\u7ec6\u5730\u5740 street_address()\uff1a\u8857\u9053\u5730\u5740 street_name()\uff1a\u8857\u9053\u540d street_suffix()\uff1a\u8857\u3001\u8def 2.\u57fa\u7840\u4fe1\u606f\u7c7b ssn()\uff1a\u751f\u6210\u8eab\u4efd\u8bc1\u53f7 bs()\uff1a\u968f\u673a\u516c\u53f8\u670d\u52a1\u540d company()\uff1a\u968f\u673a\u516c\u53f8\u540d\uff08\u957f\uff09 company_prefix()\uff1a\u968f\u673a\u516c\u53f8\u540d\uff08\u77ed\uff09 company_suffix()\uff1a\u516c\u53f8\u6027\u8d28\uff0c\u5982'\u4fe1\u606f\u6709\u9650\u516c\u53f8' credit_card_expire()\uff1a\u968f\u673a\u4fe1\u7528\u5361\u5230\u671f\u65e5\uff0c\u5982'03/30' credit_card_full()\uff1a\u751f\u6210\u5b8c\u6574\u4fe1\u7528\u5361\u4fe1\u606f credit_card_number()\uff1a\u4fe1\u7528\u5361\u53f7 credit_card_provider()\uff1a\u4fe1\u7528\u5361\u7c7b\u578b credit_card_security_code()\uff1a\u4fe1\u7528\u5361\u5b89\u5168\u7801 job()\uff1a\u968f\u673a\u804c\u4f4d first_name_female()\uff1a\u5973\u6027\u540d first_name_male()\uff1a\u7537\u6027\u540d name()\uff1a\u968f\u673a\u751f\u6210\u5168\u540d name_female()\uff1a\u7537\u6027\u5168\u540d name_male()\uff1a\u5973\u6027\u5168\u540d phone_number()\uff1a\u968f\u673a\u751f\u6210\u624b\u673a\u53f7 phonenumber_prefix()\uff1a\u968f\u673a\u751f\u6210\u624b\u673a\u53f7\u6bb5\uff0c\u5982139 3.\u90ae\u7bb1\u4fe1\u606f\u7c7b ascii_company_email()\uff1a\u968f\u673aASCII\u516c\u53f8\u90ae\u7bb1\u540d ascii_email()\uff1a\u968f\u673aASCII\u90ae\u7bb1\uff1a company_email()\uff1a\u516c\u53f8\u90ae\u7bb1 email()\uff1a\u666e\u901a\u90ae\u7bb1 safe_email()\uff1a\u5b89\u5168\u90ae\u7bb1 4.\u7f51\u7edc\u57fa\u7840\u4fe1\u606f\u7c7b domain_name()\uff1a\u751f\u6210\u57df\u540d domain_word()\uff1a\u57df\u8bcd(\u5373\uff0c\u4e0d\u5305\u542b\u540e\u7f00) ipv4()\uff1a\u968f\u673aIP4\u5730\u5740 ipv6()\uff1a\u968f\u673aIP6\u5730\u5740 mac_address()\uff1a\u968f\u673aMAC\u5730\u5740 tld()\uff1a\u7f51\u5740\u57df\u540d\u540e\u7f00(.com,.net.cn,\u7b49\u7b49\uff0c\u4e0d\u5305\u62ec.) uri()\uff1a\u968f\u673aURI\u5730\u5740 uri_extension()\uff1a\u7f51\u5740\u6587\u4ef6\u540e\u7f00 uri_page()\uff1a\u7f51\u5740\u6587\u4ef6\uff08\u4e0d\u5305\u542b\u540e\u7f00\uff09 uri_path()\uff1a\u7f51\u5740\u6587\u4ef6\u8def\u5f84\uff08\u4e0d\u5305\u542b\u6587\u4ef6\u540d\uff09 url()\uff1a\u968f\u673aURL\u5730\u5740 user_name()\uff1a\u968f\u673a\u7528\u6237\u540d image_url()\uff1a\u968f\u673aURL\u5730\u5740 5.\u6d4f\u89c8\u5668\u4fe1\u606f\u7c7b chrome()\uff1a\u968f\u673a\u751f\u6210Chrome\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f firefox()\uff1a\u968f\u673a\u751f\u6210FireFox\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f internet_explorer()\uff1a\u968f\u673a\u751f\u6210IE\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f opera()\uff1a\u968f\u673a\u751f\u6210Opera\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f safari()\uff1a\u968f\u673a\u751f\u6210Safari\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f linux_platform_token()\uff1a\u968f\u673aLinux\u4fe1\u606f user_agent()\uff1a\u968f\u673auser_agent\u4fe1\u606f 6.\u6570\u5b57\u4fe1\u606f numerify()\uff1a\u4e09\u4f4d\u968f\u673a\u6570\u5b57 random_digit()\uff1a0~9\u968f\u673a\u6570 random_digit_not_null()\uff1a1~9\u7684\u968f\u673a\u6570 random_int()\uff1a\u968f\u673a\u6570\u5b57\uff0c\u9ed8\u8ba40~9999\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6emin,max\u6765\u8bbe\u7f6e random_number()\uff1a\u968f\u673a\u6570\u5b57\uff0c\u53c2\u6570digits\u8bbe\u7f6e\u751f\u6210\u7684\u6570\u5b57\u4f4d\u6570 pyfloat()\uff1a\u968f\u673aFloat\u6570\u5b57 pyint()\uff1a\u968f\u673aInt\u6570\u5b57\uff08\u53c2\u8003random_int()\u53c2\u6570\uff09 pydecimal()\uff1a\u968f\u673aDecimal\u6570\u5b57\uff08\u53c2\u8003pyfloat\u53c2\u6570\uff09 7.\u6587\u672c\u52a0\u5bc6\u7c7b pystr()\uff1a\u968f\u673a\u5b57\u7b26\u4e32 random_element()\uff1a\u968f\u673a\u5b57\u6bcd random_letter()\uff1a\u968f\u673a\u5b57\u6bcd paragraph()\uff1a\u968f\u673a\u751f\u6210\u4e00\u4e2a\u6bb5\u843d paragraphs()\uff1a\u968f\u673a\u751f\u6210\u591a\u4e2a\u6bb5\u843d sentence()\uff1a\u968f\u673a\u751f\u6210\u4e00\u53e5\u8bdd sentences()\uff1a\u968f\u673a\u751f\u6210\u591a\u53e5\u8bdd\uff0c\u4e0e\u6bb5\u843d\u7c7b\u4f3c text()\uff1a\u968f\u673a\u751f\u6210\u4e00\u7bc7\u6587\u7ae0 word()\uff1a\u968f\u673a\u751f\u6210\u8bcd\u8bed words()\uff1a\u968f\u673a\u751f\u6210\u591a\u4e2a\u8bcd\u8bed\uff0c\u7528\u6cd5\u4e0e\u6bb5\u843d\uff0c\u53e5\u5b50\uff0c\u7c7b\u4f3c binary()\uff1a\u968f\u673a\u751f\u6210\u4e8c\u8fdb\u5236\u7f16\u7801 boolean()\uff1aTrue/False language_code()\uff1a\u968f\u673a\u751f\u6210\u4e24\u4f4d\u8bed\u8a00\u7f16\u7801 locale()\uff1a\u968f\u673a\u751f\u6210\u8bed\u8a00/\u56fd\u9645 \u4fe1\u606f md5()\uff1a\u968f\u673a\u751f\u6210MD5 null_boolean()\uff1aNULL/True/False password()\uff1a\u968f\u673a\u751f\u6210\u5bc6\u7801,\u53ef\u9009\u53c2\u6570\uff1alength\uff1a\u5bc6\u7801\u957f\u5ea6\uff1bspecial_chars\uff1a\u662f\u5426\u80fd\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\uff1bdigits\uff1a\u662f\u5426\u5305\u542b\u6570\u5b57\uff1bupper_case\uff1a\u662f\u5426\u5305\u542b\u5927\u5199\u5b57\u6bcd\uff1blower_case\uff1a\u662f\u5426\u5305\u542b\u5c0f\u5199\u5b57\u6bcd sha1()\uff1a\u968f\u673aSHA1 sha256()\uff1a\u968f\u673aSHA256 uuid4()\uff1a\u968f\u673aUUID","title":"Faker-\u4e13\u4e1a\u9020\u6570\u636e"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#faker-","text":"\u6765\u6e90\uff1ahttps://mp.weixin.qq.com/s/sTX_75dX9LLDNi1WfkGlLQ","title":"Faker-\u4e13\u4e1a\u9020\u6570\u636e"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#_1","text":"pip install Faker","title":"\u5b89\u88c5"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#_2","text":"from faker import Faker fake = Faker(locale='zh_CN') locale:\u4e3a\u751f\u6210\u6570\u636e\u7684\u6587\u5316\u9009\u9879\uff08\u8bed\u79cd\uff09\uff0c\u9ed8\u8ba4\u4e3a en_US\uff0c\u53ea\u6709\u4f7f\u7528\u4e86\u76f8\u5173\u6587\u5316\uff0c\u624d\u80fd\u751f\u6210\u76f8\u5bf9\u5e94\u7684\u968f\u673a\u4fe1\u606f zh_CN - Chinese (China Mainland) zh_TW - Chinese (China Taiwan) en_US - English (United States)","title":"\u4f7f\u7528"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#_3","text":"","title":"\u65b9\u6cd5"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#1","text":"city_suffix()\uff1a\u5e02\uff0c\u53bf country()\uff1a\u56fd\u5bb6 country_code()\uff1a\u56fd\u5bb6\u7f16\u7801 district()\uff1a\u533a geo_coordinate()\uff1a\u5730\u7406\u5750\u6807 latitude()\uff1a\u5730\u7406\u5750\u6807(\u7eac\u5ea6) longitude()\uff1a\u5730\u7406\u5750\u6807(\u7ecf\u5ea6) postcode()\uff1a\u90ae\u7f16 province()\uff1a\u7701\u4efd address()\uff1a\u8be6\u7ec6\u5730\u5740 street_address()\uff1a\u8857\u9053\u5730\u5740 street_name()\uff1a\u8857\u9053\u540d street_suffix()\uff1a\u8857\u3001\u8def","title":"1.\u5730\u7406\u4fe1\u606f\u7c7b"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#2","text":"ssn()\uff1a\u751f\u6210\u8eab\u4efd\u8bc1\u53f7 bs()\uff1a\u968f\u673a\u516c\u53f8\u670d\u52a1\u540d company()\uff1a\u968f\u673a\u516c\u53f8\u540d\uff08\u957f\uff09 company_prefix()\uff1a\u968f\u673a\u516c\u53f8\u540d\uff08\u77ed\uff09 company_suffix()\uff1a\u516c\u53f8\u6027\u8d28\uff0c\u5982'\u4fe1\u606f\u6709\u9650\u516c\u53f8' credit_card_expire()\uff1a\u968f\u673a\u4fe1\u7528\u5361\u5230\u671f\u65e5\uff0c\u5982'03/30' credit_card_full()\uff1a\u751f\u6210\u5b8c\u6574\u4fe1\u7528\u5361\u4fe1\u606f credit_card_number()\uff1a\u4fe1\u7528\u5361\u53f7 credit_card_provider()\uff1a\u4fe1\u7528\u5361\u7c7b\u578b credit_card_security_code()\uff1a\u4fe1\u7528\u5361\u5b89\u5168\u7801 job()\uff1a\u968f\u673a\u804c\u4f4d first_name_female()\uff1a\u5973\u6027\u540d first_name_male()\uff1a\u7537\u6027\u540d name()\uff1a\u968f\u673a\u751f\u6210\u5168\u540d name_female()\uff1a\u7537\u6027\u5168\u540d name_male()\uff1a\u5973\u6027\u5168\u540d phone_number()\uff1a\u968f\u673a\u751f\u6210\u624b\u673a\u53f7 phonenumber_prefix()\uff1a\u968f\u673a\u751f\u6210\u624b\u673a\u53f7\u6bb5\uff0c\u5982139","title":"2.\u57fa\u7840\u4fe1\u606f\u7c7b"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#3","text":"ascii_company_email()\uff1a\u968f\u673aASCII\u516c\u53f8\u90ae\u7bb1\u540d ascii_email()\uff1a\u968f\u673aASCII\u90ae\u7bb1\uff1a company_email()\uff1a\u516c\u53f8\u90ae\u7bb1 email()\uff1a\u666e\u901a\u90ae\u7bb1 safe_email()\uff1a\u5b89\u5168\u90ae\u7bb1","title":"3.\u90ae\u7bb1\u4fe1\u606f\u7c7b"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#4","text":"domain_name()\uff1a\u751f\u6210\u57df\u540d domain_word()\uff1a\u57df\u8bcd(\u5373\uff0c\u4e0d\u5305\u542b\u540e\u7f00) ipv4()\uff1a\u968f\u673aIP4\u5730\u5740 ipv6()\uff1a\u968f\u673aIP6\u5730\u5740 mac_address()\uff1a\u968f\u673aMAC\u5730\u5740 tld()\uff1a\u7f51\u5740\u57df\u540d\u540e\u7f00(.com,.net.cn,\u7b49\u7b49\uff0c\u4e0d\u5305\u62ec.) uri()\uff1a\u968f\u673aURI\u5730\u5740 uri_extension()\uff1a\u7f51\u5740\u6587\u4ef6\u540e\u7f00 uri_page()\uff1a\u7f51\u5740\u6587\u4ef6\uff08\u4e0d\u5305\u542b\u540e\u7f00\uff09 uri_path()\uff1a\u7f51\u5740\u6587\u4ef6\u8def\u5f84\uff08\u4e0d\u5305\u542b\u6587\u4ef6\u540d\uff09 url()\uff1a\u968f\u673aURL\u5730\u5740 user_name()\uff1a\u968f\u673a\u7528\u6237\u540d image_url()\uff1a\u968f\u673aURL\u5730\u5740","title":"4.\u7f51\u7edc\u57fa\u7840\u4fe1\u606f\u7c7b"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#5","text":"chrome()\uff1a\u968f\u673a\u751f\u6210Chrome\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f firefox()\uff1a\u968f\u673a\u751f\u6210FireFox\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f internet_explorer()\uff1a\u968f\u673a\u751f\u6210IE\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f opera()\uff1a\u968f\u673a\u751f\u6210Opera\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f safari()\uff1a\u968f\u673a\u751f\u6210Safari\u7684\u6d4f\u89c8\u5668user_agent\u4fe1\u606f linux_platform_token()\uff1a\u968f\u673aLinux\u4fe1\u606f user_agent()\uff1a\u968f\u673auser_agent\u4fe1\u606f","title":"5.\u6d4f\u89c8\u5668\u4fe1\u606f\u7c7b"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#6","text":"numerify()\uff1a\u4e09\u4f4d\u968f\u673a\u6570\u5b57 random_digit()\uff1a0~9\u968f\u673a\u6570 random_digit_not_null()\uff1a1~9\u7684\u968f\u673a\u6570 random_int()\uff1a\u968f\u673a\u6570\u5b57\uff0c\u9ed8\u8ba40~9999\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6emin,max\u6765\u8bbe\u7f6e random_number()\uff1a\u968f\u673a\u6570\u5b57\uff0c\u53c2\u6570digits\u8bbe\u7f6e\u751f\u6210\u7684\u6570\u5b57\u4f4d\u6570 pyfloat()\uff1a\u968f\u673aFloat\u6570\u5b57 pyint()\uff1a\u968f\u673aInt\u6570\u5b57\uff08\u53c2\u8003random_int()\u53c2\u6570\uff09 pydecimal()\uff1a\u968f\u673aDecimal\u6570\u5b57\uff08\u53c2\u8003pyfloat\u53c2\u6570\uff09","title":"6.\u6570\u5b57\u4fe1\u606f"},{"location":"Other/005%20Faker-%E4%B8%93%E4%B8%9A%E9%80%A0%E6%95%B0%E6%8D%AE/#7","text":"pystr()\uff1a\u968f\u673a\u5b57\u7b26\u4e32 random_element()\uff1a\u968f\u673a\u5b57\u6bcd random_letter()\uff1a\u968f\u673a\u5b57\u6bcd paragraph()\uff1a\u968f\u673a\u751f\u6210\u4e00\u4e2a\u6bb5\u843d paragraphs()\uff1a\u968f\u673a\u751f\u6210\u591a\u4e2a\u6bb5\u843d sentence()\uff1a\u968f\u673a\u751f\u6210\u4e00\u53e5\u8bdd sentences()\uff1a\u968f\u673a\u751f\u6210\u591a\u53e5\u8bdd\uff0c\u4e0e\u6bb5\u843d\u7c7b\u4f3c text()\uff1a\u968f\u673a\u751f\u6210\u4e00\u7bc7\u6587\u7ae0 word()\uff1a\u968f\u673a\u751f\u6210\u8bcd\u8bed words()\uff1a\u968f\u673a\u751f\u6210\u591a\u4e2a\u8bcd\u8bed\uff0c\u7528\u6cd5\u4e0e\u6bb5\u843d\uff0c\u53e5\u5b50\uff0c\u7c7b\u4f3c binary()\uff1a\u968f\u673a\u751f\u6210\u4e8c\u8fdb\u5236\u7f16\u7801 boolean()\uff1aTrue/False language_code()\uff1a\u968f\u673a\u751f\u6210\u4e24\u4f4d\u8bed\u8a00\u7f16\u7801 locale()\uff1a\u968f\u673a\u751f\u6210\u8bed\u8a00/\u56fd\u9645 \u4fe1\u606f md5()\uff1a\u968f\u673a\u751f\u6210MD5 null_boolean()\uff1aNULL/True/False password()\uff1a\u968f\u673a\u751f\u6210\u5bc6\u7801,\u53ef\u9009\u53c2\u6570\uff1alength\uff1a\u5bc6\u7801\u957f\u5ea6\uff1bspecial_chars\uff1a\u662f\u5426\u80fd\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\uff1bdigits\uff1a\u662f\u5426\u5305\u542b\u6570\u5b57\uff1bupper_case\uff1a\u662f\u5426\u5305\u542b\u5927\u5199\u5b57\u6bcd\uff1blower_case\uff1a\u662f\u5426\u5305\u542b\u5c0f\u5199\u5b57\u6bcd sha1()\uff1a\u968f\u673aSHA1 sha256()\uff1a\u968f\u673aSHA256 uuid4()\uff1a\u968f\u673aUUID","title":"7.\u6587\u672c\u52a0\u5bc6\u7c7b"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/","text":"shell\u7b14\u8bb0 \u4e00\u3001\u5e38\u7528\u547d\u4ee4 1.head \u9ed8\u8ba4\u83b7\u53d6\u6587\u4ef6\u524d10\u884c -n \u83b7\u53d6\u6307\u5b9a\u7684\u884c\u6570 head -n 3 /etc/passwd head -3 /etc/passwd -c \u83b7\u53d6\u524dn\u4e2a\u5b57\u7b26 head -c 3 /etc/passwd 2.tail \u9ed8\u8ba4\u83b7\u53d6\u6587\u4ef6\u540e10\u884c -n \u83b7\u53d6\u6307\u5b9a\u7684\u884c\u6570 tail -n 3 /etc/passwd tail -3 /etc/passwd -c \u83b7\u53d6\u540en\u4e2a\u5b57\u7b26 tail -c 3 /etc/passwd 3.cut \u53d6\u51fa\u6587\u4ef6\u5236\u5b9a\u7684\u5217 \u9ed8\u8ba4\u4ee5\u7a7a\u683c\u6216\u8005tab\u952e\u8fdb\u884c\u5206\u5272\uff08\u4e0d\u652f\u6301\u4e0d\u89c4\u5219\u7684\u7a7a\u683c\uff09 - -d \u6307\u5b9a\u5206\u5272\u7b26 - -f \u6307\u5b9a\u83b7\u53d6\u7684\u5217\u53f7(\u83b7\u53d6\u7b2c\u4e8c\u548c\u7b2c\u56db\u5217\uff1a-f2,4) 4.uniq \u53bb\u9664\u91cd\u590d\u7684\u5185\u5bb9 - -d \u4ec5\u6253\u5370\u6709\u91cd\u590d\u7684\u5143\u7d20\uff08duplicate\uff09 - -c \u6253\u5370\u5143\u7d20\u91cd\u590d\u7684\u4e2a\u6570 5.sort \u5bf9\u6587\u672c\u7684\u5185\u5bb9\u8fdb\u884c\u6392\u5e8f \u9ed8\u8ba4\u4ee5\u5b57\u7b26\u7684ASCII\u7801\u6570\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f - -n \u4ee5\u6570\u503c\u5927\u5c0f\u6392\u5e8f - -r \u5012\u5e8f 6.wc \u8ba1\u7b97\u6587\u672c\u6570\u91cf - wc -l \u6253\u5370\u884c\u6570 - wc -w \u6253\u5370\u5355\u8bcd\u6570 - wc -c \u6253\u5370\u5b57\u8282\u6570 - wc -L \u6253\u5370\u6700\u957f\u884c\u7684\u5b57\u8282\u6570 \u4e8c\u3001\u53d8\u91cf 1\u3001\u5b9a\u4e49\u53d8\u91cf\uff08\u5b9a\u4e49\u7684\u53d8\u91cf\u9ed8\u8ba4\u4e3a\u672c\u5730\u53d8\u91cf\uff09 \u65b9\u5f0f\u4e00\uff1a \u53d8\u91cf\u540d=\u53d8\u91cf\u503c \u53d8\u91cf\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u4e2d\u95f4\u6ca1\u6709\u7279\u6b8a\u5b57\u7b26 \u7b49\u53f7\u4e24\u4fa7\u4e0d\u80fd\u6709\u7a7a\u683c \u65b9\u5f0f\u4e8c\uff1a \u53d8\u91cf\u540d='\u53d8\u91cf\u503c' \u770b\u5230\u7684\u5185\u5bb9\uff0c\u5c31\u8f93\u51fa\u4ec0\u4e48\u5185\u5bb9 \u65b9\u5f0f\u4e09\uff1a \u53d8\u91cf\u540d=\"\u53d8\u91cf\u503c\" \u65b9\u5f0f\u56db\uff1a \u53d8\u91cf\u540d=$(linux\u547d\u4ee4) \u53d8\u91cf\u540d=`linux\u547d\u4ee4` \u5e38\u7528\u65b9\u6cd5 \u5b9a\u4e49\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u7684\u533a\u522b\uff1a \u5982\u679c\u53d8\u91cf\u503c\u4e2d\u6709\u7a7a\u683c\u8981\u7528\u653e\u5230\u5f15\u53f7\u4e2d \u5355\u5f15\u53f7\u4e2d\u7684\u53d8\u91cf\u5982\u679c\u6709\u5f15\u7528\u522b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u6253\u5370\u51fa\u6765\u7684\u503c\u4e0d\u4f1a\u8fdb\u884c\u89e3\u6790 \u53cc\u5f15\u53f7\u4e2d\u7684\u53d8\u91cf\u5982\u679c\u6709\u5f15\u7528\u522b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u6253\u5370\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u89e3\u6790 name='aa bb' echo $name # aa bb var='$name' echo $var # $name var=\"$name\" echo $var # aa bb 2\u3001\u5168\u5c40\u53d8\u91cf \u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4(env)\u67e5\u770b\u73af\u5883\u53d8\u91cf\uff08\u53ea\u663e\u793a\u5168\u5c40\u53d8\u91cf\uff09 \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf \u65b9\u5f0f\u4e00\uff1a \u53d8\u91cf=\u503c export \u53d8\u91cf \u65b9\u5f0f\u4e8c\uff08\u6700\u5e38\u7528\uff09\uff1a export \u53d8\u91cf=\u503c 3\u3001\u5b9a\u4e49\u6c38\u4e45\u53d8\u91cf \u53ef\u4ee5\u5728 ~/.bashrc\u4e2d\u8fdb\u884c\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf \u4e5f\u53ef\u4ee5\u5728 ~/.bash_profile\u4e2d\u5b9a\u4e49 4\u3001\u67e5\u770b\u53d8\u91cf \u65b9\u5f0f\u4e00\uff1a echo $\u53d8\u91cf\u540d \u65b9\u5f0f\u4e8c\uff1a echo \"$\u53d8\u91cf\u540d\" \u8f93\u51fa\u8fdb\u884c\u8f6c\u4e49 echo -e \"one\\ntwo\\tthress\" \u8f93\u51fa\u4e0d\u6362\u884c echo -n \"one two\"; echo -n \"333\" \u8f93\u51fa\u5e26\u989c\u8272\u7684\u5b57\u7b26 echo -e \"\\e[031mYES\\e[0m\" # \u7ea2\u8272 032 # \u7eff\u8272 034 # \u84dd\u8272 5\u3001\u5185\u7f6e\u53d8\u91cf $0 \u83b7\u53d6\u5f53\u524d\u6267\u884c\u7684shell\u811a\u672c\u6587\u4ef6\u540d\uff0c\u5305\u62ec\u811a\u672c\u8def\u5f84 $n \u83b7\u53d6\u5f53\u524d\u6267\u884c\u7684shell\u811a\u672c\u7684\u7b2cn\u4e2a\u53c2\u6570\u503c\uff0cn=1...9\uff0c\u5982\u679cn\u5927\u4e8e9\u5c31\u8981\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765${10} $# \u83b7\u53d6\u5f53\u524dshell\u547d\u4ee4\u884c\u4e2d\u53c2\u6570\u7684\u603b\u4e2a\u6570 $? \u83b7\u53d6\u6267\u884c\u4e0a\u4e00\u4e2a\u6307\u4ee4\u7684\u8fd4\u56de\u503c(0\u4e3a\u6210\u529f\uff0c\u975e0\u4e3a\u5931\u8d25) $* $@ 6\u3001\u6570\u503c\u8fd0\u7b97 + - * / % < <= > >= = != \u65b9\u5f0f\u4e00\uff1a $((\u7b97\u6570\u8868\u8fbe\u5f0f)) \u53d8\u91cf\u53ef\u4ee5\u4e0d\u52a0$ \u65b9\u5f0f\u4e8c\uff1a expr \u7b97\u6570\u8868\u8fbe\u5f0f \u5982\u679c\u9047\u5230 < > \u9700\u8981\u8fdb\u884c\u8f6c\u4e49 /< /> \u65b9\u5f0f\u4e09\uff1a bc scale=3 \u8868\u793a\u4fdd\u75593\u4f4d\u5c0f\u6570 echo \"scale=3; 10/3\" | bc 7\u3001\u6761\u4ef6\u8868\u8fbe\u5f0f \u683c\u5f0f\uff1a test [ \u6761\u4ef6\u8868\u8fbe\u5f0f ] 1. \u8fd4\u56de\u503c \u6761\u4ef6\u6210\u7acb\uff0c\u8fd4\u56de0 \u6761\u4ef6\u4e0d\u6210\u7acb\uff0c\u8fd4\u56de1 2. \u6587\u4ef6\u8868\u8fbe\u5f0f -f \u5224\u65ad\u8f93\u5165\u7684\u5185\u5bb9\u662f\u5426\u662f\u4e00\u4e2a\u6587\u4ef6 -d \u5224\u65ad\u8f93\u5165\u5185\u5bb9\u662f\u5426\u662f\u4e00\u4e2a\u76ee\u5f55 -x \u5224\u65ad\u8f93\u5165\u5185\u5bb9\u662f\u5426\u53ef\u6267\u884c -e \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 -r -w 3. \u6570\u503c\u64cd\u4f5c\u7b26 n1 -eq n2 \u76f8\u7b49 n1 -gt n2 \u5927\u4e8e n1 -lt n2 \u5c0f\u4e8e n1 -ne n2 \u4e0d\u7b49\u4e8e 4. \u5b57\u7b26\u4e32\u6bd4\u8f83 str1 == str2 str1\u548cstr2\u5b57\u7b26\u4e32\u5185\u5bb9\u4e00\u81f4 str1 != str2 str1\u548cstr2\u5b57\u7b26\u4e32\u5185\u5bb9\u4e0d\u4e00\u81f4\uff0c!\u8868\u793a\u76f8\u53cd\u7684\u610f\u601d 5. \u903b\u8f91\u8868\u8fbe\u5f0f && \u548c || -a \u4e0e -o \u6216 read\u7528\u6237\u8f93\u5165 read\u5982\u679c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u53c2\u6570\uff0c\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u4f1a\u81ea\u52a8\u5b58\u653e\u5230$REPLY\u5185\u7f6e\u53d8\u91cf\u4e2d read\u5982\u679c\u6dfb\u52a0\u53c2\u6570\u90a3\u4e48\u4f1a\u81ea\u52a8\u590d\u5236 -p \u63d0\u793a\u7528\u6237\u8f93\u5165 read -p \"\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a\" -n \u4e2a\u6570\uff0c\u6307\u5b9a\u63a5\u53d7\u7528\u6237\u8f93\u5165\u7684\u4e2a\u6570 -s \u6307\u5b9a\u4e0d\u663e\u793a\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9 -e \u5982\u679c\u6709\u9000\u683c\u952e\u4e0d\u4f1a\u663e\u793a^H \u4e09\u3001shell\u811a\u672c\u683c\u5f0f 1. \u683c\u5f0f\u8981\u6c42 1\uff09\u5728\u6587\u4ef6\u9996\u884c\u6307\u5b9a\u6267\u884cshell\u7684\u7a0b\u5e8f\u4ee5\u53ca\u76f8\u5173\u8bf4\u660e # !/bin/bash # Author: Desire # Date: 2021-03-29 2\uff09shell\u811a\u672c\u6587\u4ef6\u540e\u7f00\uff0c.sh 3\uff09\u811a\u672c\u6267\u884c\u5931\u8d25\u65f6\uff0c\u4f7f\u7528exit\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u6765\u9000\u51fa\u7a0b\u5e8f 4\uff09\u9ed8\u8ba4\u7f29\u8fdb4\u4e2a\u7a7a\u683c 5\uff09shell\u811a\u672c\u547d\u540d\u7b80\u5355\uff0c\u6709\u610f\u4e49\uff0c\u89c1\u540d\u77e5\u610f 2. \u6267\u884c\u811a\u672c 1\uff09\u7ed9shell\u811a\u672c\u589e\u52a0\u6267\u884c\u6743\u9650 chmod u+x one.sh \u7ed9\u5f53\u524d\u7528\u6237\u6307\u5b9a\u6267\u884c\u6743\u9650 chmod +x one.sh \u7ed9\u6240\u6709\u7528\u6237\u6307\u5b9a\u6267\u884c\u6743\u9650 2\uff09\u6267\u884cshell\u811a\u672c bash one.sh sh one.sh source one.sh # \u8bbe\u7f6e\u6743\u9650\u540e\u624d\u53ef\u4ee5\u4f7f\u7528 ./one.sh 3\uff09\u8c03\u8bd5\u6a21\u5f0f\u6267\u884c bash -x one.sh 3. \u6ce8\u91ca \u5355\u884c\u6ce8\u91ca # \u591a\u884c\u6ce8\u91ca :<<! \u6ce8\u91ca\u5185\u5bb9 ! \u56db\u3001\u51fd\u6570 1. \u683c\u5f0f \u683c\u5f0f\u4e00\uff1a \u51fd\u6570\u540d() { \u547d\u4ee41 \u547d\u4ee42 } \u683c\u5f0f\u4e8c\uff1a function \u51fd\u6570\u540d { \u547d\u4ee41 \u547d\u4ee42 } 2. \u51fd\u6570\u4f20\u53c2 is_online() { ping -c1 $1 &> /dev/null if [ $? -eq 0 ];then echo \"$1\u4e3b\u673a\u5728\u7ebf\" else echo \"$1\u4e3b\u673a\u4e0d\u5728\u7ebf\" fi } is_online www.baidu.com 3. shell\u811a\u672c\u547d\u4ee4\u4f20\u9012\u53c2\u6570 ------defind_func.sh-------- is_online() { ping -c1 $1 &> /dev/null if [ $? -eq 0 ];then echo \"$1\u4e3b\u673a\u5728\u7ebf\" else echo \"$1\u4e3b\u673a\u4e0d\u5728\u7ebf\" fi } is_online $1 ------\u547d\u4ee4\u884c\u6267\u884cshell\u811a\u672c----- bash defind_func.sh www.baidu.com \u4e94\u3001\u6d41\u7a0b\u63a7\u5236(break\u548ccontinue\u5728\u5faa\u73af\u4e2d\u4e5f\u662f\u53ef\u4ee5\u7528\u7684) 1\u3001if \u65b9\u5f0f\u4e00\uff1a if [ \u6761\u4ef61 ] then \u6307\u4ee41 elif [ \u6761\u4ef62 ] then \u6307\u4ee42 else \u6307\u4ee43 fi \u65b9\u5f0f\u4e8c: if [ \u6761\u4ef61 ]; then \u6307\u4ee41 elif [ \u6761\u4ef62 ]; then \u6307\u4ee42 else \u6307\u4ee43 fi 2\u3001for \u683c\u5f0f\u4e00\uff1a for \u503c in \u5217\u8868 do \u6267\u884c\u8bed\u53e5 done \u683c\u5f0f\u4e8c\uff1a for ((i=1,i<10;i++)) do echo \"$i\" done 3\u3001while \u53ea\u8981\u6761\u4ef6\u6ee1\u8db3\uff0c\u5c31\u4e00\u76f4\u5faa\u73af while \u6761\u4ef6 do \u6267\u884c\u8bed\u53e5 done 4\u3001until \u53ea\u8981\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5c31\u4e00\u76f4\u5faa\u73af until \u6761\u4ef6 do \u6267\u884c\u8bed\u53e5 done 5\u3001case case \u53d8\u91cf\u540d in \u503c1) \u6307\u4ee41 ;; \u503c2) \u6307\u4ee42 ;; \u503c3) \u6307\u4ee43 ;; *) \u6307\u4ee44 ;; esac \u516d\u3001\u6570\u7ec4 1\u3001\u6570\u7ec4\u7684\u5b9a\u4e49 \u4e00\u5bf9\u62ec\u53f7\u8868\u793a\u662f\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u7528\u201c\u7a7a\u683c\u201d\u7b26\u53f7\u5206\u5272\u5f00\uff0c\u5f15\u7528\u4e2a\u6570\u7ec4\u65f6\u4ece\u5e8f\u53f70\u5f00\u59cb \u65b9\u5f0f\u4e00\uff1a array=(10 20 30 40) \u65b9\u5f0f\u4e8c\uff1a array[0]=10 array[1]=20 array[2]=30 array[3]=40 \u65b9\u5f0f\u4e09\uff1a var=\"10 20 30 40\"; array=($var) 2\u3001\u6570\u7ec4\u64cd\u4f5c 1\uff09\u663e\u793a\u6570\u7ec4\u4e2d\u7b2cn\u9879 \u6570\u7ec4\u7684\u5e8f\u53f7\u662f\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff0c\u8d85\u51fa\u7d22\u5f15\u4e0d\u4f1a\u62a5\u9519 echo ${array[n]} 2\uff09\u663e\u793a\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20 echo ${array[@]} OR echo ${array[*]} 3\uff09\u663e\u793a\u6570\u7ec4\u957f\u5ea6 echo ${#array[@]} OR echo ${#array[*]} 4\uff09\u5220\u9664\u6570\u7ec4\u4e2d\u7b2cn\u9879\u5143\u7d20 unset\u4ec5\u4ec5\u53ea\u6e05\u695aarray[n]\u7684\u503c\uff0c\u5e76\u6ca1\u6709\u5c06array[n]\u5220\u9664\u6389 unset array[1] 5\uff09\u5220\u9664\u6574\u4e2a\u6570\u7ec4 unset array 6\uff09\u8f93\u51fa\u6570\u7ec4\u7684\u4ece\u7b2c\u4e00\u9879\u5f00\u59cb\u957f\u5ea6\u4e3a3\u7684\u6570\u7ec4 ${\u6570\u7ec4\u540d[@ or *]:\u8d77\u59cb\u4f4d\u7f6e:\u957f\u5ea6} echo ${array[@]:0:3} 7\uff09\u5c06\u6570\u7ec4\u4e2d\u76840\u66ff\u6362\u62101 ${\u6570\u7ec4\u540d[@ or /*]/\u67e5\u627e\u5b57\u7b26/\u66ff\u6362\u5b57\u7b26} echo ${array[@]/0/1} 8\uff09\u5728\u6570\u7ec4\u8ffd\u52a0\u65b0\u7684\u5143\u7d20 array[${#array[@]}]=1234; echo ${array[@]} \u4e03\u3001\u6587\u672c\u5904\u7406\u4e09\u5251\u5ba2 grep sed awk 1\u3001grep \u67e5\u627e\u6587\u4ef6\u91cc\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32 grep [option] pattern [file1,file2,...] come command | grep [option] pattern -i \u5ffd\u7565\u5927\u5c0f\u5199 -c \u53ea\u8f93\u51fa\u5339\u914d\u884c\u7684\u6570\u91cf -n \u663e\u793a\u884c\u53f7 -r \u9012\u5f52\u641c\u7d22 -E \u652f\u6301\u62d3\u5c55\u6b63\u5219\u8868\u8fbe\u5f0f -w \u5339\u914d\u6574\u4e2a\u5355\u8bcd -l \u53ea\u5217\u51fa\u5339\u914d\u7684\u6587\u4ef6\u540d -F \u4e0d\u652f\u6301\u6b63\u5219\uff0c\u6309\u5b57\u7b26\u4e32\u5b57\u9762\u610f\u601d\u8fdb\u884c\u5339\u914d 2\u3001sed \u6d41\u7f16\u8f91\u5668\uff0c\u5bf9\u6587\u4ef6\u9010\u884c\u8fdb\u884c\u5904\u7406 sed [option] \"pattern command\" file some command | sed [option] \"pattern command\" -n \u53ea\u6253\u5370\u6a21\u5f0f\u5339\u914d\u7684\u884c -f \u52a0\u8f7d\u5b58\u653e\u52a8\u4f5c\u7684\u6587\u4ef6 -r \u652f\u6301\u62d3\u5c55\u6b63\u5219 -i \u652f\u6301\u4fee\u6539\u6587\u4ef6 pattern\u6a21\u5f0f 5 \u53ea\u5904\u7406\u7b2c5\u884c 5,10 \u53ea\u5904\u7406\u7b2c5\u884c\u5230\u7b2c10\u884c /pattern1/ \u53ea\u5904\u7406\u80fd\u5339\u914dpattern1\u7684\u884c /pattern1/,/pattern2/ \u53ea\u5904\u7406\u4ece\u5339\u914dpattern1\u7684\u884c\u5230\u5339\u914dpattern2\u7684\u884c command\u547d\u4ee4 \u67e5\u8be2 p \u6253\u5370 \u65b0\u589e a \u5728\u5339\u914d\u884c\u540e\u65b0\u589e i \u5728\u5339\u914d\u884c\u524d\u65b0\u589e r \u5916\u90e8\u6587\u4ef6\u8bfb\u5165\uff0c\u884c\u540e\u65b0\u589e w \u5339\u914d\u884c\u5199\u5165\u5916\u90e8\u6587\u4ef6 \u5220\u9664 d \u66ff\u6362 s/old/new/ \u53ea\u4fee\u6539\u5339\u914d\u884c\u4e2d\u7b2c\u4e00\u4e2aold s/old/new/g \u4fee\u6539\u5339\u914d\u884c\u4e2d\u6240\u6709\u7684old s/old/new/ig \u5ffd\u7565\u5927\u5c0f\u5199 \u4f8b\u5b50 # \u67e5\u8be2 sed \"p\" passwd # \u6253\u5370\u6e90\u884c\u4fe1\u606f\u548c\u6a21\u5f0f\u5339\u914d\u7684\u884c\uff08\u884c\u6253\u5370\u4fe1\u606f\u4f1a\u6709\u91cd\u590d\u7684\uff09 sed -n \"p\" passwd # \u53ea\u6253\u5370\u6a21\u5f0f\u5339\u914d\u5230\u7684\u884c\u6570\u636e sed -n \"5 p\" passwd # \u6253\u5370\u7b2c5\u884c\u5339\u914d\u5230\u7684\u884c\u6570\u636e sed -n \"5,10 p\" passwd # \u6253\u5370\u7b2c5\u884c\u5230\u7b2c10\u884c\u5339\u914d\u5230\u7684\u6570\u636e\uff08\u5305\u542b\u7b2c5\u884c\u548c\u7b2c10\u884c\uff09 cat -n passwd | sed -n \"12 p\" # \u4ece\u524d\u9762\u7684\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u4e2d\uff0c\u6253\u5370\u7b2c12\u884c\u5339\u914d\u5230\u7684\u884c\u6570\u636e sed -n \"/root/ p\" passwd # \u6253\u5370\u5339\u914d\u5230root\u7684\u884c\u6570\u636e sed -n \"/^root/ p\" passwd # \u6253\u5370\u5339\u914d\u5230\u4ee5root\u5f00\u5934\u7684\u884c\u6570\u636e sed -n \"/\\/sbin\\/nologin/ p\" passwd # \u6253\u5370\u5339\u914d\u5230`/sbin/nologin`\u7684\u884c\u6570\u636e`/`\u9700\u8981\u8fdb\u884c\u8f6c\u4e49 sed -n \"/www/ p\" passwd # \u6253\u5370\u5339\u914d\u5230`www`\u7684\u884c\u6570\u636e sed -nr \"/w{3} p\" passwd # \u4f7f\u7528\u6269\u5c55\u6b63\u5219\u6253\u5370\u5339\u914d\u5230`www`\u7684\u884c\u6570\u636e # \u65b0\u589e sed -n \"/halt/ a \u65b0\u589e\u6587\u672c\u5185\u5bb9\" passwd # \u5728\u5339\u914d\u884c\u540e\u65b0\u589e`\u65b0\u589e\u6587\u672c\u5185\u5bb9`\uff08\u8fd9\u6761\u547d\u4ee4\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u65b0\u589e,\u53ef\u4ee5\u5f53\u505a\u9a8c\u8bc1\u547d\u4ee4\u662f\u5426\u6b63\u786e\uff09 sed -i \"/halt/ a \u65b0\u589e\u6587\u672c\u5185\u5bb9\" passwd # \u4f7f\u7528 `-i`\u624d\u53ef\u4ee5\u771f\u6b63\u7684\u4fee\u6539\u6587\u4ef6 sed -i \"/halt/ w test.txt\" passwd # \u628a\u5339\u914d\u5230\u7684\u884c\u6570\u636e\uff0c\u5199\u5165\u5230test.txt\u5916\u90e8\u6587\u4ef6\u4e2d # sed_file.sed\u5185\u5bb9\u4e3a`/bash/ a \u5b58\u653e\u52a8\u4f5c\u7684\u6587\u4ef6` sed -i -f sed_file.sed passed # \u52a0\u8f7d\u5b58\u653e\u52a8\u4f5c\u547d\u4ee4\u7684\u6587\u4ef6\u8fdb\u884c\u5339\u914d\u884c\u6570\u636e # \u5220\u9664 sed -i \"/#/ d\" sshd_config # \u5220\u9664\u5339\u914d\u5230\u7684`#`\u6ce8\u91ca sed -i \"/^$/ d\" sshd_config # \u5220\u9664\u5339\u914d\u5230\u7684\u7a7a\u884c # \u66ff\u6362 sed -i \"/\\/sbin\\/nologin/ s/bin/BIN/\" passwd # \u4fee\u6539\u5339\u914d\u5230\u7684`/sbin/nologin`\u884c\u4e2d\uff0c\u9996\u4e2a`bin`\u66f4\u6539\u4e3a`BIN` sed -i \"/\\/sbin\\/nologin/ s/bin/BIN/g\" passwd # \u4fee\u6539\u5339\u914d\u5230\u7684`/sbin/nologin`\u884c\u4e2d\uff0c\u6240\u6709`bin`\u66f4\u6539\u4e3a`BIN` sed -i \"s/^#Port 22/Port 2200/\" sshd_config # \u628a\u5339\u914d\u5230\u7684`Port 22`\u4fee\u6539\u4e3a`Prot 2200` 3\u3001awk \u6587\u672c\u5904\u7406\u5de5\u5177\uff0c\u5904\u7406\u6570\u636e\u5e76\u751f\u6210\u7ed3\u679c\u62a5\u544a awk 'BEGIN{} pattern {commands} END{}' file some command | awk 'BEGIN{} pattern {commands} END{}' \u683c\u5f0f BEGIN{} \u5904\u7406\u6570\u636e\u4e4b\u524d\u6267\u884c\uff0c\u53ea\u6267\u884c\u4e00\u6b21 pattern \u5339\u914d\u6a21\u5f0f {commands} \u5904\u7406\u7684\u547d\u4ee4 END{} \u5904\u7406\u6570\u636e\u4e4b\u540e\u6267\u884c\uff0c\u53ea\u6267\u884c\u4e00\u6b21 \u5185\u7f6e\u53d8\u91cf $0 \u6574\u884c\u5185\u5bb9 $1-$n \u5f53\u524d\u884c\u7684\u7b2c1-n\u4e2a\u5b57\u6bb5 NF(Number Field) \u5f53\u524d\u884c\u5b57\u6bb5\u6570 NR(Number Row) \u5f53\u524d\u884c\u884c\u53f7\uff0c\u4ece1\u5f00\u59cb FS(Field Separator) \u8f93\u5165\u5b57\u6bb5\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u6216tab\u952e RS(Row Separator) \u8f93\u5165\u884c\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u56de\u8f66\u7b26 OFS(Output Field Separator) \u8f93\u51fa\u5b57\u6bb5\u5206\u5272\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c ORS(Output Row Separator) \u8f93\u51fa\u884c\u5206\u5272\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u56de\u8f66\u7b26 printf\u683c\u5f0f\u7b26 %s \u5b57\u7b26\u4e32 %d \u5341\u8fdb\u5236\u6570\u5b57 %f \u6d6e\u70b9\u6570 \u4fee\u9970\u7b26 + \u53f3\u5bf9\u9f50 - \u5de6\u5bf9\u9f50 \u5339\u914d\u65b9\u5f0f \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d /\u6b63\u5219\u8868\u8fbe\u5f0f/ \u5173\u7cfb\u8fd0\u7b97 < <= > >= == != \u7b97\u6570\u8fd0\u7b97 + - * / % ^ ** ++i i-- \u6d41\u7a0b\u63a7\u5236\u8bed\u53e5\uff08\u4e0eshell\u811a\u672c\u8bed\u6cd5\u4e0d\u4e00\u6837\uff09 if if (\u6761\u4ef6) \u52a8\u4f5c else if (\u6761\u4ef6) \u52a8\u4f5c else \u52a8\u4f5c for for (i=0;i<=100,i++) { \u52a8\u4f5c } for (i in awk\u6570\u7ec4){ echo $i } while while (\u6761\u4ef6) { \u52a8\u4f5c } \u51fd\u6570 \u5b57\u7b26\u4e32\u51fd\u6570 length(str) tolower(str) toupper(str) \u4f8b\u5b50 awk '{print $0}' stu.txt # \u8bfb\u53d6\u6240\u6709\u7684\u5185\u5bb9 awk '{print $1}' stu.txt # \u8bfb\u53d6\u7b2c\u4e00\u5217\u6570\u636e awk '{print NF}' stu.txt # \u83b7\u53d6\u6bcf\u4e00\u884c\u7684\u5b57\u6bb5\u6570 awk '{print NR}' stu.txt # \u83b7\u53d6\u5f53\u524d\u884c\u53f7 awk -F\":\" '{print $1}' passwd # \u6307\u5b9a\u4ee5`:`\u4e3a\u5206\u5272\u7b26\u7684\u7b2c\u4e00\u5217\u6570\u636e awk -F\":\" '/root/ {print $(NF-1)}' passwd # \u6307\u5b9a\u4ee5`:`\u4e3a\u5206\u5272\u7b26\u7684\u5012\u6570\u7b2c\u4e8c\u5217\u6570\u636e awk -F\":\" '/^halt/,/^ftp/ {print $1}' passwd # \u6307\u5b9a\u4ee5`:`\u4e3a\u5206\u5272\u7b26\u7684\u4ee5`halt`\u5f00\u5934\u5230\u4ee5`ftp`\u5f00\u5934\u884c\u7684\u7b2c\u4e00\u5217\u6570\u636e awk 'BEGIN{FS=\":\"} /root/ {print $1}' passwd # \u4ee5`:`\u8fdb\u884c\u5206\u5272\uff0c\u83b7\u53d6\u5305\u542broot\u7684\u884c\u7684\u7b2c\u4e00\u5217\u6570\u636e awk -F\":\" 'NR == 5 {print}' passwd # \u83b7\u53d6\u7b2c5\u884c\u6570\u636e awk -F\":\" 'NR >= 5 && NR <=10 {print}' passwd # \u83b7\u53d6\u7b2c5-10\u884c\u6570\u636e awk -F\":\" 'NR == 5, NR ==10 {print}' passwd # \u83b7\u53d6\u7b2c5-10\u884c\u6570\u636e awk -F: '{count++} END{print count}' passwd # \u83b7\u53d6\u6587\u4ef6\u603b\u884c\u6570\uff0ccount\u5728awk\u4e2d\u4f1a\u81ea\u52a8\u8fdb\u884c\u5b9a\u4e49\u53d8\u91cf\uff08wc -l passwd \u83b7\u53d6\u6587\u4ef6\u603b\u884c\u6570 \u884c\u6570 \u6587\u4ef6\uff09 awk -F= 'NR == 1 {print $2}' /etc/os-release | awk '{print $1}' |sed 's/\\\"//g' # \u83b7\u53d6Linux\u53d1\u884c\u7248\u672c awk -F: 'BEGIN{printf \"%-20s %-20s\\n\",\"BEGIN\",\"END\"} NR >1 {count++; printf \"%-20s %-20s\\n\",$1,$(NF)} END{printf \"%-20s %-20s\\n\",\"total\",count}' /etc/passwd # \u4f7f\u7528`BEGIN{}`\u7ed9\u7ed3\u679c\u6dfb\u52a0title,\u4f7f\u7528`count++`\u8ba1\u7b97\u603b\u6570\uff0c\u4f7f\u7528`END{}`\u628a\u603b\u6570\u6dfb\u52a0\u5230\u672b\u5c3e(%-20s:\u8868\u793a\u5b57\u7b26\u4e32\u7684\u6307\u5b9a\u957f\u5ea6\u4e3a20\uff0c\u4e0d\u6ee120\u5b57\u7b26\uff0c\u7a7a\u683c\u586b\u5145\uff0c-\u8868\u793a\u5de6\u8fb9\u5bf9\u9f50) awk -F: -f file.awk /etc/passwd # \u8ddf\u4e0a\u9762\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\uff0c\u628a\u590d\u6742\u7684\u6307\u4ee4\u653e\u5728\u4e86file.awk\u6587\u4ef6\u4e2d # file.awk:(\u5728\u6587\u4ef6\u4e2d\u53ef\u4ee5\u4f7f\u7528if for while\u6d41\u7a0b\u63a7\u5236\u8bed\u53e5) ---------------------------------------------------- BEGIN{ printf \"%-20s %-20s\\n\",\"BEGIN\",\"END\" } { if (NR > 1) { count++; printf \"%-20s %-20s\\n\",$1,$(NF) } } END{ printf \"%-20s %-20s\\n\",\"total\",count } ----------------------------------------------------","title":"shell\u7b14\u8bb0"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#shell","text":"","title":"shell\u7b14\u8bb0"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_1","text":"","title":"\u4e00\u3001\u5e38\u7528\u547d\u4ee4"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1head","text":"\u9ed8\u8ba4\u83b7\u53d6\u6587\u4ef6\u524d10\u884c -n \u83b7\u53d6\u6307\u5b9a\u7684\u884c\u6570 head -n 3 /etc/passwd head -3 /etc/passwd -c \u83b7\u53d6\u524dn\u4e2a\u5b57\u7b26 head -c 3 /etc/passwd","title":"1.head"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2tail","text":"\u9ed8\u8ba4\u83b7\u53d6\u6587\u4ef6\u540e10\u884c -n \u83b7\u53d6\u6307\u5b9a\u7684\u884c\u6570 tail -n 3 /etc/passwd tail -3 /etc/passwd -c \u83b7\u53d6\u540en\u4e2a\u5b57\u7b26 tail -c 3 /etc/passwd","title":"2.tail"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3cut","text":"\u53d6\u51fa\u6587\u4ef6\u5236\u5b9a\u7684\u5217 \u9ed8\u8ba4\u4ee5\u7a7a\u683c\u6216\u8005tab\u952e\u8fdb\u884c\u5206\u5272\uff08\u4e0d\u652f\u6301\u4e0d\u89c4\u5219\u7684\u7a7a\u683c\uff09 - -d \u6307\u5b9a\u5206\u5272\u7b26 - -f \u6307\u5b9a\u83b7\u53d6\u7684\u5217\u53f7(\u83b7\u53d6\u7b2c\u4e8c\u548c\u7b2c\u56db\u5217\uff1a-f2,4)","title":"3.cut"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#4uniq","text":"\u53bb\u9664\u91cd\u590d\u7684\u5185\u5bb9 - -d \u4ec5\u6253\u5370\u6709\u91cd\u590d\u7684\u5143\u7d20\uff08duplicate\uff09 - -c \u6253\u5370\u5143\u7d20\u91cd\u590d\u7684\u4e2a\u6570","title":"4.uniq"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#5sort","text":"\u5bf9\u6587\u672c\u7684\u5185\u5bb9\u8fdb\u884c\u6392\u5e8f \u9ed8\u8ba4\u4ee5\u5b57\u7b26\u7684ASCII\u7801\u6570\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f - -n \u4ee5\u6570\u503c\u5927\u5c0f\u6392\u5e8f - -r \u5012\u5e8f","title":"5.sort"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#6wc","text":"\u8ba1\u7b97\u6587\u672c\u6570\u91cf - wc -l \u6253\u5370\u884c\u6570 - wc -w \u6253\u5370\u5355\u8bcd\u6570 - wc -c \u6253\u5370\u5b57\u8282\u6570 - wc -L \u6253\u5370\u6700\u957f\u884c\u7684\u5b57\u8282\u6570","title":"6.wc"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_2","text":"","title":"\u4e8c\u3001\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1","text":"","title":"1\u3001\u5b9a\u4e49\u53d8\u91cf\uff08\u5b9a\u4e49\u7684\u53d8\u91cf\u9ed8\u8ba4\u4e3a\u672c\u5730\u53d8\u91cf\uff09"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_3","text":"\u53d8\u91cf\u540d=\u53d8\u91cf\u503c \u53d8\u91cf\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u4e2d\u95f4\u6ca1\u6709\u7279\u6b8a\u5b57\u7b26 \u7b49\u53f7\u4e24\u4fa7\u4e0d\u80fd\u6709\u7a7a\u683c","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_4","text":"\u53d8\u91cf\u540d='\u53d8\u91cf\u503c' \u770b\u5230\u7684\u5185\u5bb9\uff0c\u5c31\u8f93\u51fa\u4ec0\u4e48\u5185\u5bb9","title":"\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_5","text":"\u53d8\u91cf\u540d=\"\u53d8\u91cf\u503c\"","title":"\u65b9\u5f0f\u4e09\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_6","text":"\u53d8\u91cf\u540d=$(linux\u547d\u4ee4) \u53d8\u91cf\u540d=`linux\u547d\u4ee4` \u5e38\u7528\u65b9\u6cd5","title":"\u65b9\u5f0f\u56db\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_7","text":"\u5982\u679c\u53d8\u91cf\u503c\u4e2d\u6709\u7a7a\u683c\u8981\u7528\u653e\u5230\u5f15\u53f7\u4e2d \u5355\u5f15\u53f7\u4e2d\u7684\u53d8\u91cf\u5982\u679c\u6709\u5f15\u7528\u522b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u6253\u5370\u51fa\u6765\u7684\u503c\u4e0d\u4f1a\u8fdb\u884c\u89e3\u6790 \u53cc\u5f15\u53f7\u4e2d\u7684\u53d8\u91cf\u5982\u679c\u6709\u5f15\u7528\u522b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u6253\u5370\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u89e3\u6790 name='aa bb' echo $name # aa bb var='$name' echo $var # $name var=\"$name\" echo $var # aa bb","title":"\u5b9a\u4e49\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u7684\u533a\u522b\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2","text":"\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4(env)\u67e5\u770b\u73af\u5883\u53d8\u91cf\uff08\u53ea\u663e\u793a\u5168\u5c40\u53d8\u91cf\uff09","title":"2\u3001\u5168\u5c40\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_8","text":"","title":"\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_9","text":"\u53d8\u91cf=\u503c export \u53d8\u91cf","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_10","text":"export \u53d8\u91cf=\u503c","title":"\u65b9\u5f0f\u4e8c\uff08\u6700\u5e38\u7528\uff09\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3","text":"\u53ef\u4ee5\u5728 ~/.bashrc\u4e2d\u8fdb\u884c\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf \u4e5f\u53ef\u4ee5\u5728 ~/.bash_profile\u4e2d\u5b9a\u4e49","title":"3\u3001\u5b9a\u4e49\u6c38\u4e45\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#4","text":"","title":"4\u3001\u67e5\u770b\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_11","text":"echo $\u53d8\u91cf\u540d","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_12","text":"echo \"$\u53d8\u91cf\u540d\"","title":"\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_13","text":"echo -e \"one\\ntwo\\tthress\"","title":"\u8f93\u51fa\u8fdb\u884c\u8f6c\u4e49"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_14","text":"echo -n \"one two\"; echo -n \"333\"","title":"\u8f93\u51fa\u4e0d\u6362\u884c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_15","text":"echo -e \"\\e[031mYES\\e[0m\" # \u7ea2\u8272 032 # \u7eff\u8272 034 # \u84dd\u8272","title":"\u8f93\u51fa\u5e26\u989c\u8272\u7684\u5b57\u7b26"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#5","text":"$0 \u83b7\u53d6\u5f53\u524d\u6267\u884c\u7684shell\u811a\u672c\u6587\u4ef6\u540d\uff0c\u5305\u62ec\u811a\u672c\u8def\u5f84 $n \u83b7\u53d6\u5f53\u524d\u6267\u884c\u7684shell\u811a\u672c\u7684\u7b2cn\u4e2a\u53c2\u6570\u503c\uff0cn=1...9\uff0c\u5982\u679cn\u5927\u4e8e9\u5c31\u8981\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765${10} $# \u83b7\u53d6\u5f53\u524dshell\u547d\u4ee4\u884c\u4e2d\u53c2\u6570\u7684\u603b\u4e2a\u6570 $? \u83b7\u53d6\u6267\u884c\u4e0a\u4e00\u4e2a\u6307\u4ee4\u7684\u8fd4\u56de\u503c(0\u4e3a\u6210\u529f\uff0c\u975e0\u4e3a\u5931\u8d25) $* $@","title":"5\u3001\u5185\u7f6e\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#6","text":"+ - * / % < <= > >= = !=","title":"6\u3001\u6570\u503c\u8fd0\u7b97"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_16","text":"$((\u7b97\u6570\u8868\u8fbe\u5f0f)) \u53d8\u91cf\u53ef\u4ee5\u4e0d\u52a0$","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_17","text":"expr \u7b97\u6570\u8868\u8fbe\u5f0f \u5982\u679c\u9047\u5230 < > \u9700\u8981\u8fdb\u884c\u8f6c\u4e49 /< />","title":"\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_18","text":"bc scale=3 \u8868\u793a\u4fdd\u75593\u4f4d\u5c0f\u6570 echo \"scale=3; 10/3\" | bc","title":"\u65b9\u5f0f\u4e09\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#7","text":"","title":"7\u3001\u6761\u4ef6\u8868\u8fbe\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_19","text":"test [ \u6761\u4ef6\u8868\u8fbe\u5f0f ]","title":"\u683c\u5f0f\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1_1","text":"\u6761\u4ef6\u6210\u7acb\uff0c\u8fd4\u56de0 \u6761\u4ef6\u4e0d\u6210\u7acb\uff0c\u8fd4\u56de1","title":"1. \u8fd4\u56de\u503c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2_1","text":"-f \u5224\u65ad\u8f93\u5165\u7684\u5185\u5bb9\u662f\u5426\u662f\u4e00\u4e2a\u6587\u4ef6 -d \u5224\u65ad\u8f93\u5165\u5185\u5bb9\u662f\u5426\u662f\u4e00\u4e2a\u76ee\u5f55 -x \u5224\u65ad\u8f93\u5165\u5185\u5bb9\u662f\u5426\u53ef\u6267\u884c -e \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 -r -w","title":"2. \u6587\u4ef6\u8868\u8fbe\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3_1","text":"n1 -eq n2 \u76f8\u7b49 n1 -gt n2 \u5927\u4e8e n1 -lt n2 \u5c0f\u4e8e n1 -ne n2 \u4e0d\u7b49\u4e8e","title":"3. \u6570\u503c\u64cd\u4f5c\u7b26"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#4_1","text":"str1 == str2 str1\u548cstr2\u5b57\u7b26\u4e32\u5185\u5bb9\u4e00\u81f4 str1 != str2 str1\u548cstr2\u5b57\u7b26\u4e32\u5185\u5bb9\u4e0d\u4e00\u81f4\uff0c!\u8868\u793a\u76f8\u53cd\u7684\u610f\u601d","title":"4. \u5b57\u7b26\u4e32\u6bd4\u8f83"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#5_1","text":"&& \u548c || -a \u4e0e -o \u6216","title":"5. \u903b\u8f91\u8868\u8fbe\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#read","text":"read\u5982\u679c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u53c2\u6570\uff0c\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u4f1a\u81ea\u52a8\u5b58\u653e\u5230$REPLY\u5185\u7f6e\u53d8\u91cf\u4e2d read\u5982\u679c\u6dfb\u52a0\u53c2\u6570\u90a3\u4e48\u4f1a\u81ea\u52a8\u590d\u5236 -p \u63d0\u793a\u7528\u6237\u8f93\u5165 read -p \"\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a\" -n \u4e2a\u6570\uff0c\u6307\u5b9a\u63a5\u53d7\u7528\u6237\u8f93\u5165\u7684\u4e2a\u6570 -s \u6307\u5b9a\u4e0d\u663e\u793a\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9 -e \u5982\u679c\u6709\u9000\u683c\u952e\u4e0d\u4f1a\u663e\u793a^H","title":"read\u7528\u6237\u8f93\u5165"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#shell_1","text":"","title":"\u4e09\u3001shell\u811a\u672c\u683c\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1_2","text":"","title":"1. \u683c\u5f0f\u8981\u6c42"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1shell","text":"# !/bin/bash # Author: Desire # Date: 2021-03-29","title":"1\uff09\u5728\u6587\u4ef6\u9996\u884c\u6307\u5b9a\u6267\u884cshell\u7684\u7a0b\u5e8f\u4ee5\u53ca\u76f8\u5173\u8bf4\u660e"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2shellsh","text":"","title":"2\uff09shell\u811a\u672c\u6587\u4ef6\u540e\u7f00\uff0c.sh"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3exit","text":"","title":"3\uff09\u811a\u672c\u6267\u884c\u5931\u8d25\u65f6\uff0c\u4f7f\u7528exit\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u6765\u9000\u51fa\u7a0b\u5e8f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#44","text":"","title":"4\uff09\u9ed8\u8ba4\u7f29\u8fdb4\u4e2a\u7a7a\u683c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#5shell","text":"","title":"5\uff09shell\u811a\u672c\u547d\u540d\u7b80\u5355\uff0c\u6709\u610f\u4e49\uff0c\u89c1\u540d\u77e5\u610f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2_2","text":"","title":"2. \u6267\u884c\u811a\u672c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1shell_1","text":"chmod u+x one.sh \u7ed9\u5f53\u524d\u7528\u6237\u6307\u5b9a\u6267\u884c\u6743\u9650 chmod +x one.sh \u7ed9\u6240\u6709\u7528\u6237\u6307\u5b9a\u6267\u884c\u6743\u9650","title":"1\uff09\u7ed9shell\u811a\u672c\u589e\u52a0\u6267\u884c\u6743\u9650"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2shell","text":"bash one.sh sh one.sh source one.sh # \u8bbe\u7f6e\u6743\u9650\u540e\u624d\u53ef\u4ee5\u4f7f\u7528 ./one.sh","title":"2\uff09\u6267\u884cshell\u811a\u672c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3_2","text":"bash -x one.sh","title":"3\uff09\u8c03\u8bd5\u6a21\u5f0f\u6267\u884c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3_3","text":"","title":"3. \u6ce8\u91ca"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_20","text":"#","title":"\u5355\u884c\u6ce8\u91ca"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_21","text":":<<! \u6ce8\u91ca\u5185\u5bb9 !","title":"\u591a\u884c\u6ce8\u91ca"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_22","text":"","title":"\u56db\u3001\u51fd\u6570"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1_3","text":"","title":"1. \u683c\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_23","text":"\u51fd\u6570\u540d() { \u547d\u4ee41 \u547d\u4ee42 }","title":"\u683c\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_24","text":"function \u51fd\u6570\u540d { \u547d\u4ee41 \u547d\u4ee42 }","title":"\u683c\u5f0f\u4e8c\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2_3","text":"is_online() { ping -c1 $1 &> /dev/null if [ $? -eq 0 ];then echo \"$1\u4e3b\u673a\u5728\u7ebf\" else echo \"$1\u4e3b\u673a\u4e0d\u5728\u7ebf\" fi } is_online www.baidu.com","title":"2. \u51fd\u6570\u4f20\u53c2"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3-shell","text":"------defind_func.sh-------- is_online() { ping -c1 $1 &> /dev/null if [ $? -eq 0 ];then echo \"$1\u4e3b\u673a\u5728\u7ebf\" else echo \"$1\u4e3b\u673a\u4e0d\u5728\u7ebf\" fi } is_online $1 ------\u547d\u4ee4\u884c\u6267\u884cshell\u811a\u672c----- bash defind_func.sh www.baidu.com","title":"3. shell\u811a\u672c\u547d\u4ee4\u4f20\u9012\u53c2\u6570"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#breakcontinue","text":"","title":"\u4e94\u3001\u6d41\u7a0b\u63a7\u5236(break\u548ccontinue\u5728\u5faa\u73af\u4e2d\u4e5f\u662f\u53ef\u4ee5\u7528\u7684)"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1if","text":"","title":"1\u3001if"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_25","text":"if [ \u6761\u4ef61 ] then \u6307\u4ee41 elif [ \u6761\u4ef62 ] then \u6307\u4ee42 else \u6307\u4ee43 fi","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_26","text":"if [ \u6761\u4ef61 ]; then \u6307\u4ee41 elif [ \u6761\u4ef62 ]; then \u6307\u4ee42 else \u6307\u4ee43 fi","title":"\u65b9\u5f0f\u4e8c:"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2for","text":"","title":"2\u3001for"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_27","text":"for \u503c in \u5217\u8868 do \u6267\u884c\u8bed\u53e5 done","title":"\u683c\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_28","text":"for ((i=1,i<10;i++)) do echo \"$i\" done","title":"\u683c\u5f0f\u4e8c\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3while","text":"","title":"3\u3001while"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_29","text":"while \u6761\u4ef6 do \u6267\u884c\u8bed\u53e5 done","title":"\u53ea\u8981\u6761\u4ef6\u6ee1\u8db3\uff0c\u5c31\u4e00\u76f4\u5faa\u73af"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#4until","text":"","title":"4\u3001until"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_30","text":"until \u6761\u4ef6 do \u6267\u884c\u8bed\u53e5 done","title":"\u53ea\u8981\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5c31\u4e00\u76f4\u5faa\u73af"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#5case","text":"case \u53d8\u91cf\u540d in \u503c1) \u6307\u4ee41 ;; \u503c2) \u6307\u4ee42 ;; \u503c3) \u6307\u4ee43 ;; *) \u6307\u4ee44 ;; esac","title":"5\u3001case"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_31","text":"","title":"\u516d\u3001\u6570\u7ec4"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1_4","text":"\u4e00\u5bf9\u62ec\u53f7\u8868\u793a\u662f\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u7528\u201c\u7a7a\u683c\u201d\u7b26\u53f7\u5206\u5272\u5f00\uff0c\u5f15\u7528\u4e2a\u6570\u7ec4\u65f6\u4ece\u5e8f\u53f70\u5f00\u59cb","title":"1\u3001\u6570\u7ec4\u7684\u5b9a\u4e49"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_32","text":"array=(10 20 30 40)","title":"\u65b9\u5f0f\u4e00\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_33","text":"array[0]=10 array[1]=20 array[2]=30 array[3]=40","title":"\u65b9\u5f0f\u4e8c\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_34","text":"var=\"10 20 30 40\"; array=($var)","title":"\u65b9\u5f0f\u4e09\uff1a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2_4","text":"","title":"2\u3001\u6570\u7ec4\u64cd\u4f5c"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1n","text":"\u6570\u7ec4\u7684\u5e8f\u53f7\u662f\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff0c\u8d85\u51fa\u7d22\u5f15\u4e0d\u4f1a\u62a5\u9519 echo ${array[n]}","title":"1\uff09\u663e\u793a\u6570\u7ec4\u4e2d\u7b2cn\u9879"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2_5","text":"echo ${array[@]} OR echo ${array[*]}","title":"2\uff09\u663e\u793a\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3_4","text":"echo ${#array[@]} OR echo ${#array[*]}","title":"3\uff09\u663e\u793a\u6570\u7ec4\u957f\u5ea6"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#4n","text":"unset\u4ec5\u4ec5\u53ea\u6e05\u695aarray[n]\u7684\u503c\uff0c\u5e76\u6ca1\u6709\u5c06array[n]\u5220\u9664\u6389 unset array[1]","title":"4\uff09\u5220\u9664\u6570\u7ec4\u4e2d\u7b2cn\u9879\u5143\u7d20"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#5_2","text":"unset array","title":"5\uff09\u5220\u9664\u6574\u4e2a\u6570\u7ec4"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#63","text":"","title":"6\uff09\u8f93\u51fa\u6570\u7ec4\u7684\u4ece\u7b2c\u4e00\u9879\u5f00\u59cb\u957f\u5ea6\u4e3a3\u7684\u6570\u7ec4"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#or","text":"echo ${array[@]:0:3}","title":"${\u6570\u7ec4\u540d[@ or *]:\u8d77\u59cb\u4f4d\u7f6e:\u957f\u5ea6}"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#701","text":"","title":"7\uff09\u5c06\u6570\u7ec4\u4e2d\u76840\u66ff\u6362\u62101"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#or_1","text":"echo ${array[@]/0/1}","title":"${\u6570\u7ec4\u540d[@ or /*]/\u67e5\u627e\u5b57\u7b26/\u66ff\u6362\u5b57\u7b26}"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#8","text":"array[${#array[@]}]=1234; echo ${array[@]}","title":"8\uff09\u5728\u6570\u7ec4\u8ffd\u52a0\u65b0\u7684\u5143\u7d20"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_35","text":"grep sed awk","title":"\u4e03\u3001\u6587\u672c\u5904\u7406\u4e09\u5251\u5ba2"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#1grep","text":"","title":"1\u3001grep"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_36","text":"grep [option] pattern [file1,file2,...] come command | grep [option] pattern -i \u5ffd\u7565\u5927\u5c0f\u5199 -c \u53ea\u8f93\u51fa\u5339\u914d\u884c\u7684\u6570\u91cf -n \u663e\u793a\u884c\u53f7 -r \u9012\u5f52\u641c\u7d22 -E \u652f\u6301\u62d3\u5c55\u6b63\u5219\u8868\u8fbe\u5f0f -w \u5339\u914d\u6574\u4e2a\u5355\u8bcd -l \u53ea\u5217\u51fa\u5339\u914d\u7684\u6587\u4ef6\u540d -F \u4e0d\u652f\u6301\u6b63\u5219\uff0c\u6309\u5b57\u7b26\u4e32\u5b57\u9762\u610f\u601d\u8fdb\u884c\u5339\u914d","title":"\u67e5\u627e\u6587\u4ef6\u91cc\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#2sed","text":"","title":"2\u3001sed"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_37","text":"sed [option] \"pattern command\" file some command | sed [option] \"pattern command\" -n \u53ea\u6253\u5370\u6a21\u5f0f\u5339\u914d\u7684\u884c -f \u52a0\u8f7d\u5b58\u653e\u52a8\u4f5c\u7684\u6587\u4ef6 -r \u652f\u6301\u62d3\u5c55\u6b63\u5219 -i \u652f\u6301\u4fee\u6539\u6587\u4ef6","title":"\u6d41\u7f16\u8f91\u5668\uff0c\u5bf9\u6587\u4ef6\u9010\u884c\u8fdb\u884c\u5904\u7406"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#pattern","text":"5 \u53ea\u5904\u7406\u7b2c5\u884c 5,10 \u53ea\u5904\u7406\u7b2c5\u884c\u5230\u7b2c10\u884c /pattern1/ \u53ea\u5904\u7406\u80fd\u5339\u914dpattern1\u7684\u884c /pattern1/,/pattern2/ \u53ea\u5904\u7406\u4ece\u5339\u914dpattern1\u7684\u884c\u5230\u5339\u914dpattern2\u7684\u884c","title":"pattern\u6a21\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#command","text":"\u67e5\u8be2 p \u6253\u5370 \u65b0\u589e a \u5728\u5339\u914d\u884c\u540e\u65b0\u589e i \u5728\u5339\u914d\u884c\u524d\u65b0\u589e r \u5916\u90e8\u6587\u4ef6\u8bfb\u5165\uff0c\u884c\u540e\u65b0\u589e w \u5339\u914d\u884c\u5199\u5165\u5916\u90e8\u6587\u4ef6 \u5220\u9664 d \u66ff\u6362 s/old/new/ \u53ea\u4fee\u6539\u5339\u914d\u884c\u4e2d\u7b2c\u4e00\u4e2aold s/old/new/g \u4fee\u6539\u5339\u914d\u884c\u4e2d\u6240\u6709\u7684old s/old/new/ig \u5ffd\u7565\u5927\u5c0f\u5199","title":"command\u547d\u4ee4"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_38","text":"# \u67e5\u8be2 sed \"p\" passwd # \u6253\u5370\u6e90\u884c\u4fe1\u606f\u548c\u6a21\u5f0f\u5339\u914d\u7684\u884c\uff08\u884c\u6253\u5370\u4fe1\u606f\u4f1a\u6709\u91cd\u590d\u7684\uff09 sed -n \"p\" passwd # \u53ea\u6253\u5370\u6a21\u5f0f\u5339\u914d\u5230\u7684\u884c\u6570\u636e sed -n \"5 p\" passwd # \u6253\u5370\u7b2c5\u884c\u5339\u914d\u5230\u7684\u884c\u6570\u636e sed -n \"5,10 p\" passwd # \u6253\u5370\u7b2c5\u884c\u5230\u7b2c10\u884c\u5339\u914d\u5230\u7684\u6570\u636e\uff08\u5305\u542b\u7b2c5\u884c\u548c\u7b2c10\u884c\uff09 cat -n passwd | sed -n \"12 p\" # \u4ece\u524d\u9762\u7684\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u4e2d\uff0c\u6253\u5370\u7b2c12\u884c\u5339\u914d\u5230\u7684\u884c\u6570\u636e sed -n \"/root/ p\" passwd # \u6253\u5370\u5339\u914d\u5230root\u7684\u884c\u6570\u636e sed -n \"/^root/ p\" passwd # \u6253\u5370\u5339\u914d\u5230\u4ee5root\u5f00\u5934\u7684\u884c\u6570\u636e sed -n \"/\\/sbin\\/nologin/ p\" passwd # \u6253\u5370\u5339\u914d\u5230`/sbin/nologin`\u7684\u884c\u6570\u636e`/`\u9700\u8981\u8fdb\u884c\u8f6c\u4e49 sed -n \"/www/ p\" passwd # \u6253\u5370\u5339\u914d\u5230`www`\u7684\u884c\u6570\u636e sed -nr \"/w{3} p\" passwd # \u4f7f\u7528\u6269\u5c55\u6b63\u5219\u6253\u5370\u5339\u914d\u5230`www`\u7684\u884c\u6570\u636e # \u65b0\u589e sed -n \"/halt/ a \u65b0\u589e\u6587\u672c\u5185\u5bb9\" passwd # \u5728\u5339\u914d\u884c\u540e\u65b0\u589e`\u65b0\u589e\u6587\u672c\u5185\u5bb9`\uff08\u8fd9\u6761\u547d\u4ee4\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u65b0\u589e,\u53ef\u4ee5\u5f53\u505a\u9a8c\u8bc1\u547d\u4ee4\u662f\u5426\u6b63\u786e\uff09 sed -i \"/halt/ a \u65b0\u589e\u6587\u672c\u5185\u5bb9\" passwd # \u4f7f\u7528 `-i`\u624d\u53ef\u4ee5\u771f\u6b63\u7684\u4fee\u6539\u6587\u4ef6 sed -i \"/halt/ w test.txt\" passwd # \u628a\u5339\u914d\u5230\u7684\u884c\u6570\u636e\uff0c\u5199\u5165\u5230test.txt\u5916\u90e8\u6587\u4ef6\u4e2d # sed_file.sed\u5185\u5bb9\u4e3a`/bash/ a \u5b58\u653e\u52a8\u4f5c\u7684\u6587\u4ef6` sed -i -f sed_file.sed passed # \u52a0\u8f7d\u5b58\u653e\u52a8\u4f5c\u547d\u4ee4\u7684\u6587\u4ef6\u8fdb\u884c\u5339\u914d\u884c\u6570\u636e # \u5220\u9664 sed -i \"/#/ d\" sshd_config # \u5220\u9664\u5339\u914d\u5230\u7684`#`\u6ce8\u91ca sed -i \"/^$/ d\" sshd_config # \u5220\u9664\u5339\u914d\u5230\u7684\u7a7a\u884c # \u66ff\u6362 sed -i \"/\\/sbin\\/nologin/ s/bin/BIN/\" passwd # \u4fee\u6539\u5339\u914d\u5230\u7684`/sbin/nologin`\u884c\u4e2d\uff0c\u9996\u4e2a`bin`\u66f4\u6539\u4e3a`BIN` sed -i \"/\\/sbin\\/nologin/ s/bin/BIN/g\" passwd # \u4fee\u6539\u5339\u914d\u5230\u7684`/sbin/nologin`\u884c\u4e2d\uff0c\u6240\u6709`bin`\u66f4\u6539\u4e3a`BIN` sed -i \"s/^#Port 22/Port 2200/\" sshd_config # \u628a\u5339\u914d\u5230\u7684`Port 22`\u4fee\u6539\u4e3a`Prot 2200`","title":"\u4f8b\u5b50"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#3awk","text":"","title":"3\u3001awk"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_39","text":"awk 'BEGIN{} pattern {commands} END{}' file some command | awk 'BEGIN{} pattern {commands} END{}'","title":"\u6587\u672c\u5904\u7406\u5de5\u5177\uff0c\u5904\u7406\u6570\u636e\u5e76\u751f\u6210\u7ed3\u679c\u62a5\u544a"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_40","text":"BEGIN{} \u5904\u7406\u6570\u636e\u4e4b\u524d\u6267\u884c\uff0c\u53ea\u6267\u884c\u4e00\u6b21 pattern \u5339\u914d\u6a21\u5f0f {commands} \u5904\u7406\u7684\u547d\u4ee4 END{} \u5904\u7406\u6570\u636e\u4e4b\u540e\u6267\u884c\uff0c\u53ea\u6267\u884c\u4e00\u6b21","title":"\u683c\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_41","text":"$0 \u6574\u884c\u5185\u5bb9 $1-$n \u5f53\u524d\u884c\u7684\u7b2c1-n\u4e2a\u5b57\u6bb5 NF(Number Field) \u5f53\u524d\u884c\u5b57\u6bb5\u6570 NR(Number Row) \u5f53\u524d\u884c\u884c\u53f7\uff0c\u4ece1\u5f00\u59cb FS(Field Separator) \u8f93\u5165\u5b57\u6bb5\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u6216tab\u952e RS(Row Separator) \u8f93\u5165\u884c\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u56de\u8f66\u7b26 OFS(Output Field Separator) \u8f93\u51fa\u5b57\u6bb5\u5206\u5272\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c ORS(Output Row Separator) \u8f93\u51fa\u884c\u5206\u5272\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u56de\u8f66\u7b26","title":"\u5185\u7f6e\u53d8\u91cf"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#printf","text":"%s \u5b57\u7b26\u4e32 %d \u5341\u8fdb\u5236\u6570\u5b57 %f \u6d6e\u70b9\u6570","title":"printf\u683c\u5f0f\u7b26"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_42","text":"+ \u53f3\u5bf9\u9f50 - \u5de6\u5bf9\u9f50","title":"\u4fee\u9970\u7b26"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_43","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d /\u6b63\u5219\u8868\u8fbe\u5f0f/ \u5173\u7cfb\u8fd0\u7b97 < <= > >= == != \u7b97\u6570\u8fd0\u7b97 + - * / % ^ ** ++i i--","title":"\u5339\u914d\u65b9\u5f0f"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#shell_2","text":"if if (\u6761\u4ef6) \u52a8\u4f5c else if (\u6761\u4ef6) \u52a8\u4f5c else \u52a8\u4f5c for for (i=0;i<=100,i++) { \u52a8\u4f5c } for (i in awk\u6570\u7ec4){ echo $i } while while (\u6761\u4ef6) { \u52a8\u4f5c }","title":"\u6d41\u7a0b\u63a7\u5236\u8bed\u53e5\uff08\u4e0eshell\u811a\u672c\u8bed\u6cd5\u4e0d\u4e00\u6837\uff09"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_44","text":"","title":"\u51fd\u6570"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_45","text":"length(str) tolower(str) toupper(str)","title":"\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"Shell/shell%E7%AC%94%E8%AE%B0/#_46","text":"awk '{print $0}' stu.txt # \u8bfb\u53d6\u6240\u6709\u7684\u5185\u5bb9 awk '{print $1}' stu.txt # \u8bfb\u53d6\u7b2c\u4e00\u5217\u6570\u636e awk '{print NF}' stu.txt # \u83b7\u53d6\u6bcf\u4e00\u884c\u7684\u5b57\u6bb5\u6570 awk '{print NR}' stu.txt # \u83b7\u53d6\u5f53\u524d\u884c\u53f7 awk -F\":\" '{print $1}' passwd # \u6307\u5b9a\u4ee5`:`\u4e3a\u5206\u5272\u7b26\u7684\u7b2c\u4e00\u5217\u6570\u636e awk -F\":\" '/root/ {print $(NF-1)}' passwd # \u6307\u5b9a\u4ee5`:`\u4e3a\u5206\u5272\u7b26\u7684\u5012\u6570\u7b2c\u4e8c\u5217\u6570\u636e awk -F\":\" '/^halt/,/^ftp/ {print $1}' passwd # \u6307\u5b9a\u4ee5`:`\u4e3a\u5206\u5272\u7b26\u7684\u4ee5`halt`\u5f00\u5934\u5230\u4ee5`ftp`\u5f00\u5934\u884c\u7684\u7b2c\u4e00\u5217\u6570\u636e awk 'BEGIN{FS=\":\"} /root/ {print $1}' passwd # \u4ee5`:`\u8fdb\u884c\u5206\u5272\uff0c\u83b7\u53d6\u5305\u542broot\u7684\u884c\u7684\u7b2c\u4e00\u5217\u6570\u636e awk -F\":\" 'NR == 5 {print}' passwd # \u83b7\u53d6\u7b2c5\u884c\u6570\u636e awk -F\":\" 'NR >= 5 && NR <=10 {print}' passwd # \u83b7\u53d6\u7b2c5-10\u884c\u6570\u636e awk -F\":\" 'NR == 5, NR ==10 {print}' passwd # \u83b7\u53d6\u7b2c5-10\u884c\u6570\u636e awk -F: '{count++} END{print count}' passwd # \u83b7\u53d6\u6587\u4ef6\u603b\u884c\u6570\uff0ccount\u5728awk\u4e2d\u4f1a\u81ea\u52a8\u8fdb\u884c\u5b9a\u4e49\u53d8\u91cf\uff08wc -l passwd \u83b7\u53d6\u6587\u4ef6\u603b\u884c\u6570 \u884c\u6570 \u6587\u4ef6\uff09 awk -F= 'NR == 1 {print $2}' /etc/os-release | awk '{print $1}' |sed 's/\\\"//g' # \u83b7\u53d6Linux\u53d1\u884c\u7248\u672c awk -F: 'BEGIN{printf \"%-20s %-20s\\n\",\"BEGIN\",\"END\"} NR >1 {count++; printf \"%-20s %-20s\\n\",$1,$(NF)} END{printf \"%-20s %-20s\\n\",\"total\",count}' /etc/passwd # \u4f7f\u7528`BEGIN{}`\u7ed9\u7ed3\u679c\u6dfb\u52a0title,\u4f7f\u7528`count++`\u8ba1\u7b97\u603b\u6570\uff0c\u4f7f\u7528`END{}`\u628a\u603b\u6570\u6dfb\u52a0\u5230\u672b\u5c3e(%-20s:\u8868\u793a\u5b57\u7b26\u4e32\u7684\u6307\u5b9a\u957f\u5ea6\u4e3a20\uff0c\u4e0d\u6ee120\u5b57\u7b26\uff0c\u7a7a\u683c\u586b\u5145\uff0c-\u8868\u793a\u5de6\u8fb9\u5bf9\u9f50) awk -F: -f file.awk /etc/passwd # \u8ddf\u4e0a\u9762\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\uff0c\u628a\u590d\u6742\u7684\u6307\u4ee4\u653e\u5728\u4e86file.awk\u6587\u4ef6\u4e2d # file.awk:(\u5728\u6587\u4ef6\u4e2d\u53ef\u4ee5\u4f7f\u7528if for while\u6d41\u7a0b\u63a7\u5236\u8bed\u53e5) ---------------------------------------------------- BEGIN{ printf \"%-20s %-20s\\n\",\"BEGIN\",\"END\" } { if (NR > 1) { count++; printf \"%-20s %-20s\\n\",$1,$(NF) } } END{ printf \"%-20s %-20s\\n\",\"total\",count } ----------------------------------------------------","title":"\u4f8b\u5b50"}]}